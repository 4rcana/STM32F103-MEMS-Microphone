
STM32F103-MEMS-Microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000891c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  08008a30  08008a30  00009a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c0  080095c0  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095c0  080095c0  0000a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c8  080095c8  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c8  080095c8  0000a5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095cc  080095cc  0000a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080095d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  200001dc  080097ac  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000269c  080097ac  0000b69c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6ef  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c3  00000000  00000000  000188f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a11  00000000  00000000  0001bba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001934f  00000000  00000000  0001c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dd0  00000000  00000000  00035908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7f4  00000000  00000000  000466d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000496c  00000000  00000000  000d2f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d787c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a14 	.word	0x08008a14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008a14 	.word	0x08008a14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b598      	push	{r3, r4, r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fde4 	bl	8001bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f95e 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 fa68 	bl	80014c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff4:	f000 fa48 	bl	8001488 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ff8:	f000 f9ee 	bl	80013d8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ffc:	f000 fa1a 	bl	8001434 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001000:	f000 f9ac 	bl	800135c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001004:	f003 fcc4 	bl	8004990 <SSD1306_Init>

  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK){
 8001008:	489c      	ldr	r0, [pc, #624]	@ (800127c <main+0x298>)
 800100a:	f001 f9ef 	bl	80023ec <HAL_ADCEx_Calibration_Start>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <main+0x34>
	  Error_Handler();
 8001014:	f000 fb6c 	bl	80016f0 <Error_Handler>
  };

  if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,ADC_BUF_LEN) != HAL_OK){
 8001018:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800101c:	4998      	ldr	r1, [pc, #608]	@ (8001280 <main+0x29c>)
 800101e:	4897      	ldr	r0, [pc, #604]	@ (800127c <main+0x298>)
 8001020:	f000 ff02 	bl	8001e28 <HAL_ADC_Start_DMA>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <main+0x4a>
	  Error_Handler();
 800102a:	f000 fb61 	bl	80016f0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(timer){
 800102e:	4b95      	ldr	r3, [pc, #596]	@ (8001284 <main+0x2a0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001036:	f000 80c0 	beq.w	80011ba <main+0x1d6>
 800103a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800103e:	dcf6      	bgt.n	800102e <main+0x4a>
 8001040:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001044:	4293      	cmp	r3, r2
 8001046:	d07e      	beq.n	8001146 <main+0x162>
 8001048:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800104c:	4293      	cmp	r3, r2
 800104e:	dcee      	bgt.n	800102e <main+0x4a>
 8001050:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001054:	d003      	beq.n	800105e <main+0x7a>
 8001056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800105a:	d03a      	beq.n	80010d2 <main+0xee>
 800105c:	e7e7      	b.n	800102e <main+0x4a>
	case 500:
		RMS = sqrt(total_sum/(counter*(ADC_BUF_LEN/2)));
 800105e:	4b8a      	ldr	r3, [pc, #552]	@ (8001288 <main+0x2a4>)
 8001060:	681c      	ldr	r4, [r3, #0]
 8001062:	4b8a      	ldr	r3, [pc, #552]	@ (800128c <main+0x2a8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	02db      	lsls	r3, r3, #11
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe17 	bl	8000c9c <__aeabi_i2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4619      	mov	r1, r3
 8001072:	4620      	mov	r0, r4
 8001074:	f7ff ff1a 	bl	8000eac <__aeabi_fdiv>
 8001078:	4603      	mov	r3, r0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9d4 	bl	8000428 <__aeabi_f2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f006 fdfe 	bl	8007c88 <sqrt>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fcf8 	bl	8000a88 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	4a7d      	ldr	r2, [pc, #500]	@ (8001290 <main+0x2ac>)
 800109c:	6013      	str	r3, [r2, #0]
		sprintf(message_buffer,"RMS Value: %.2f\r\n",RMS);
 800109e:	4b7c      	ldr	r3, [pc, #496]	@ (8001290 <main+0x2ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f9c0 	bl	8000428 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4979      	ldr	r1, [pc, #484]	@ (8001294 <main+0x2b0>)
 80010ae:	487a      	ldr	r0, [pc, #488]	@ (8001298 <main+0x2b4>)
 80010b0:	f004 fc44 	bl	800593c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)message_buffer,40,HAL_MAX_DELAY);
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	2228      	movs	r2, #40	@ 0x28
 80010ba:	4977      	ldr	r1, [pc, #476]	@ (8001298 <main+0x2b4>)
 80010bc:	4877      	ldr	r0, [pc, #476]	@ (800129c <main+0x2b8>)
 80010be:	f003 fa93 	bl	80045e8 <HAL_UART_Transmit>
		counter=0;
 80010c2:	4b72      	ldr	r3, [pc, #456]	@ (800128c <main+0x2a8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		total_sum=0;
 80010c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001288 <main+0x2a4>)
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
		break;
 80010d0:	e0d2      	b.n	8001278 <main+0x294>
	case 1000:
		RMS = sqrt(total_sum/(counter*(ADC_BUF_LEN/2)));
 80010d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001288 <main+0x2a4>)
 80010d4:	681c      	ldr	r4, [r3, #0]
 80010d6:	4b6d      	ldr	r3, [pc, #436]	@ (800128c <main+0x2a8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	02db      	lsls	r3, r3, #11
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fddd 	bl	8000c9c <__aeabi_i2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fee0 	bl	8000eac <__aeabi_fdiv>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f99a 	bl	8000428 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f006 fdc4 	bl	8007c88 <sqrt>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fcbe 	bl	8000a88 <__aeabi_d2f>
 800110c:	4603      	mov	r3, r0
 800110e:	4a60      	ldr	r2, [pc, #384]	@ (8001290 <main+0x2ac>)
 8001110:	6013      	str	r3, [r2, #0]
		sprintf(message_buffer,"RMS Value: %.2f\r\n",RMS);
 8001112:	4b5f      	ldr	r3, [pc, #380]	@ (8001290 <main+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f986 	bl	8000428 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	495c      	ldr	r1, [pc, #368]	@ (8001294 <main+0x2b0>)
 8001122:	485d      	ldr	r0, [pc, #372]	@ (8001298 <main+0x2b4>)
 8001124:	f004 fc0a 	bl	800593c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)message_buffer,40,HAL_MAX_DELAY);
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	2228      	movs	r2, #40	@ 0x28
 800112e:	495a      	ldr	r1, [pc, #360]	@ (8001298 <main+0x2b4>)
 8001130:	485a      	ldr	r0, [pc, #360]	@ (800129c <main+0x2b8>)
 8001132:	f003 fa59 	bl	80045e8 <HAL_UART_Transmit>
		counter=0;
 8001136:	4b55      	ldr	r3, [pc, #340]	@ (800128c <main+0x2a8>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
		total_sum=0;
 800113c:	4b52      	ldr	r3, [pc, #328]	@ (8001288 <main+0x2a4>)
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
		break;
 8001144:	e098      	b.n	8001278 <main+0x294>
	case 1500:
		RMS = sqrt(total_sum/(counter*(ADC_BUF_LEN/2)));
 8001146:	4b50      	ldr	r3, [pc, #320]	@ (8001288 <main+0x2a4>)
 8001148:	681c      	ldr	r4, [r3, #0]
 800114a:	4b50      	ldr	r3, [pc, #320]	@ (800128c <main+0x2a8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	02db      	lsls	r3, r3, #11
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fda3 	bl	8000c9c <__aeabi_i2f>
 8001156:	4603      	mov	r3, r0
 8001158:	4619      	mov	r1, r3
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff fea6 	bl	8000eac <__aeabi_fdiv>
 8001160:	4603      	mov	r3, r0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f960 	bl	8000428 <__aeabi_f2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f006 fd8a 	bl	8007c88 <sqrt>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc84 	bl	8000a88 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a43      	ldr	r2, [pc, #268]	@ (8001290 <main+0x2ac>)
 8001184:	6013      	str	r3, [r2, #0]
		sprintf(message_buffer,"RMS Value: %.2f\r\n",RMS);
 8001186:	4b42      	ldr	r3, [pc, #264]	@ (8001290 <main+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f94c 	bl	8000428 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	493f      	ldr	r1, [pc, #252]	@ (8001294 <main+0x2b0>)
 8001196:	4840      	ldr	r0, [pc, #256]	@ (8001298 <main+0x2b4>)
 8001198:	f004 fbd0 	bl	800593c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)message_buffer,40,HAL_MAX_DELAY);
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	2228      	movs	r2, #40	@ 0x28
 80011a2:	493d      	ldr	r1, [pc, #244]	@ (8001298 <main+0x2b4>)
 80011a4:	483d      	ldr	r0, [pc, #244]	@ (800129c <main+0x2b8>)
 80011a6:	f003 fa1f 	bl	80045e8 <HAL_UART_Transmit>
		counter=0;
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <main+0x2a8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
		total_sum=0;
 80011b0:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <main+0x2a4>)
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
		break;
 80011b8:	e05e      	b.n	8001278 <main+0x294>
	case 2000:
		RMS = sqrt(total_sum/(counter*(ADC_BUF_LEN/2)));
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <main+0x2a4>)
 80011bc:	681c      	ldr	r4, [r3, #0]
 80011be:	4b33      	ldr	r3, [pc, #204]	@ (800128c <main+0x2a8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	02db      	lsls	r3, r3, #11
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd69 	bl	8000c9c <__aeabi_i2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4620      	mov	r0, r4
 80011d0:	f7ff fe6c 	bl	8000eac <__aeabi_fdiv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f926 	bl	8000428 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f006 fd50 	bl	8007c88 <sqrt>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc4a 	bl	8000a88 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a26      	ldr	r2, [pc, #152]	@ (8001290 <main+0x2ac>)
 80011f8:	6013      	str	r3, [r2, #0]
		sprintf(message_buffer,"RMS Value: %.2f\r\n",RMS);
 80011fa:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <main+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f912 	bl	8000428 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4922      	ldr	r1, [pc, #136]	@ (8001294 <main+0x2b0>)
 800120a:	4823      	ldr	r0, [pc, #140]	@ (8001298 <main+0x2b4>)
 800120c:	f004 fb96 	bl	800593c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)message_buffer,40,HAL_MAX_DELAY);
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	2228      	movs	r2, #40	@ 0x28
 8001216:	4920      	ldr	r1, [pc, #128]	@ (8001298 <main+0x2b4>)
 8001218:	4820      	ldr	r0, [pc, #128]	@ (800129c <main+0x2b8>)
 800121a:	f003 f9e5 	bl	80045e8 <HAL_UART_Transmit>
		sprintf(message_buffer,"%.2f",RMS);
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <main+0x2ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f900 	bl	8000428 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	491c      	ldr	r1, [pc, #112]	@ (80012a0 <main+0x2bc>)
 800122e:	481a      	ldr	r0, [pc, #104]	@ (8001298 <main+0x2b4>)
 8001230:	f004 fb84 	bl	800593c <siprintf>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001234:	2000      	movs	r0, #0
 8001236:	f003 fc9d 	bl	8004b74 <SSD1306_Fill>
		SSD1306_GotoXY(0,13);
 800123a:	210d      	movs	r1, #13
 800123c:	2000      	movs	r0, #0
 800123e:	f003 fd0f 	bl	8004c60 <SSD1306_GotoXY>
		SSD1306_Puts("RMS Value: ", &Font_7x10, SSD1306_COLOR_WHITE);
 8001242:	2201      	movs	r2, #1
 8001244:	4917      	ldr	r1, [pc, #92]	@ (80012a4 <main+0x2c0>)
 8001246:	4818      	ldr	r0, [pc, #96]	@ (80012a8 <main+0x2c4>)
 8001248:	f003 fd9e 	bl	8004d88 <SSD1306_Puts>
		SSD1306_GotoXY(80,13);
 800124c:	210d      	movs	r1, #13
 800124e:	2050      	movs	r0, #80	@ 0x50
 8001250:	f003 fd06 	bl	8004c60 <SSD1306_GotoXY>
		SSD1306_Puts(message_buffer, &Font_7x10, SSD1306_COLOR_WHITE);
 8001254:	2201      	movs	r2, #1
 8001256:	4913      	ldr	r1, [pc, #76]	@ (80012a4 <main+0x2c0>)
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <main+0x2b4>)
 800125a:	f003 fd95 	bl	8004d88 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800125e:	f003 fc5b 	bl	8004b18 <SSD1306_UpdateScreen>
		timer=0;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <main+0x2a0>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
		counter=0;
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <main+0x2a8>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
		total_sum=0;
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <main+0x2a4>)
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
		break;
 8001276:	bf00      	nop
	switch(timer){
 8001278:	e6d9      	b.n	800102e <main+0x4a>
 800127a:	bf00      	nop
 800127c:	200001f8 	.word	0x200001f8
 8001280:	20000308 	.word	0x20000308
 8001284:	20002338 	.word	0x20002338
 8001288:	20002308 	.word	0x20002308
 800128c:	20002334 	.word	0x20002334
 8001290:	2000233c 	.word	0x2000233c
 8001294:	08008a30 	.word	0x08008a30
 8001298:	2000230c 	.word	0x2000230c
 800129c:	200002c0 	.word	0x200002c0
 80012a0:	08008a44 	.word	0x08008a44
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	08008a4c 	.word	0x08008a4c

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b6:	2228      	movs	r2, #40	@ 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fba3 	bl	8005a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012dc:	2302      	movs	r3, #2
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2301      	movs	r3, #1
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2310      	movs	r3, #16
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2302      	movs	r3, #2
 80012ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012ec:	2300      	movs	r3, #0
 80012ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012f0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80012f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fba8 	bl	8003a50 <HAL_RCC_OscConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001306:	f000 f9f3 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130a:	230f      	movs	r3, #15
 800130c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800131a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2102      	movs	r1, #2
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fe13 	bl	8003f54 <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001334:	f000 f9dc 	bl	80016f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001338:	2302      	movs	r3, #2
 800133a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800133c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001340:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4618      	mov	r0, r3
 8001346:	f002 ff93 	bl	8004270 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001350:	f000 f9ce 	bl	80016f0 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3750      	adds	r7, #80	@ 0x50
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_ADC1_Init+0x74>)
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <MX_ADC1_Init+0x78>)
 8001370:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_ADC1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <MX_ADC1_Init+0x74>)
 800137a:	2201      	movs	r2, #1
 800137c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_ADC1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <MX_ADC1_Init+0x74>)
 8001386:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800138a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138c:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <MX_ADC1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_ADC1_Init+0x74>)
 8001394:	2201      	movs	r2, #1
 8001396:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <MX_ADC1_Init+0x74>)
 800139a:	f000 fc6d 	bl	8001c78 <HAL_ADC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 f9a4 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013a8:	230a      	movs	r3, #10
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013b0:	2307      	movs	r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_ADC1_Init+0x74>)
 80013ba:	f000 fe1d 	bl	8001ff8 <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013c4:	f000 f994 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200001f8 	.word	0x200001f8
 80013d4:	40012400 	.word	0x40012400

080013d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013de:	4a13      	ldr	r2, [pc, #76]	@ (800142c <MX_I2C1_Init+0x54>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013e4:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <MX_I2C1_Init+0x58>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_I2C1_Init+0x50>)
 8001416:	f001 fd51 	bl	8002ebc <HAL_I2C_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 f966 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000026c 	.word	0x2000026c
 800142c:	40005400 	.word	0x40005400
 8001430:	00061a80 	.word	0x00061a80

08001434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <MX_USART2_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800146c:	f003 f86c 	bl	8004548 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 f93b 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002c0 	.word	0x200002c0
 8001484:	40004400 	.word	0x40004400

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_DMA_Init+0x38>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <MX_DMA_Init+0x38>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_DMA_Init+0x38>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200b      	movs	r0, #11
 80014ac:	f001 f923 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b0:	200b      	movs	r0, #11
 80014b2:	f001 f93c 	bl	800272e <HAL_NVIC_EnableIRQ>

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <MX_GPIO_Init+0xb4>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a26      	ldr	r2, [pc, #152]	@ (8001578 <MX_GPIO_Init+0xb4>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <MX_GPIO_Init+0xb4>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <MX_GPIO_Init+0xb4>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a20      	ldr	r2, [pc, #128]	@ (8001578 <MX_GPIO_Init+0xb4>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_GPIO_Init+0xb4>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_GPIO_Init+0xb4>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a1a      	ldr	r2, [pc, #104]	@ (8001578 <MX_GPIO_Init+0xb4>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_GPIO_Init+0xb4>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2120      	movs	r1, #32
 8001524:	4815      	ldr	r0, [pc, #84]	@ (800157c <MX_GPIO_Init+0xb8>)
 8001526:	f001 fc8f 	bl	8002e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800152a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <MX_GPIO_Init+0xbc>)
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	4811      	ldr	r0, [pc, #68]	@ (8001584 <MX_GPIO_Init+0xc0>)
 8001540:	f001 fafe 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001544:	2320      	movs	r3, #32
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2302      	movs	r3, #2
 8001552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	4808      	ldr	r0, [pc, #32]	@ (800157c <MX_GPIO_Init+0xb8>)
 800155c:	f001 faf0 	bl	8002b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2028      	movs	r0, #40	@ 0x28
 8001566:	f001 f8c6 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800156a:	2028      	movs	r0, #40	@ 0x28
 800156c:	f001 f8df 	bl	800272e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40010800 	.word	0x40010800
 8001580:	10210000 	.word	0x10210000
 8001584:	40011000 	.word	0x40011000

08001588 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<ADC_BUF_LEN/2; i++){
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e037      	b.n	8001606 <HAL_ADC_ConvHalfCpltCallback+0x7e>
		total_sum+=pow((adc_buf[i]*(Vref/(ADC_RESOLUTION-1))-CONSTANT_IN_SILENCE),2);
 8001596:	4a24      	ldr	r2, [pc, #144]	@ (8001628 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff30 	bl	8000404 <__aeabi_i2d>
 80015a4:	a31e      	add	r3, pc, #120	@ (adr r3, 8001620 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe ff95 	bl	80004d8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 80015bc:	f7fe fdd4 	bl	8000168 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015d0:	f006 faf2 	bl	8007bb8 <pow>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff23 	bl	8000428 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fdbf 	bl	800016c <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fa47 	bl	8000a88 <__aeabi_d2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80015fe:	6013      	str	r3, [r2, #0]
	for(int i=0; i<ADC_BUF_LEN/2; i++){
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3301      	adds	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800160c:	dbc3      	blt.n	8001596 <HAL_ADC_ConvHalfCpltCallback+0xe>
 * 		sprintf(message_buffer,"ADC Value: %d, sample: %d\r\n",adc_buf[i],i);
 *		HAL_UART_Transmit(&huart2,(uint8_t *)message_buffer,40,HAL_MAX_DELAY);
 *
 */
	}
	counter++;
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	e734d9b4 	.word	0xe734d9b4
 8001624:	3f4a680c 	.word	0x3f4a680c
 8001628:	20000308 	.word	0x20000308
 800162c:	3ff80000 	.word	0x3ff80000
 8001630:	20002308 	.word	0x20002308
 8001634:	20002334 	.word	0x20002334

08001638 <HAL_ADC_ConvCpltCallback>:

// Different FOR LOOP index variables in case MCU doesn't finish processing
// half callback data before full callback gets triggered

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	for(int j=ADC_BUF_LEN/2; j<ADC_BUF_LEN; j++){
 8001640:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e037      	b.n	80016b8 <HAL_ADC_ConvCpltCallback+0x80>
		total_sum+=pow((adc_buf[j]*(Vref/(ADC_RESOLUTION-1))-CONSTANT_IN_SILENCE),2);
 8001648:	4a25      	ldr	r2, [pc, #148]	@ (80016e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fed7 	bl	8000404 <__aeabi_i2d>
 8001656:	a320      	add	r3, pc, #128	@ (adr r3, 80016d8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe ff3c 	bl	80004d8 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <HAL_ADC_ConvCpltCallback+0xac>)
 800166e:	f7fe fd7b 	bl	8000168 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001682:	f006 fa99 	bl	8007bb8 <pow>
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe feca 	bl	8000428 <__aeabi_f2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7fe fd66 	bl	800016c <__adddf3>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff f9ee 	bl	8000a88 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HAL_ADC_ConvCpltCallback+0xb0>)
 80016b0:	6013      	str	r3, [r2, #0]
	for(int j=ADC_BUF_LEN/2; j<ADC_BUF_LEN; j++){
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016be:	dbc3      	blt.n	8001648 <HAL_ADC_ConvCpltCallback+0x10>
	}
	counter++;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_ADC_ConvCpltCallback+0xb4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <HAL_ADC_ConvCpltCallback+0xb4>)
 80016c8:	6013      	str	r3, [r2, #0]
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	e734d9b4 	.word	0xe734d9b4
 80016dc:	3f4a680c 	.word	0x3f4a680c
 80016e0:	20000308 	.word	0x20000308
 80016e4:	3ff80000 	.word	0x3ff80000
 80016e8:	20002308 	.word	0x20002308
 80016ec:	20002334 	.word	0x20002334

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <Error_Handler+0x8>

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <HAL_MspInit+0x5c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <HAL_MspInit+0x5c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_MspInit+0x60>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_MspInit+0x60>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000

08001760 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a28      	ldr	r2, [pc, #160]	@ (800181c <HAL_ADC_MspInit+0xbc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d149      	bne.n	8001814 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a26      	ldr	r2, [pc, #152]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b0:	2301      	movs	r3, #1
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	4819      	ldr	r0, [pc, #100]	@ (8001824 <HAL_ADC_MspInit+0xc4>)
 80017c0:	f001 f9be 	bl	8002b40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017c6:	4a19      	ldr	r2, [pc, #100]	@ (800182c <HAL_ADC_MspInit+0xcc>)
 80017c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017ee:	2220      	movs	r2, #32
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017fa:	f000 ffb3 	bl	8002764 <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001804:	f7ff ff74 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	4a06      	ldr	r2, [pc, #24]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40012400 	.word	0x40012400
 8001820:	40021000 	.word	0x40021000
 8001824:	40011000 	.word	0x40011000
 8001828:	20000228 	.word	0x20000228
 800182c:	40020008 	.word	0x40020008

08001830 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <HAL_I2C_MspInit+0x90>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d132      	bne.n	80018b6 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <HAL_I2C_MspInit+0x94>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a1b      	ldr	r2, [pc, #108]	@ (80018c4 <HAL_I2C_MspInit+0x94>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <HAL_I2C_MspInit+0x94>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001868:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186e:	2312      	movs	r3, #18
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4812      	ldr	r0, [pc, #72]	@ (80018c8 <HAL_I2C_MspInit+0x98>)
 800187e:	f001 f95f 	bl	8002b40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_I2C_MspInit+0x9c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
 8001898:	4a0c      	ldr	r2, [pc, #48]	@ (80018cc <HAL_I2C_MspInit+0x9c>)
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_I2C_MspInit+0x94>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <HAL_I2C_MspInit+0x94>)
 80018a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_I2C_MspInit+0x94>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	40010000 	.word	0x40010000

080018d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <HAL_UART_MspInit+0x70>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d123      	bne.n	8001938 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <HAL_UART_MspInit+0x74>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a13      	ldr	r2, [pc, #76]	@ (8001944 <HAL_UART_MspInit+0x74>)
 80018f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fa:	61d3      	str	r3, [r2, #28]
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <HAL_UART_MspInit+0x74>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_UART_MspInit+0x74>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <HAL_UART_MspInit+0x74>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_UART_MspInit+0x74>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001920:	230c      	movs	r3, #12
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2302      	movs	r3, #2
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <HAL_UART_MspInit+0x78>)
 8001934:	f001 f904 	bl	8002b40 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40004400 	.word	0x40004400
 8001944:	40021000 	.word	0x40021000
 8001948:	40010800 	.word	0x40010800

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <NMI_Handler+0x4>

08001954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <MemManage_Handler+0x4>

08001964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <UsageFault_Handler+0x4>

08001974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  timer++;
 800199c:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <SysTick_Handler+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a03      	ldr	r2, [pc, #12]	@ (80019b0 <SysTick_Handler+0x18>)
 80019a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a6:	f000 f94b 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20002338 	.word	0x20002338

080019b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <DMA1_Channel1_IRQHandler+0x10>)
 80019ba:	f000 ff8d 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000228 	.word	0x20000228

080019c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019d0:	f001 fa52 	bl	8002e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return 1;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_kill>:

int _kill(int pid, int sig)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f0:	f004 f85c 	bl	8005aac <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2216      	movs	r2, #22
 80019f8:	601a      	str	r2, [r3, #0]
  return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_exit>:

void _exit (int status)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffe7 	bl	80019e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <_exit+0x12>

08001a1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e00a      	b.n	8001a44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a2e:	f3af 8000 	nop.w
 8001a32:	4601      	mov	r1, r0
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	b2ca      	uxtb	r2, r1
 8001a3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbf0      	blt.n	8001a2e <_read+0x12>
  }

  return len;
 8001a4c:	687b      	ldr	r3, [r7, #4]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	e009      	b.n	8001a7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf1      	blt.n	8001a68 <_write+0x12>
  }
  return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_close>:

int _close(int file)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <_isatty>:

int _isatty(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	@ (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f003 ffc4 	bl	8005aac <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20005000 	.word	0x20005000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	20002340 	.word	0x20002340
 8001b58:	200026a0 	.word	0x200026a0

08001b5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <Reset_Handler>:
 8001b68:	f7ff fff8 	bl	8001b5c <SystemInit>
 8001b6c:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <LoopFillZerobss+0xe>)
 8001b6e:	490c      	ldr	r1, [pc, #48]	@ (8001ba0 <LoopFillZerobss+0x12>)
 8001b70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba4 <LoopFillZerobss+0x16>)
 8001b72:	2300      	movs	r3, #0
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:
 8001b76:	58d4      	ldr	r4, [r2, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:
 8001b7c:	18c4      	adds	r4, r0, r3
 8001b7e:	428c      	cmp	r4, r1
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
 8001b82:	4a09      	ldr	r2, [pc, #36]	@ (8001ba8 <LoopFillZerobss+0x1a>)
 8001b84:	4c09      	ldr	r4, [pc, #36]	@ (8001bac <LoopFillZerobss+0x1e>)
 8001b86:	2300      	movs	r3, #0
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:
 8001b8e:	42a2      	cmp	r2, r4
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>
 8001b92:	f003 ff91 	bl	8005ab8 <__libc_init_array>
 8001b96:	f7ff fa25 	bl	8000fe4 <main>
 8001b9a:	4770      	bx	lr
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	200001dc 	.word	0x200001dc
 8001ba4:	080095d0 	.word	0x080095d0
 8001ba8:	200001dc 	.word	0x200001dc
 8001bac:	2000269c 	.word	0x2000269c

08001bb0 <ADC1_2_IRQHandler>:
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_Init+0x28>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <HAL_Init+0x28>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 fd8b 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff fd94 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fda3 	bl	800274a <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f000 fd6b 	bl	80026f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_IncTick+0x1c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a03      	ldr	r2, [pc, #12]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20002344 	.word	0x20002344

08001c64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b02      	ldr	r3, [pc, #8]	@ (8001c74 <HAL_GetTick+0x10>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20002344 	.word	0x20002344

08001c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0be      	b.n	8001e18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fd52 	bl	8001760 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 faed 	bl	800229c <ADC_ConversionStop_Disable>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 8099 	bne.w	8001e06 <HAL_ADC_Init+0x18e>
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8095 	bne.w	8001e06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ce4:	f023 0302 	bic.w	r3, r3, #2
 8001ce8:	f043 0202 	orr.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cf8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7b1b      	ldrb	r3, [r3, #12]
 8001cfe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d10:	d003      	beq.n	8001d1a <HAL_ADC_Init+0xa2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_ADC_Init+0xa8>
 8001d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d1e:	e000      	b.n	8001d22 <HAL_ADC_Init+0xaa>
 8001d20:	2300      	movs	r3, #0
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7d1b      	ldrb	r3, [r3, #20]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d119      	bne.n	8001d64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7b1b      	ldrb	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	035a      	lsls	r2, r3, #13
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	e00b      	b.n	8001d64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	f043 0220 	orr.w	r2, r3, #32
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <HAL_ADC_Init+0x1a8>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d94:	d003      	beq.n	8001d9e <HAL_ADC_Init+0x126>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d104      	bne.n	8001da8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	051b      	lsls	r3, r3, #20
 8001da6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <HAL_ADC_Init+0x1ac>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d10b      	bne.n	8001de4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001de2:	e018      	b.n	8001e16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	f023 0312 	bic.w	r3, r3, #18
 8001dec:	f043 0210 	orr.w	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e04:	e007      	b.n	8001e16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	f043 0210 	orr.w	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	ffe1f7fd 	.word	0xffe1f7fd
 8001e24:	ff1f0efe 	.word	0xff1f0efe

08001e28 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a64      	ldr	r2, [pc, #400]	@ (8001fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_ADC_Start_DMA+0x24>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a63      	ldr	r2, [pc, #396]	@ (8001fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d106      	bne.n	8001e5a <HAL_ADC_Start_DMA+0x32>
 8001e4c:	4b60      	ldr	r3, [pc, #384]	@ (8001fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f040 80b3 	bne.w	8001fc0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_Start_DMA+0x40>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e0ae      	b.n	8001fc6 <HAL_ADC_Start_DMA+0x19e>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f9b9 	bl	80021e8 <ADC_Enable>
 8001e76:	4603      	mov	r3, r0
 8001e78:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 809a 	bne.w	8001fb6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_Start_DMA+0x84>
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d115      	bne.n	8001ed8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d026      	beq.n	8001f14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ece:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ed6:	e01d      	b.n	8001f14 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001edc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a39      	ldr	r2, [pc, #228]	@ (8001fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_ADC_Start_DMA+0xd0>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a38      	ldr	r2, [pc, #224]	@ (8001fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d10d      	bne.n	8001f14 <HAL_ADC_Start_DMA+0xec>
 8001ef8:	4b35      	ldr	r3, [pc, #212]	@ (8001fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	f023 0206 	bic.w	r2, r3, #6
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a25      	ldr	r2, [pc, #148]	@ (8001fd8 <HAL_ADC_Start_DMA+0x1b0>)
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a24      	ldr	r2, [pc, #144]	@ (8001fdc <HAL_ADC_Start_DMA+0x1b4>)
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <HAL_ADC_Start_DMA+0x1b8>)
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f6c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a18      	ldr	r0, [r3, #32]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	334c      	adds	r3, #76	@ 0x4c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f000 fc4b 	bl	8002818 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f8c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f90:	d108      	bne.n	8001fa4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001fa0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001fa2:	e00f      	b.n	8001fc4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001fb2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001fb4:	e006      	b.n	8001fc4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001fbe:	e001      	b.n	8001fc4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40012400 	.word	0x40012400
 8001fd4:	40012800 	.word	0x40012800
 8001fd8:	0800231f 	.word	0x0800231f
 8001fdc:	0800239b 	.word	0x0800239b
 8001fe0:	080023b7 	.word	0x080023b7

08001fe4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x20>
 8002014:	2302      	movs	r3, #2
 8002016:	e0dc      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1da>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b06      	cmp	r3, #6
 8002026:	d81c      	bhi.n	8002062 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b05      	subs	r3, #5
 800203a:	221f      	movs	r2, #31
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	4019      	ands	r1, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b05      	subs	r3, #5
 8002054:	fa00 f203 	lsl.w	r2, r0, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002060:	e03c      	b.n	80020dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d81c      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3b23      	subs	r3, #35	@ 0x23
 800207c:	221f      	movs	r2, #31
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	4019      	ands	r1, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b23      	subs	r3, #35	@ 0x23
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a2:	e01b      	b.n	80020dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b41      	subs	r3, #65	@ 0x41
 80020b6:	221f      	movs	r2, #31
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	4019      	ands	r1, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b41      	subs	r3, #65	@ 0x41
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b09      	cmp	r3, #9
 80020e2:	d91c      	bls.n	800211e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68d9      	ldr	r1, [r3, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	3b1e      	subs	r3, #30
 80020f6:	2207      	movs	r2, #7
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4019      	ands	r1, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6898      	ldr	r0, [r3, #8]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	3b1e      	subs	r3, #30
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	e019      	b.n	8002152 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	2207      	movs	r2, #7
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	4019      	ands	r1, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6898      	ldr	r0, [r3, #8]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	fa00 f203 	lsl.w	r2, r0, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d003      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800215e:	2b11      	cmp	r3, #17
 8002160:	d132      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d125      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d126      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002188:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d11a      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a13      	ldr	r2, [pc, #76]	@ (80021e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0c9a      	lsrs	r2, r3, #18
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x1b2>
 80021b6:	e007      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40012400 	.word	0x40012400
 80021e0:	20000000 	.word	0x20000000
 80021e4:	431bde83 	.word	0x431bde83

080021e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d040      	beq.n	8002288 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002216:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <ADC_Enable+0xac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <ADC_Enable+0xb0>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002224:	e002      	b.n	800222c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3b01      	subs	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002232:	f7ff fd17 	bl	8001c64 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002238:	e01f      	b.n	800227a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800223a:	f7ff fd13 	bl	8001c64 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d918      	bls.n	800227a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d011      	beq.n	800227a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	f043 0210 	orr.w	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e007      	b.n	800228a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d1d8      	bne.n	800223a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000000 	.word	0x20000000
 8002298:	431bde83 	.word	0x431bde83

0800229c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d12e      	bne.n	8002314 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022c6:	f7ff fccd 	bl	8001c64 <HAL_GetTick>
 80022ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022cc:	e01b      	b.n	8002306 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ce:	f7ff fcc9 	bl	8001c64 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d914      	bls.n	8002306 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10d      	bne.n	8002306 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e007      	b.n	8002316 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d0dc      	beq.n	80022ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002334:	2b00      	cmp	r3, #0
 8002336:	d127      	bne.n	8002388 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800234e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002352:	d115      	bne.n	8002380 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff f959 	bl	8001638 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002386:	e004      	b.n	8002392 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff f8ed 	bl	8001588 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f043 0204 	orr.w	r2, r3, #4
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff fe01 	bl	8001fe4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_ADCEx_Calibration_Start+0x1e>
 8002406:	2302      	movs	r3, #2
 8002408:	e097      	b.n	800253a <HAL_ADCEx_Calibration_Start+0x14e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff42 	bl	800229c <ADC_ConversionStop_Disable>
 8002418:	4603      	mov	r3, r0
 800241a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fee3 	bl	80021e8 <ADC_Enable>
 8002422:	4603      	mov	r3, r0
 8002424:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 8081 	bne.w	8002530 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002436:	f023 0302 	bic.w	r3, r3, #2
 800243a:	f043 0202 	orr.w	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002442:	4b40      	ldr	r3, [pc, #256]	@ (8002544 <HAL_ADCEx_Calibration_Start+0x158>)
 8002444:	681c      	ldr	r4, [r3, #0]
 8002446:	2002      	movs	r0, #2
 8002448:	f001 ffc8 	bl	80043dc <HAL_RCCEx_GetPeriphCLKFreq>
 800244c:	4603      	mov	r3, r0
 800244e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002452:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002454:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002456:	e002      	b.n	800245e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3b01      	subs	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0208 	orr.w	r2, r2, #8
 8002472:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002474:	f7ff fbf6 	bl	8001c64 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800247a:	e01b      	b.n	80024b4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800247c:	f7ff fbf2 	bl	8001c64 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b0a      	cmp	r3, #10
 8002488:	d914      	bls.n	80024b4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249c:	f023 0312 	bic.w	r3, r3, #18
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e042      	b.n	800253a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1dc      	bne.n	800247c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0204 	orr.w	r2, r2, #4
 80024d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80024d2:	f7ff fbc7 	bl	8001c64 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024d8:	e01b      	b.n	8002512 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024da:	f7ff fbc3 	bl	8001c64 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b0a      	cmp	r3, #10
 80024e6:	d914      	bls.n	8002512 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	f023 0312 	bic.w	r3, r3, #18
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e013      	b.n	800253a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1dc      	bne.n	80024da <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f023 0303 	bic.w	r3, r3, #3
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002538:	7dfb      	ldrb	r3, [r7, #23]
}
 800253a:	4618      	mov	r0, r3
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4906      	ldr	r1, [pc, #24]	@ (80025e0 <__NVIC_EnableIRQ+0x34>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	@ (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	@ (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	@ 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026ac:	d301      	bcc.n	80026b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <SysTick_Config+0x40>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ba:	210f      	movs	r1, #15
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f7ff ff90 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <SysTick_Config+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <SysTick_Config+0x40>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff2d 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff42 	bl	8002590 <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff90 	bl	8002638 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5f 	bl	80025e4 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff35 	bl	80025ac <__NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa2 	bl	800269c <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e043      	b.n	8002802 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <HAL_DMA_Init+0xa8>)
 8002782:	4413      	add	r3, r2
 8002784:	4a22      	ldr	r2, [pc, #136]	@ (8002810 <HAL_DMA_Init+0xac>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1f      	ldr	r2, [pc, #124]	@ (8002814 <HAL_DMA_Init+0xb0>)
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	bffdfff8 	.word	0xbffdfff8
 8002810:	cccccccd 	.word	0xcccccccd
 8002814:	40020000 	.word	0x40020000

08002818 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_DMA_Start_IT+0x20>
 8002834:	2302      	movs	r3, #2
 8002836:	e04b      	b.n	80028d0 <HAL_DMA_Start_IT+0xb8>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d13a      	bne.n	80028c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f937 	bl	8002ae4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 020e 	orr.w	r2, r2, #14
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e00f      	b.n	80028b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0204 	bic.w	r2, r2, #4
 800289e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 020a 	orr.w	r2, r2, #10
 80028ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e005      	b.n	80028ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	2204      	movs	r2, #4
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d04f      	beq.n	80029a0 <HAL_DMA_IRQHandler+0xc8>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0204 	bic.w	r2, r2, #4
 8002926:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a66      	ldr	r2, [pc, #408]	@ (8002ac8 <HAL_DMA_IRQHandler+0x1f0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d029      	beq.n	8002986 <HAL_DMA_IRQHandler+0xae>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a65      	ldr	r2, [pc, #404]	@ (8002acc <HAL_DMA_IRQHandler+0x1f4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_DMA_IRQHandler+0xaa>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a63      	ldr	r2, [pc, #396]	@ (8002ad0 <HAL_DMA_IRQHandler+0x1f8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01a      	beq.n	800297c <HAL_DMA_IRQHandler+0xa4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a62      	ldr	r2, [pc, #392]	@ (8002ad4 <HAL_DMA_IRQHandler+0x1fc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d012      	beq.n	8002976 <HAL_DMA_IRQHandler+0x9e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a60      	ldr	r2, [pc, #384]	@ (8002ad8 <HAL_DMA_IRQHandler+0x200>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00a      	beq.n	8002970 <HAL_DMA_IRQHandler+0x98>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5f      	ldr	r2, [pc, #380]	@ (8002adc <HAL_DMA_IRQHandler+0x204>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <HAL_DMA_IRQHandler+0x92>
 8002964:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002968:	e00e      	b.n	8002988 <HAL_DMA_IRQHandler+0xb0>
 800296a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800296e:	e00b      	b.n	8002988 <HAL_DMA_IRQHandler+0xb0>
 8002970:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002974:	e008      	b.n	8002988 <HAL_DMA_IRQHandler+0xb0>
 8002976:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800297a:	e005      	b.n	8002988 <HAL_DMA_IRQHandler+0xb0>
 800297c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002980:	e002      	b.n	8002988 <HAL_DMA_IRQHandler+0xb0>
 8002982:	2340      	movs	r3, #64	@ 0x40
 8002984:	e000      	b.n	8002988 <HAL_DMA_IRQHandler+0xb0>
 8002986:	2304      	movs	r3, #4
 8002988:	4a55      	ldr	r2, [pc, #340]	@ (8002ae0 <HAL_DMA_IRQHandler+0x208>)
 800298a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8094 	beq.w	8002abe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800299e:	e08e      	b.n	8002abe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	2202      	movs	r2, #2
 80029a6:	409a      	lsls	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d056      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x186>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d051      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020a 	bic.w	r2, r2, #10
 80029d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a38      	ldr	r2, [pc, #224]	@ (8002ac8 <HAL_DMA_IRQHandler+0x1f0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d029      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x166>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a37      	ldr	r2, [pc, #220]	@ (8002acc <HAL_DMA_IRQHandler+0x1f4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x162>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a35      	ldr	r2, [pc, #212]	@ (8002ad0 <HAL_DMA_IRQHandler+0x1f8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01a      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x15c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a34      	ldr	r2, [pc, #208]	@ (8002ad4 <HAL_DMA_IRQHandler+0x1fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d012      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x156>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a32      	ldr	r2, [pc, #200]	@ (8002ad8 <HAL_DMA_IRQHandler+0x200>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00a      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x150>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a31      	ldr	r2, [pc, #196]	@ (8002adc <HAL_DMA_IRQHandler+0x204>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d102      	bne.n	8002a22 <HAL_DMA_IRQHandler+0x14a>
 8002a1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a20:	e00e      	b.n	8002a40 <HAL_DMA_IRQHandler+0x168>
 8002a22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a26:	e00b      	b.n	8002a40 <HAL_DMA_IRQHandler+0x168>
 8002a28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a2c:	e008      	b.n	8002a40 <HAL_DMA_IRQHandler+0x168>
 8002a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a32:	e005      	b.n	8002a40 <HAL_DMA_IRQHandler+0x168>
 8002a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a38:	e002      	b.n	8002a40 <HAL_DMA_IRQHandler+0x168>
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e000      	b.n	8002a40 <HAL_DMA_IRQHandler+0x168>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	4a27      	ldr	r2, [pc, #156]	@ (8002ae0 <HAL_DMA_IRQHandler+0x208>)
 8002a42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d034      	beq.n	8002abe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a5c:	e02f      	b.n	8002abe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	2208      	movs	r2, #8
 8002a64:	409a      	lsls	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d028      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x1e8>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d023      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 020e 	bic.w	r2, r2, #14
 8002a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
    }
  }
  return;
 8002abe:	bf00      	nop
 8002ac0:	bf00      	nop
}
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40020008 	.word	0x40020008
 8002acc:	4002001c 	.word	0x4002001c
 8002ad0:	40020030 	.word	0x40020030
 8002ad4:	40020044 	.word	0x40020044
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	4002006c 	.word	0x4002006c
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d108      	bne.n	8002b24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b22:	e007      	b.n	8002b34 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b08b      	sub	sp, #44	@ 0x2c
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b52:	e169      	b.n	8002e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b54:	2201      	movs	r2, #1
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	f040 8158 	bne.w	8002e22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a9a      	ldr	r2, [pc, #616]	@ (8002de0 <HAL_GPIO_Init+0x2a0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d05e      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002b7c:	4a98      	ldr	r2, [pc, #608]	@ (8002de0 <HAL_GPIO_Init+0x2a0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d875      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002b82:	4a98      	ldr	r2, [pc, #608]	@ (8002de4 <HAL_GPIO_Init+0x2a4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d058      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002b88:	4a96      	ldr	r2, [pc, #600]	@ (8002de4 <HAL_GPIO_Init+0x2a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d86f      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002b8e:	4a96      	ldr	r2, [pc, #600]	@ (8002de8 <HAL_GPIO_Init+0x2a8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d052      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002b94:	4a94      	ldr	r2, [pc, #592]	@ (8002de8 <HAL_GPIO_Init+0x2a8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d869      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002b9a:	4a94      	ldr	r2, [pc, #592]	@ (8002dec <HAL_GPIO_Init+0x2ac>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d04c      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002ba0:	4a92      	ldr	r2, [pc, #584]	@ (8002dec <HAL_GPIO_Init+0x2ac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d863      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002ba6:	4a92      	ldr	r2, [pc, #584]	@ (8002df0 <HAL_GPIO_Init+0x2b0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d046      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002bac:	4a90      	ldr	r2, [pc, #576]	@ (8002df0 <HAL_GPIO_Init+0x2b0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d85d      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d82a      	bhi.n	8002c0c <HAL_GPIO_Init+0xcc>
 8002bb6:	2b12      	cmp	r3, #18
 8002bb8:	d859      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002bba:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <HAL_GPIO_Init+0x80>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002c3b 	.word	0x08002c3b
 8002bc4:	08002c15 	.word	0x08002c15
 8002bc8:	08002c27 	.word	0x08002c27
 8002bcc:	08002c69 	.word	0x08002c69
 8002bd0:	08002c6f 	.word	0x08002c6f
 8002bd4:	08002c6f 	.word	0x08002c6f
 8002bd8:	08002c6f 	.word	0x08002c6f
 8002bdc:	08002c6f 	.word	0x08002c6f
 8002be0:	08002c6f 	.word	0x08002c6f
 8002be4:	08002c6f 	.word	0x08002c6f
 8002be8:	08002c6f 	.word	0x08002c6f
 8002bec:	08002c6f 	.word	0x08002c6f
 8002bf0:	08002c6f 	.word	0x08002c6f
 8002bf4:	08002c6f 	.word	0x08002c6f
 8002bf8:	08002c6f 	.word	0x08002c6f
 8002bfc:	08002c6f 	.word	0x08002c6f
 8002c00:	08002c6f 	.word	0x08002c6f
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	4a79      	ldr	r2, [pc, #484]	@ (8002df4 <HAL_GPIO_Init+0x2b4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c12:	e02c      	b.n	8002c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	623b      	str	r3, [r7, #32]
          break;
 8002c1a:	e029      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	3304      	adds	r3, #4
 8002c22:	623b      	str	r3, [r7, #32]
          break;
 8002c24:	e024      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	623b      	str	r3, [r7, #32]
          break;
 8002c2e:	e01f      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	330c      	adds	r3, #12
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	e01a      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c42:	2304      	movs	r3, #4
 8002c44:	623b      	str	r3, [r7, #32]
          break;
 8002c46:	e013      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c50:	2308      	movs	r3, #8
 8002c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	611a      	str	r2, [r3, #16]
          break;
 8002c5a:	e009      	b.n	8002c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c5c:	2308      	movs	r3, #8
 8002c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	615a      	str	r2, [r3, #20]
          break;
 8002c66:	e003      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
          break;
 8002c6c:	e000      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          break;
 8002c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2bff      	cmp	r3, #255	@ 0xff
 8002c74:	d801      	bhi.n	8002c7a <HAL_GPIO_Init+0x13a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	e001      	b.n	8002c7e <HAL_GPIO_Init+0x13e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2bff      	cmp	r3, #255	@ 0xff
 8002c84:	d802      	bhi.n	8002c8c <HAL_GPIO_Init+0x14c>
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	e002      	b.n	8002c92 <HAL_GPIO_Init+0x152>
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	3b08      	subs	r3, #8
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	210f      	movs	r1, #15
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	6a39      	ldr	r1, [r7, #32]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	431a      	orrs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80b1 	beq.w	8002e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002df8 <HAL_GPIO_Init+0x2b8>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_GPIO_Init+0x2b8>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8002df8 <HAL_GPIO_Init+0x2b8>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cd8:	4a48      	ldr	r2, [pc, #288]	@ (8002dfc <HAL_GPIO_Init+0x2bc>)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a40      	ldr	r2, [pc, #256]	@ (8002e00 <HAL_GPIO_Init+0x2c0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <HAL_GPIO_Init+0x1ec>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3f      	ldr	r2, [pc, #252]	@ (8002e04 <HAL_GPIO_Init+0x2c4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00d      	beq.n	8002d28 <HAL_GPIO_Init+0x1e8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e08 <HAL_GPIO_Init+0x2c8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <HAL_GPIO_Init+0x1e4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3d      	ldr	r2, [pc, #244]	@ (8002e0c <HAL_GPIO_Init+0x2cc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_GPIO_Init+0x1e0>
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e006      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e004      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e002      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	f002 0203 	and.w	r2, r2, #3
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	4093      	lsls	r3, r2
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d3e:	492f      	ldr	r1, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x2bc>)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d58:	4b2d      	ldr	r3, [pc, #180]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	492c      	ldr	r1, [pc, #176]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d66:	4b2a      	ldr	r3, [pc, #168]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	4928      	ldr	r1, [pc, #160]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d80:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4922      	ldr	r1, [pc, #136]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d8e:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	491e      	ldr	r1, [pc, #120]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4918      	ldr	r1, [pc, #96]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	4914      	ldr	r1, [pc, #80]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d021      	beq.n	8002e14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	490e      	ldr	r1, [pc, #56]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e021      	b.n	8002e22 <HAL_GPIO_Init+0x2e2>
 8002dde:	bf00      	nop
 8002de0:	10320000 	.word	0x10320000
 8002de4:	10310000 	.word	0x10310000
 8002de8:	10220000 	.word	0x10220000
 8002dec:	10210000 	.word	0x10210000
 8002df0:	10120000 	.word	0x10120000
 8002df4:	10110000 	.word	0x10110000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40010800 	.word	0x40010800
 8002e04:	40010c00 	.word	0x40010c00
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40011400 	.word	0x40011400
 8002e10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	4909      	ldr	r1, [pc, #36]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	3301      	adds	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f47f ae8e 	bne.w	8002b54 <HAL_GPIO_Init+0x14>
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	372c      	adds	r7, #44	@ 0x2c
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40010400 	.word	0x40010400

08002e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
 8002e54:	4613      	mov	r3, r2
 8002e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e58:	787b      	ldrb	r3, [r7, #1]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e64:	e003      	b.n	8002e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	041a      	lsls	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	611a      	str	r2, [r3, #16]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f806 	bl	8002ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e12b      	b.n	8003126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fca4 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	@ 0x24
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f20:	f001 f960 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8002f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a81      	ldr	r2, [pc, #516]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d807      	bhi.n	8002f40 <HAL_I2C_Init+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a80      	ldr	r2, [pc, #512]	@ (8003134 <HAL_I2C_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e006      	b.n	8002f4e <HAL_I2C_Init+0x92>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a7d      	ldr	r2, [pc, #500]	@ (8003138 <HAL_I2C_Init+0x27c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e7      	b.n	8003126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a78      	ldr	r2, [pc, #480]	@ (800313c <HAL_I2C_Init+0x280>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9b      	lsrs	r3, r3, #18
 8002f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d802      	bhi.n	8002f90 <HAL_I2C_Init+0xd4>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e009      	b.n	8002fa4 <HAL_I2C_Init+0xe8>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a69      	ldr	r2, [pc, #420]	@ (8003140 <HAL_I2C_Init+0x284>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	495c      	ldr	r1, [pc, #368]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d819      	bhi.n	8002ff8 <HAL_I2C_Init+0x13c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e59      	subs	r1, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fd8:	400b      	ands	r3, r1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_I2C_Init+0x138>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e59      	subs	r1, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	e051      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e04f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d111      	bne.n	8003024 <HAL_I2C_Init+0x168>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e012      	b.n	800304a <HAL_I2C_Init+0x18e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x196>
 800304e:	2301      	movs	r3, #1
 8003050:	e022      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10e      	bne.n	8003078 <HAL_I2C_Init+0x1bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e58      	subs	r0, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	440b      	add	r3, r1
 8003068:	fbb0 f3f3 	udiv	r3, r0, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	6809      	ldr	r1, [r1, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6911      	ldr	r1, [r2, #16]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	000186a0 	.word	0x000186a0
 8003134:	001e847f 	.word	0x001e847f
 8003138:	003d08ff 	.word	0x003d08ff
 800313c:	431bde83 	.word	0x431bde83
 8003140:	10624dd3 	.word	0x10624dd3

08003144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
 8003154:	4613      	mov	r3, r2
 8003156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7fe fd84 	bl	8001c64 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 80e0 	bne.w	800332c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	4970      	ldr	r1, [pc, #448]	@ (8003338 <HAL_I2C_Master_Transmit+0x1f4>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa92 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	e0d3      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2C_Master_Transmit+0x50>
 8003190:	2302      	movs	r3, #2
 8003192:	e0cc      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d007      	beq.n	80031ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2221      	movs	r2, #33	@ 0x21
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2210      	movs	r2, #16
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	893a      	ldrh	r2, [r7, #8]
 80031ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a50      	ldr	r2, [pc, #320]	@ (800333c <HAL_I2C_Master_Transmit+0x1f8>)
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031fc:	8979      	ldrh	r1, [r7, #10]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f9ca 	bl	800359c <I2C_MasterRequestWrite>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e08d      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003228:	e066      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	6a39      	ldr	r1, [r7, #32]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fb50 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b04      	cmp	r3, #4
 8003240:	d107      	bne.n	8003252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06b      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d11b      	bne.n	80032cc <HAL_I2C_Master_Transmit+0x188>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d017      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	6a39      	ldr	r1, [r7, #32]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fb47 	bl	8003964 <I2C_WaitOnBTFFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d107      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e01a      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d194      	bne.n	800322a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	00100002 	.word	0x00100002
 800333c:	ffff0000 	.word	0xffff0000

08003340 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7fe fc88 	bl	8001c64 <HAL_GetTick>
 8003354:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	f040 8111 	bne.w	800358a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2319      	movs	r3, #25
 800336e:	2201      	movs	r2, #1
 8003370:	4988      	ldr	r1, [pc, #544]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f994 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	e104      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_I2C_IsDeviceReady+0x50>
 800338c:	2302      	movs	r3, #2
 800338e:	e0fd      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d007      	beq.n	80033b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2224      	movs	r2, #36	@ 0x24
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a70      	ldr	r2, [pc, #448]	@ (8003598 <HAL_I2C_IsDeviceReady+0x258>)
 80033d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f952 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003410:	d103      	bne.n	800341a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0b6      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800342c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800342e:	f7fe fc19 	bl	8001c64 <HAL_GetTick>
 8003432:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003462:	e025      	b.n	80034b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe fbfe 	bl	8001c64 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <HAL_I2C_IsDeviceReady+0x13a>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22a0      	movs	r2, #160	@ 0xa0
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80034ba:	d005      	beq.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0cd      	beq.n	8003464 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d129      	bne.n	8003532 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	4921      	ldr	r1, [pc, #132]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f8c6 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e036      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e02c      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003540:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800354a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	490f      	ldr	r1, [pc, #60]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8a2 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e012      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	f4ff af32 	bcc.w	80033da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00100002 	.word	0x00100002
 8003598:	ffff0000 	.word	0xffff0000

0800359c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	460b      	mov	r3, r1
 80035aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d006      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d003      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035c4:	d108      	bne.n	80035d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e00b      	b.n	80035f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	2b12      	cmp	r3, #18
 80035de:	d107      	bne.n	80035f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f84f 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003616:	d103      	bne.n	8003620 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e035      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800362c:	d108      	bne.n	8003640 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	e01b      	b.n	8003678 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	11db      	asrs	r3, r3, #7
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0306 	and.w	r3, r3, #6
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f063 030f 	orn	r3, r3, #15
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	490e      	ldr	r1, [pc, #56]	@ (8003698 <I2C_MasterRequestWrite+0xfc>)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f898 	bl	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e010      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4907      	ldr	r1, [pc, #28]	@ (800369c <I2C_MasterRequestWrite+0x100>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f888 	bl	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00010008 	.word	0x00010008
 800369c:	00010002 	.word	0x00010002

080036a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	e048      	b.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d044      	beq.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fe fad3 	bl	8001c64 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d139      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10d      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	e00c      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	429a      	cmp	r2, r3
 8003714:	d116      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e023      	b.n	800378c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10d      	bne.n	800376a <I2C_WaitOnFlagUntilTimeout+0xca>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	43da      	mvns	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	e00c      	b.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	429a      	cmp	r2, r3
 8003788:	d093      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a2:	e071      	b.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b2:	d123      	bne.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e067      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d041      	beq.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7fe fa2e 	bl	8001c64 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d136      	bne.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e00b      	b.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e021      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10c      	bne.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e00b      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f af6d 	bne.w	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e0:	e034      	b.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f886 	bl	80039f4 <I2C_IsAcknowledgeFailed>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e034      	b.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d028      	beq.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe f9b3 	bl	8001c64 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11d      	bne.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391a:	2b80      	cmp	r3, #128	@ 0x80
 800391c:	d016      	beq.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e007      	b.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b80      	cmp	r3, #128	@ 0x80
 8003958:	d1c3      	bne.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003970:	e034      	b.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f83e 	bl	80039f4 <I2C_IsAcknowledgeFailed>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e034      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d028      	beq.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe f96b 	bl	8001c64 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11d      	bne.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d016      	beq.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e007      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d1c3      	bne.n	8003972 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0a:	d11b      	bne.n	8003a44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e272      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8087 	beq.w	8003b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a70:	4b92      	ldr	r3, [pc, #584]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d00c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d112      	bne.n	8003aae <HAL_RCC_OscConfig+0x5e>
 8003a88:	4b8c      	ldr	r3, [pc, #560]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a94:	d10b      	bne.n	8003aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	4b89      	ldr	r3, [pc, #548]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d06c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x12c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d168      	bne.n	8003b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e24c      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x76>
 8003ab8:	4b80      	ldr	r3, [pc, #512]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7f      	ldr	r2, [pc, #508]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e02e      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x98>
 8003ace:	4b7b      	ldr	r3, [pc, #492]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b78      	ldr	r3, [pc, #480]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a77      	ldr	r2, [pc, #476]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0xbc>
 8003af2:	4b72      	ldr	r3, [pc, #456]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a71      	ldr	r2, [pc, #452]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6a      	ldr	r2, [pc, #424]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b68      	ldr	r3, [pc, #416]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a67      	ldr	r2, [pc, #412]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f89a 	bl	8001c64 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe f896 	bl	8001c64 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e200      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b5d      	ldr	r3, [pc, #372]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe4>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe f886 	bl	8001c64 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe f882 	bl	8001c64 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1ec      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b53      	ldr	r3, [pc, #332]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x10c>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b96:	4b49      	ldr	r3, [pc, #292]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x18c>
 8003ba2:	4b46      	ldr	r3, [pc, #280]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b43      	ldr	r3, [pc, #268]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x176>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1c0      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4939      	ldr	r1, [pc, #228]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e03a      	b.n	8003c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <HAL_RCC_OscConfig+0x270>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fe f83b 	bl	8001c64 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7fe f837 	bl	8001c64 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e1a1      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	4b2d      	ldr	r3, [pc, #180]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c10:	4b2a      	ldr	r3, [pc, #168]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4927      	ldr	r1, [pc, #156]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c26:	4b26      	ldr	r3, [pc, #152]	@ (8003cc0 <HAL_RCC_OscConfig+0x270>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f81a 	bl	8001c64 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe f816 	bl	8001c64 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e180      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03a      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d019      	beq.n	8003c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c66:	4b17      	ldr	r3, [pc, #92]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fffa 	bl	8001c64 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fd fff6 	bl	8001c64 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e160      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c92:	2001      	movs	r0, #1
 8003c94:	f000 face 	bl	8004234 <RCC_Delay>
 8003c98:	e01c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fd ffe0 	bl	8001c64 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca6:	e00f      	b.n	8003cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fd ffdc 	bl	8001c64 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d908      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e146      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	42420000 	.word	0x42420000
 8003cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b92      	ldr	r3, [pc, #584]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e9      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a6 	beq.w	8003e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10d      	bne.n	8003d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b88      	ldr	r3, [pc, #544]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a87      	ldr	r2, [pc, #540]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	61d3      	str	r3, [r2, #28]
 8003cfe:	4b85      	ldr	r3, [pc, #532]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	4b82      	ldr	r3, [pc, #520]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fd ff9d 	bl	8001c64 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fd ff99 	bl	8001c64 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e103      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	4b75      	ldr	r3, [pc, #468]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x312>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a6e      	ldr	r2, [pc, #440]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	e02d      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x334>
 8003d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a69      	ldr	r2, [pc, #420]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	6213      	str	r3, [r2, #32]
 8003d76:	4b67      	ldr	r3, [pc, #412]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4a66      	ldr	r2, [pc, #408]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	6213      	str	r3, [r2, #32]
 8003d82:	e01c      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_OscConfig+0x356>
 8003d8c:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4a60      	ldr	r2, [pc, #384]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6213      	str	r3, [r2, #32]
 8003d98:	4b5e      	ldr	r3, [pc, #376]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6213      	str	r3, [r2, #32]
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003da6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4a5a      	ldr	r2, [pc, #360]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6213      	str	r3, [r2, #32]
 8003db2:	4b58      	ldr	r3, [pc, #352]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4a57      	ldr	r2, [pc, #348]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d015      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fd ff4d 	bl	8001c64 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fd ff49 	bl	8001c64 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0b1      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <HAL_RCC_OscConfig+0x37e>
 8003df0:	e014      	b.n	8003e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fd ff37 	bl	8001c64 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd ff33 	bl	8001c64 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e09b      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	4b40      	ldr	r3, [pc, #256]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ee      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b3c      	ldr	r3, [pc, #240]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4a3b      	ldr	r2, [pc, #236]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8087 	beq.w	8003f46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e38:	4b36      	ldr	r3, [pc, #216]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d061      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d146      	bne.n	8003eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b33      	ldr	r3, [pc, #204]	@ (8003f1c <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fd ff07 	bl	8001c64 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fd ff03 	bl	8001c64 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e06d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6c:	4b29      	ldr	r3, [pc, #164]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e80:	d108      	bne.n	8003e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e82:	4b24      	ldr	r3, [pc, #144]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4921      	ldr	r1, [pc, #132]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e94:	4b1f      	ldr	r3, [pc, #124]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a19      	ldr	r1, [r3, #32]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	491b      	ldr	r1, [pc, #108]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fed7 	bl	8001c64 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fd fed3 	bl	8001c64 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e03d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ecc:	4b11      	ldr	r3, [pc, #68]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x46a>
 8003ed8:	e035      	b.n	8003f46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_RCC_OscConfig+0x4cc>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fec0 	bl	8001c64 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd febc 	bl	8001c64 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e026      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x498>
 8003f06:	e01e      	b.n	8003f46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e019      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_RCC_OscConfig+0x500>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000

08003f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0d0      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b6a      	ldr	r3, [pc, #424]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d910      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b67      	ldr	r3, [pc, #412]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 0207 	bic.w	r2, r3, #7
 8003f7e:	4965      	ldr	r1, [pc, #404]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0b8      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc8:	4b53      	ldr	r3, [pc, #332]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b50      	ldr	r3, [pc, #320]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	494d      	ldr	r1, [pc, #308]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d040      	beq.n	8004074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d115      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e07f      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e073      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	4b3d      	ldr	r3, [pc, #244]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e06b      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4936      	ldr	r1, [pc, #216]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004044:	f7fd fe0e 	bl	8001c64 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fd fe0a 	bl	8001c64 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e053      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b2d      	ldr	r3, [pc, #180]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d210      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 0207 	bic.w	r2, r3, #7
 800408a:	4922      	ldr	r1, [pc, #136]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e032      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4916      	ldr	r1, [pc, #88]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	490e      	ldr	r1, [pc, #56]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e2:	f000 f821 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040e6:	4602      	mov	r2, r0
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	490a      	ldr	r1, [pc, #40]	@ (800411c <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1cc>)
 80040fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_ClockConfig+0x1d0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd fd6c 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40022000 	.word	0x40022000
 8004118:	40021000 	.word	0x40021000
 800411c:	08008a58 	.word	0x08008a58
 8004120:	20000000 	.word	0x20000000
 8004124:	20000004 	.word	0x20000004

08004128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b04      	cmp	r3, #4
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x30>
 8004152:	2b08      	cmp	r3, #8
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x36>
 8004156:	e027      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800415a:	613b      	str	r3, [r7, #16]
      break;
 800415c:	e027      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	0c9b      	lsrs	r3, r3, #18
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004168:	5cd3      	ldrb	r3, [r2, r3]
 800416a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004176:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	0c5b      	lsrs	r3, r3, #17
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	4a11      	ldr	r2, [pc, #68]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a0d      	ldr	r2, [pc, #52]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800418a:	fb03 f202 	mul.w	r2, r3, r2
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e004      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a0c      	ldr	r2, [pc, #48]	@ (80041cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	613b      	str	r3, [r7, #16]
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041aa:	613b      	str	r3, [r7, #16]
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	693b      	ldr	r3, [r7, #16]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	007a1200 	.word	0x007a1200
 80041c4:	08008a70 	.word	0x08008a70
 80041c8:	08008a80 	.word	0x08008a80
 80041cc:	003d0900 	.word	0x003d0900

080041d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b02      	ldr	r3, [pc, #8]	@ (80041e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	20000000 	.word	0x20000000

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff2 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	08008a68 	.word	0x08008a68

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004210:	f7ff ffde 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	0adb      	lsrs	r3, r3, #11
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	@ (8004230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	08008a68 	.word	0x08008a68

08004234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800423c:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <RCC_Delay+0x34>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <RCC_Delay+0x38>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	0a5b      	lsrs	r3, r3, #9
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004250:	bf00      	nop
  }
  while (Delay --);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	60fa      	str	r2, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f9      	bne.n	8004250 <RCC_Delay+0x1c>
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	20000000 	.word	0x20000000
 800426c:	10624dd3 	.word	0x10624dd3

08004270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d07d      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800428c:	2300      	movs	r3, #0
 800428e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004290:	4b4f      	ldr	r3, [pc, #316]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10d      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429c:	4b4c      	ldr	r3, [pc, #304]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4a4b      	ldr	r2, [pc, #300]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	61d3      	str	r3, [r2, #28]
 80042a8:	4b49      	ldr	r3, [pc, #292]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	4b46      	ldr	r3, [pc, #280]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d118      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c4:	4b43      	ldr	r3, [pc, #268]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a42      	ldr	r2, [pc, #264]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d0:	f7fd fcc8 	bl	8001c64 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fd fcc4 	bl	8001c64 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	@ 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e06d      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	4b3a      	ldr	r3, [pc, #232]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042f6:	4b36      	ldr	r3, [pc, #216]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02e      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	429a      	cmp	r2, r3
 8004312:	d027      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004314:	4b2e      	ldr	r3, [pc, #184]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800431e:	4b2e      	ldr	r3, [pc, #184]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004324:	4b2c      	ldr	r3, [pc, #176]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800432a:	4a29      	ldr	r2, [pc, #164]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d014      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fd fc93 	bl	8001c64 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	e00a      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fd fc8f 	bl	8001c64 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e036      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	4b1d      	ldr	r3, [pc, #116]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ee      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004364:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4917      	ldr	r1, [pc, #92]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004372:	4313      	orrs	r3, r2
 8004374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437c:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004394:	4b0e      	ldr	r3, [pc, #56]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	490b      	ldr	r1, [pc, #44]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043b2:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4904      	ldr	r1, [pc, #16]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40007000 	.word	0x40007000
 80043d8:	42420440 	.word	0x42420440

080043dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b10      	cmp	r3, #16
 8004402:	f200 808a 	bhi.w	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d045      	beq.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d075      	beq.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004412:	e082      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004414:	4b46      	ldr	r3, [pc, #280]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800441a:	4b45      	ldr	r3, [pc, #276]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07b      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	0c9b      	lsrs	r3, r3, #18
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	4a41      	ldr	r2, [pc, #260]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d015      	beq.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800443e:	4b3c      	ldr	r3, [pc, #240]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	0c5b      	lsrs	r3, r3, #17
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	4a3b      	ldr	r2, [pc, #236]	@ (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00d      	beq.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004458:	4a38      	ldr	r2, [pc, #224]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e004      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4a34      	ldr	r2, [pc, #208]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004474:	4b2e      	ldr	r3, [pc, #184]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004480:	d102      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	61bb      	str	r3, [r7, #24]
      break;
 8004486:	e04a      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4a2d      	ldr	r2, [pc, #180]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	61bb      	str	r3, [r7, #24]
      break;
 8004496:	e042      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a8:	d108      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80044b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e01f      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c6:	d109      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80044c8:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80044d4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e00f      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e6:	d11c      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d016      	beq.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80044f4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80044f8:	61bb      	str	r3, [r7, #24]
      break;
 80044fa:	e012      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044fc:	e011      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044fe:	f7ff fe85 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	0b9b      	lsrs	r3, r3, #14
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	3301      	adds	r3, #1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	61bb      	str	r3, [r7, #24]
      break;
 8004518:	e004      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004522:	bf00      	nop
    }
  }
  return (frequency);
 8004524:	69bb      	ldr	r3, [r7, #24]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
 8004534:	08008a84 	.word	0x08008a84
 8004538:	08008a94 	.word	0x08008a94
 800453c:	007a1200 	.word	0x007a1200
 8004540:	003d0900 	.word	0x003d0900
 8004544:	aaaaaaab 	.word	0xaaaaaaab

08004548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e042      	b.n	80045e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fd f9ae 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	@ 0x24
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800458a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f971 	bl	8004874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b20      	cmp	r3, #32
 8004606:	d175      	bne.n	80046f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Transmit+0x2c>
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e06e      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2221      	movs	r2, #33	@ 0x21
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004626:	f7fd fb1d 	bl	8001c64 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004640:	d108      	bne.n	8004654 <HAL_UART_Transmit+0x6c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e003      	b.n	800465c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800465c:	e02e      	b.n	80046bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	2180      	movs	r1, #128	@ 0x80
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f848 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e03a      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3302      	adds	r3, #2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e007      	b.n	80046ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	3301      	adds	r3, #1
 80046ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1cb      	bne.n	800465e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2140      	movs	r1, #64	@ 0x40
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f814 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e006      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470e:	e03b      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d037      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004718:	f7fd faa4 	bl	8001c64 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	6a3a      	ldr	r2, [r7, #32]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <UART_WaitOnFlagUntilTimeout+0x30>
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e03a      	b.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d023      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b80      	cmp	r3, #128	@ 0x80
 8004744:	d020      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d01d      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d116      	bne.n	8004788 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f81d 	bl	80047b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2208      	movs	r2, #8
 800477a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e00f      	b.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d0b4      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b095      	sub	sp, #84	@ 0x54
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80047da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3314      	adds	r3, #20
 800480a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800480c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e5      	bne.n	80047ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	2b01      	cmp	r3, #1
 8004826:	d119      	bne.n	800485c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	60bb      	str	r3, [r7, #8]
   return(result);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f023 0310 	bic.w	r3, r3, #16
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004848:	61ba      	str	r2, [r7, #24]
 800484a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6979      	ldr	r1, [r7, #20]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	613b      	str	r3, [r7, #16]
   return(result);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800486a:	bf00      	nop
 800486c:	3754      	adds	r7, #84	@ 0x54
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048ae:	f023 030c 	bic.w	r3, r3, #12
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004988 <UART_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d103      	bne.n	80048e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7ff fc96 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	e002      	b.n	80048ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7ff fc7e 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 80048e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009a      	lsls	r2, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	4a22      	ldr	r2, [pc, #136]	@ (800498c <UART_SetConfig+0x118>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	0119      	lsls	r1, r3, #4
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009a      	lsls	r2, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004920:	4b1a      	ldr	r3, [pc, #104]	@ (800498c <UART_SetConfig+0x118>)
 8004922:	fba3 0302 	umull	r0, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2064      	movs	r0, #100	@ 0x64
 800492a:	fb00 f303 	mul.w	r3, r0, r3
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	3332      	adds	r3, #50	@ 0x32
 8004934:	4a15      	ldr	r2, [pc, #84]	@ (800498c <UART_SetConfig+0x118>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004940:	4419      	add	r1, r3
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009a      	lsls	r2, r3, #2
 800494c:	441a      	add	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	fbb2 f2f3 	udiv	r2, r2, r3
 8004958:	4b0c      	ldr	r3, [pc, #48]	@ (800498c <UART_SetConfig+0x118>)
 800495a:	fba3 0302 	umull	r0, r3, r3, r2
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2064      	movs	r0, #100	@ 0x64
 8004962:	fb00 f303 	mul.w	r3, r0, r3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	3332      	adds	r3, #50	@ 0x32
 800496c:	4a07      	ldr	r2, [pc, #28]	@ (800498c <UART_SetConfig+0x118>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	440a      	add	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40013800 	.word	0x40013800
 800498c:	51eb851f 	.word	0x51eb851f

08004990 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8004996:	f000 fa1d 	bl	8004dd4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800499a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800499e:	2201      	movs	r2, #1
 80049a0:	2178      	movs	r1, #120	@ 0x78
 80049a2:	485b      	ldr	r0, [pc, #364]	@ (8004b10 <SSD1306_Init+0x180>)
 80049a4:	f7fe fccc 	bl	8003340 <HAL_I2C_IsDeviceReady>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e0a9      	b.n	8004b06 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80049b2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80049b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80049b8:	e002      	b.n	80049c0 <SSD1306_Init+0x30>
		p--;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3b01      	subs	r3, #1
 80049be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f9      	bne.n	80049ba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80049c6:	22ae      	movs	r2, #174	@ 0xae
 80049c8:	2100      	movs	r1, #0
 80049ca:	2078      	movs	r0, #120	@ 0x78
 80049cc:	f000 fa7c 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80049d0:	2220      	movs	r2, #32
 80049d2:	2100      	movs	r1, #0
 80049d4:	2078      	movs	r0, #120	@ 0x78
 80049d6:	f000 fa77 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80049da:	2210      	movs	r2, #16
 80049dc:	2100      	movs	r1, #0
 80049de:	2078      	movs	r0, #120	@ 0x78
 80049e0:	f000 fa72 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80049e4:	22b0      	movs	r2, #176	@ 0xb0
 80049e6:	2100      	movs	r1, #0
 80049e8:	2078      	movs	r0, #120	@ 0x78
 80049ea:	f000 fa6d 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80049ee:	22c8      	movs	r2, #200	@ 0xc8
 80049f0:	2100      	movs	r1, #0
 80049f2:	2078      	movs	r0, #120	@ 0x78
 80049f4:	f000 fa68 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80049f8:	2200      	movs	r2, #0
 80049fa:	2100      	movs	r1, #0
 80049fc:	2078      	movs	r0, #120	@ 0x78
 80049fe:	f000 fa63 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004a02:	2210      	movs	r2, #16
 8004a04:	2100      	movs	r1, #0
 8004a06:	2078      	movs	r0, #120	@ 0x78
 8004a08:	f000 fa5e 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004a0c:	2240      	movs	r2, #64	@ 0x40
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2078      	movs	r0, #120	@ 0x78
 8004a12:	f000 fa59 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004a16:	2281      	movs	r2, #129	@ 0x81
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2078      	movs	r0, #120	@ 0x78
 8004a1c:	f000 fa54 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004a20:	22ff      	movs	r2, #255	@ 0xff
 8004a22:	2100      	movs	r1, #0
 8004a24:	2078      	movs	r0, #120	@ 0x78
 8004a26:	f000 fa4f 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004a2a:	22a1      	movs	r2, #161	@ 0xa1
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2078      	movs	r0, #120	@ 0x78
 8004a30:	f000 fa4a 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004a34:	22a6      	movs	r2, #166	@ 0xa6
 8004a36:	2100      	movs	r1, #0
 8004a38:	2078      	movs	r0, #120	@ 0x78
 8004a3a:	f000 fa45 	bl	8004ec8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004a3e:	22a8      	movs	r2, #168	@ 0xa8
 8004a40:	2100      	movs	r1, #0
 8004a42:	2078      	movs	r0, #120	@ 0x78
 8004a44:	f000 fa40 	bl	8004ec8 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
 8004a48:	221f      	movs	r2, #31
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2078      	movs	r0, #120	@ 0x78
 8004a4e:	f000 fa3b 	bl	8004ec8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004a52:	22a4      	movs	r2, #164	@ 0xa4
 8004a54:	2100      	movs	r1, #0
 8004a56:	2078      	movs	r0, #120	@ 0x78
 8004a58:	f000 fa36 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004a5c:	22d3      	movs	r2, #211	@ 0xd3
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2078      	movs	r0, #120	@ 0x78
 8004a62:	f000 fa31 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004a66:	2200      	movs	r2, #0
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2078      	movs	r0, #120	@ 0x78
 8004a6c:	f000 fa2c 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004a70:	22d5      	movs	r2, #213	@ 0xd5
 8004a72:	2100      	movs	r1, #0
 8004a74:	2078      	movs	r0, #120	@ 0x78
 8004a76:	f000 fa27 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004a7a:	22f0      	movs	r2, #240	@ 0xf0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2078      	movs	r0, #120	@ 0x78
 8004a80:	f000 fa22 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004a84:	22d9      	movs	r2, #217	@ 0xd9
 8004a86:	2100      	movs	r1, #0
 8004a88:	2078      	movs	r0, #120	@ 0x78
 8004a8a:	f000 fa1d 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004a8e:	2222      	movs	r2, #34	@ 0x22
 8004a90:	2100      	movs	r1, #0
 8004a92:	2078      	movs	r0, #120	@ 0x78
 8004a94:	f000 fa18 	bl	8004ec8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004a98:	22da      	movs	r2, #218	@ 0xda
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2078      	movs	r0, #120	@ 0x78
 8004a9e:	f000 fa13 	bl	8004ec8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2078      	movs	r0, #120	@ 0x78
 8004aa8:	f000 fa0e 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004aac:	22db      	movs	r2, #219	@ 0xdb
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2078      	movs	r0, #120	@ 0x78
 8004ab2:	f000 fa09 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	2100      	movs	r1, #0
 8004aba:	2078      	movs	r0, #120	@ 0x78
 8004abc:	f000 fa04 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004ac0:	228d      	movs	r2, #141	@ 0x8d
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	2078      	movs	r0, #120	@ 0x78
 8004ac6:	f000 f9ff 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004aca:	2214      	movs	r2, #20
 8004acc:	2100      	movs	r1, #0
 8004ace:	2078      	movs	r0, #120	@ 0x78
 8004ad0:	f000 f9fa 	bl	8004ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004ad4:	22af      	movs	r2, #175	@ 0xaf
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2078      	movs	r0, #120	@ 0x78
 8004ada:	f000 f9f5 	bl	8004ec8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8004ade:	222e      	movs	r2, #46	@ 0x2e
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	2078      	movs	r0, #120	@ 0x78
 8004ae4:	f000 f9f0 	bl	8004ec8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f000 f843 	bl	8004b74 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8004aee:	f000 f813 	bl	8004b18 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8004af2:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <SSD1306_Init+0x184>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <SSD1306_Init+0x184>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004afe:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <SSD1306_Init+0x184>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8004b04:	2301      	movs	r3, #1
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2000026c 	.word	0x2000026c
 8004b14:	20002548 	.word	0x20002548

08004b18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8004b1e:	2300      	movs	r3, #0
 8004b20:	71fb      	strb	r3, [r7, #7]
 8004b22:	e01d      	b.n	8004b60 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	3b50      	subs	r3, #80	@ 0x50
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	2078      	movs	r0, #120	@ 0x78
 8004b30:	f000 f9ca 	bl	8004ec8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004b34:	2200      	movs	r2, #0
 8004b36:	2100      	movs	r1, #0
 8004b38:	2078      	movs	r0, #120	@ 0x78
 8004b3a:	f000 f9c5 	bl	8004ec8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004b3e:	2210      	movs	r2, #16
 8004b40:	2100      	movs	r1, #0
 8004b42:	2078      	movs	r0, #120	@ 0x78
 8004b44:	f000 f9c0 	bl	8004ec8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	01db      	lsls	r3, r3, #7
 8004b4c:	4a08      	ldr	r2, [pc, #32]	@ (8004b70 <SSD1306_UpdateScreen+0x58>)
 8004b4e:	441a      	add	r2, r3
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	2140      	movs	r1, #64	@ 0x40
 8004b54:	2078      	movs	r0, #120	@ 0x78
 8004b56:	f000 f951 	bl	8004dfc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	71fb      	strb	r3, [r7, #7]
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	2b07      	cmp	r3, #7
 8004b64:	d9de      	bls.n	8004b24 <SSD1306_UpdateScreen+0xc>
	}
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20002348 	.word	0x20002348

08004b74 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <SSD1306_Fill+0x14>
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <SSD1306_Fill+0x16>
 8004b88:	23ff      	movs	r3, #255	@ 0xff
 8004b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4803      	ldr	r0, [pc, #12]	@ (8004ba0 <SSD1306_Fill+0x2c>)
 8004b92:	f000 ff38 	bl	8005a06 <memset>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20002348 	.word	0x20002348

08004ba4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	80fb      	strh	r3, [r7, #6]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	80bb      	strh	r3, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	70fb      	strb	r3, [r7, #3]
	if (
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bba:	d848      	bhi.n	8004c4e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004bbc:	88bb      	ldrh	r3, [r7, #4]
 8004bbe:	2b1f      	cmp	r3, #31
 8004bc0:	d845      	bhi.n	8004c4e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004bc2:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <SSD1306_DrawPixel+0xb4>)
 8004bc4:	791b      	ldrb	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d006      	beq.n	8004bd8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d11a      	bne.n	8004c14 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	88bb      	ldrh	r3, [r7, #4]
 8004be2:	08db      	lsrs	r3, r3, #3
 8004be4:	b298      	uxth	r0, r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	01db      	lsls	r3, r3, #7
 8004bea:	4413      	add	r3, r2
 8004bec:	4a1b      	ldr	r2, [pc, #108]	@ (8004c5c <SSD1306_DrawPixel+0xb8>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	b25a      	sxtb	r2, r3
 8004bf2:	88bb      	ldrh	r3, [r7, #4]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	4313      	orrs	r3, r2
 8004c02:	b259      	sxtb	r1, r3
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	4603      	mov	r3, r0
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b2c9      	uxtb	r1, r1
 8004c0e:	4a13      	ldr	r2, [pc, #76]	@ (8004c5c <SSD1306_DrawPixel+0xb8>)
 8004c10:	54d1      	strb	r1, [r2, r3]
 8004c12:	e01d      	b.n	8004c50 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	88bb      	ldrh	r3, [r7, #4]
 8004c18:	08db      	lsrs	r3, r3, #3
 8004c1a:	b298      	uxth	r0, r3
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	4413      	add	r3, r2
 8004c22:	4a0e      	ldr	r2, [pc, #56]	@ (8004c5c <SSD1306_DrawPixel+0xb8>)
 8004c24:	5cd3      	ldrb	r3, [r2, r3]
 8004c26:	b25a      	sxtb	r2, r3
 8004c28:	88bb      	ldrh	r3, [r7, #4]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	b25b      	sxtb	r3, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	b259      	sxtb	r1, r3
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	4603      	mov	r3, r0
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	4413      	add	r3, r2
 8004c46:	b2c9      	uxtb	r1, r1
 8004c48:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <SSD1306_DrawPixel+0xb8>)
 8004c4a:	54d1      	strb	r1, [r2, r3]
 8004c4c:	e000      	b.n	8004c50 <SSD1306_DrawPixel+0xac>
		return;
 8004c4e:	bf00      	nop
	}
}
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	20002548 	.word	0x20002548
 8004c5c:	20002348 	.word	0x20002348

08004c60 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	460a      	mov	r2, r1
 8004c6a:	80fb      	strh	r3, [r7, #6]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004c70:	4a05      	ldr	r2, [pc, #20]	@ (8004c88 <SSD1306_GotoXY+0x28>)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8004c76:	4a04      	ldr	r2, [pc, #16]	@ (8004c88 <SSD1306_GotoXY+0x28>)
 8004c78:	88bb      	ldrh	r3, [r7, #4]
 8004c7a:	8053      	strh	r3, [r2, #2]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20002548 	.word	0x20002548

08004c8c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	71fb      	strb	r3, [r7, #7]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004c9c:	4b39      	ldr	r3, [pc, #228]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	4413      	add	r3, r2
	if (
 8004ca8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004caa:	dc07      	bgt.n	8004cbc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004cac:	4b35      	ldr	r3, [pc, #212]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004cae:	885b      	ldrh	r3, [r3, #2]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004cb8:	2b1f      	cmp	r3, #31
 8004cba:	dd01      	ble.n	8004cc0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e05d      	b.n	8004d7c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e04b      	b.n	8004d5e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	3b20      	subs	r3, #32
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	7849      	ldrb	r1, [r1, #1]
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	440b      	add	r3, r1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e030      	b.n	8004d4c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004cfa:	4b22      	ldr	r3, [pc, #136]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004cfc:	881a      	ldrh	r2, [r3, #0]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	b298      	uxth	r0, r3
 8004d06:	4b1f      	ldr	r3, [pc, #124]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004d08:	885a      	ldrh	r2, [r3, #2]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	79ba      	ldrb	r2, [r7, #6]
 8004d14:	4619      	mov	r1, r3
 8004d16:	f7ff ff45 	bl	8004ba4 <SSD1306_DrawPixel>
 8004d1a:	e014      	b.n	8004d46 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004d1c:	4b19      	ldr	r3, [pc, #100]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	b298      	uxth	r0, r3
 8004d28:	4b16      	ldr	r3, [pc, #88]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004d2a:	885a      	ldrh	r2, [r3, #2]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	b299      	uxth	r1, r3
 8004d34:	79bb      	ldrb	r3, [r7, #6]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	f7ff ff2f 	bl	8004ba4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d3c8      	bcc.n	8004cea <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	461a      	mov	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d3ad      	bcc.n	8004cc6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004d6a:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	4413      	add	r3, r2
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	4b03      	ldr	r3, [pc, #12]	@ (8004d84 <SSD1306_Putc+0xf8>)
 8004d78:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20002548 	.word	0x20002548

08004d88 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8004d96:	e012      	b.n	8004dbe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	79fa      	ldrb	r2, [r7, #7]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff73 	bl	8004c8c <SSD1306_Putc>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461a      	mov	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d002      	beq.n	8004db8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	e008      	b.n	8004dca <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e8      	bne.n	8004d98 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004dda:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <ssd1306_I2C_Init+0x24>)
 8004ddc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004dde:	e002      	b.n	8004de6 <ssd1306_I2C_Init+0x12>
		p--;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f9      	bne.n	8004de0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	0003d090 	.word	0x0003d090

08004dfc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b0c7      	sub	sp, #284	@ 0x11c
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004e0a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8004e0e:	600a      	str	r2, [r1, #0]
 8004e10:	4619      	mov	r1, r3
 8004e12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e16:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e22:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004e26:	4602      	mov	r2, r0
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004e32:	460a      	mov	r2, r1
 8004e34:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004e36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e3e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004e42:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004e50:	e015      	b.n	8004e7e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8004e52:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004e56:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004e5a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	441a      	add	r2, r3
 8004e62:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004e66:	3301      	adds	r3, #1
 8004e68:	7811      	ldrb	r1, [r2, #0]
 8004e6a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004e6e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004e72:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004e74:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004e7e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004e88:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8004e8c:	8812      	ldrh	r2, [r2, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d8df      	bhi.n	8004e52 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8004e92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e96:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	b299      	uxth	r1, r3
 8004e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ea2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f107 020c 	add.w	r2, r7, #12
 8004eb0:	200a      	movs	r0, #10
 8004eb2:	9000      	str	r0, [sp, #0]
 8004eb4:	4803      	ldr	r0, [pc, #12]	@ (8004ec4 <ssd1306_I2C_WriteMulti+0xc8>)
 8004eb6:	f7fe f945 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 8004eba:	bf00      	nop
 8004ebc:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd90      	pop	{r4, r7, pc}
 8004ec4:	2000026c 	.word	0x2000026c

08004ec8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	71bb      	strb	r3, [r7, #6]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004eda:	79bb      	ldrb	r3, [r7, #6]
 8004edc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004ede:	797b      	ldrb	r3, [r7, #5]
 8004ee0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	b299      	uxth	r1, r3
 8004ee6:	f107 020c 	add.w	r2, r7, #12
 8004eea:	230a      	movs	r3, #10
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2302      	movs	r3, #2
 8004ef0:	4803      	ldr	r0, [pc, #12]	@ (8004f00 <ssd1306_I2C_Write+0x38>)
 8004ef2:	f7fe f927 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	2000026c 	.word	0x2000026c

08004f04 <__cvt>:
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0a:	461d      	mov	r5, r3
 8004f0c:	bfbb      	ittet	lt
 8004f0e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004f12:	461d      	movlt	r5, r3
 8004f14:	2300      	movge	r3, #0
 8004f16:	232d      	movlt	r3, #45	@ 0x2d
 8004f18:	b088      	sub	sp, #32
 8004f1a:	4614      	mov	r4, r2
 8004f1c:	bfb8      	it	lt
 8004f1e:	4614      	movlt	r4, r2
 8004f20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f22:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004f24:	7013      	strb	r3, [r2, #0]
 8004f26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f28:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004f2c:	f023 0820 	bic.w	r8, r3, #32
 8004f30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f34:	d005      	beq.n	8004f42 <__cvt+0x3e>
 8004f36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f3a:	d100      	bne.n	8004f3e <__cvt+0x3a>
 8004f3c:	3601      	adds	r6, #1
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e000      	b.n	8004f44 <__cvt+0x40>
 8004f42:	2303      	movs	r3, #3
 8004f44:	aa07      	add	r2, sp, #28
 8004f46:	9204      	str	r2, [sp, #16]
 8004f48:	aa06      	add	r2, sp, #24
 8004f4a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f4e:	e9cd 3600 	strd	r3, r6, [sp]
 8004f52:	4622      	mov	r2, r4
 8004f54:	462b      	mov	r3, r5
 8004f56:	f000 fe6f 	bl	8005c38 <_dtoa_r>
 8004f5a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f5e:	4607      	mov	r7, r0
 8004f60:	d119      	bne.n	8004f96 <__cvt+0x92>
 8004f62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004f64:	07db      	lsls	r3, r3, #31
 8004f66:	d50e      	bpl.n	8004f86 <__cvt+0x82>
 8004f68:	eb00 0906 	add.w	r9, r0, r6
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f7fb fd18 	bl	80009a8 <__aeabi_dcmpeq>
 8004f78:	b108      	cbz	r0, 8004f7e <__cvt+0x7a>
 8004f7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004f7e:	2230      	movs	r2, #48	@ 0x30
 8004f80:	9b07      	ldr	r3, [sp, #28]
 8004f82:	454b      	cmp	r3, r9
 8004f84:	d31e      	bcc.n	8004fc4 <__cvt+0xc0>
 8004f86:	4638      	mov	r0, r7
 8004f88:	9b07      	ldr	r3, [sp, #28]
 8004f8a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004f8c:	1bdb      	subs	r3, r3, r7
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	b008      	add	sp, #32
 8004f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f9a:	eb00 0906 	add.w	r9, r0, r6
 8004f9e:	d1e5      	bne.n	8004f6c <__cvt+0x68>
 8004fa0:	7803      	ldrb	r3, [r0, #0]
 8004fa2:	2b30      	cmp	r3, #48	@ 0x30
 8004fa4:	d10a      	bne.n	8004fbc <__cvt+0xb8>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4620      	mov	r0, r4
 8004fac:	4629      	mov	r1, r5
 8004fae:	f7fb fcfb 	bl	80009a8 <__aeabi_dcmpeq>
 8004fb2:	b918      	cbnz	r0, 8004fbc <__cvt+0xb8>
 8004fb4:	f1c6 0601 	rsb	r6, r6, #1
 8004fb8:	f8ca 6000 	str.w	r6, [sl]
 8004fbc:	f8da 3000 	ldr.w	r3, [sl]
 8004fc0:	4499      	add	r9, r3
 8004fc2:	e7d3      	b.n	8004f6c <__cvt+0x68>
 8004fc4:	1c59      	adds	r1, r3, #1
 8004fc6:	9107      	str	r1, [sp, #28]
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e7d9      	b.n	8004f80 <__cvt+0x7c>

08004fcc <__exponent>:
 8004fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	bfb6      	itet	lt
 8004fd2:	232d      	movlt	r3, #45	@ 0x2d
 8004fd4:	232b      	movge	r3, #43	@ 0x2b
 8004fd6:	4249      	neglt	r1, r1
 8004fd8:	2909      	cmp	r1, #9
 8004fda:	7002      	strb	r2, [r0, #0]
 8004fdc:	7043      	strb	r3, [r0, #1]
 8004fde:	dd29      	ble.n	8005034 <__exponent+0x68>
 8004fe0:	f10d 0307 	add.w	r3, sp, #7
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	270a      	movs	r7, #10
 8004fe8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fec:	461a      	mov	r2, r3
 8004fee:	fb07 1416 	mls	r4, r7, r6, r1
 8004ff2:	3430      	adds	r4, #48	@ 0x30
 8004ff4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	2c63      	cmp	r4, #99	@ 0x63
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005002:	dcf1      	bgt.n	8004fe8 <__exponent+0x1c>
 8005004:	3130      	adds	r1, #48	@ 0x30
 8005006:	1e94      	subs	r4, r2, #2
 8005008:	f803 1c01 	strb.w	r1, [r3, #-1]
 800500c:	4623      	mov	r3, r4
 800500e:	1c41      	adds	r1, r0, #1
 8005010:	42ab      	cmp	r3, r5
 8005012:	d30a      	bcc.n	800502a <__exponent+0x5e>
 8005014:	f10d 0309 	add.w	r3, sp, #9
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	42ac      	cmp	r4, r5
 800501c:	bf88      	it	hi
 800501e:	2300      	movhi	r3, #0
 8005020:	3302      	adds	r3, #2
 8005022:	4403      	add	r3, r0
 8005024:	1a18      	subs	r0, r3, r0
 8005026:	b003      	add	sp, #12
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800502e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005032:	e7ed      	b.n	8005010 <__exponent+0x44>
 8005034:	2330      	movs	r3, #48	@ 0x30
 8005036:	3130      	adds	r1, #48	@ 0x30
 8005038:	7083      	strb	r3, [r0, #2]
 800503a:	70c1      	strb	r1, [r0, #3]
 800503c:	1d03      	adds	r3, r0, #4
 800503e:	e7f1      	b.n	8005024 <__exponent+0x58>

08005040 <_printf_float>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	b091      	sub	sp, #68	@ 0x44
 8005046:	460c      	mov	r4, r1
 8005048:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800504c:	4616      	mov	r6, r2
 800504e:	461f      	mov	r7, r3
 8005050:	4605      	mov	r5, r0
 8005052:	f000 fce1 	bl	8005a18 <_localeconv_r>
 8005056:	6803      	ldr	r3, [r0, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	9308      	str	r3, [sp, #32]
 800505c:	f7fb f878 	bl	8000150 <strlen>
 8005060:	2300      	movs	r3, #0
 8005062:	930e      	str	r3, [sp, #56]	@ 0x38
 8005064:	f8d8 3000 	ldr.w	r3, [r8]
 8005068:	9009      	str	r0, [sp, #36]	@ 0x24
 800506a:	3307      	adds	r3, #7
 800506c:	f023 0307 	bic.w	r3, r3, #7
 8005070:	f103 0208 	add.w	r2, r3, #8
 8005074:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005078:	f8d4 b000 	ldr.w	fp, [r4]
 800507c:	f8c8 2000 	str.w	r2, [r8]
 8005080:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005084:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800508a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800508e:	f04f 32ff 	mov.w	r2, #4294967295
 8005092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005096:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800509a:	4b9c      	ldr	r3, [pc, #624]	@ (800530c <_printf_float+0x2cc>)
 800509c:	f7fb fcb6 	bl	8000a0c <__aeabi_dcmpun>
 80050a0:	bb70      	cbnz	r0, 8005100 <_printf_float+0xc0>
 80050a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80050a6:	f04f 32ff 	mov.w	r2, #4294967295
 80050aa:	4b98      	ldr	r3, [pc, #608]	@ (800530c <_printf_float+0x2cc>)
 80050ac:	f7fb fc90 	bl	80009d0 <__aeabi_dcmple>
 80050b0:	bb30      	cbnz	r0, 8005100 <_printf_float+0xc0>
 80050b2:	2200      	movs	r2, #0
 80050b4:	2300      	movs	r3, #0
 80050b6:	4640      	mov	r0, r8
 80050b8:	4649      	mov	r1, r9
 80050ba:	f7fb fc7f 	bl	80009bc <__aeabi_dcmplt>
 80050be:	b110      	cbz	r0, 80050c6 <_printf_float+0x86>
 80050c0:	232d      	movs	r3, #45	@ 0x2d
 80050c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c6:	4a92      	ldr	r2, [pc, #584]	@ (8005310 <_printf_float+0x2d0>)
 80050c8:	4b92      	ldr	r3, [pc, #584]	@ (8005314 <_printf_float+0x2d4>)
 80050ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050ce:	bf8c      	ite	hi
 80050d0:	4690      	movhi	r8, r2
 80050d2:	4698      	movls	r8, r3
 80050d4:	2303      	movs	r3, #3
 80050d6:	f04f 0900 	mov.w	r9, #0
 80050da:	6123      	str	r3, [r4, #16]
 80050dc:	f02b 0304 	bic.w	r3, fp, #4
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	4633      	mov	r3, r6
 80050e4:	4621      	mov	r1, r4
 80050e6:	4628      	mov	r0, r5
 80050e8:	9700      	str	r7, [sp, #0]
 80050ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80050ec:	f000 f9d4 	bl	8005498 <_printf_common>
 80050f0:	3001      	adds	r0, #1
 80050f2:	f040 8090 	bne.w	8005216 <_printf_float+0x1d6>
 80050f6:	f04f 30ff 	mov.w	r0, #4294967295
 80050fa:	b011      	add	sp, #68	@ 0x44
 80050fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005100:	4642      	mov	r2, r8
 8005102:	464b      	mov	r3, r9
 8005104:	4640      	mov	r0, r8
 8005106:	4649      	mov	r1, r9
 8005108:	f7fb fc80 	bl	8000a0c <__aeabi_dcmpun>
 800510c:	b148      	cbz	r0, 8005122 <_printf_float+0xe2>
 800510e:	464b      	mov	r3, r9
 8005110:	2b00      	cmp	r3, #0
 8005112:	bfb8      	it	lt
 8005114:	232d      	movlt	r3, #45	@ 0x2d
 8005116:	4a80      	ldr	r2, [pc, #512]	@ (8005318 <_printf_float+0x2d8>)
 8005118:	bfb8      	it	lt
 800511a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800511e:	4b7f      	ldr	r3, [pc, #508]	@ (800531c <_printf_float+0x2dc>)
 8005120:	e7d3      	b.n	80050ca <_printf_float+0x8a>
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	d13f      	bne.n	80051ac <_printf_float+0x16c>
 800512c:	2306      	movs	r3, #6
 800512e:	6063      	str	r3, [r4, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	9206      	str	r2, [sp, #24]
 800513a:	aa0e      	add	r2, sp, #56	@ 0x38
 800513c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005140:	aa0d      	add	r2, sp, #52	@ 0x34
 8005142:	9203      	str	r2, [sp, #12]
 8005144:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005148:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	4642      	mov	r2, r8
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	4628      	mov	r0, r5
 8005154:	464b      	mov	r3, r9
 8005156:	910a      	str	r1, [sp, #40]	@ 0x28
 8005158:	f7ff fed4 	bl	8004f04 <__cvt>
 800515c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800515e:	4680      	mov	r8, r0
 8005160:	2947      	cmp	r1, #71	@ 0x47
 8005162:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005164:	d128      	bne.n	80051b8 <_printf_float+0x178>
 8005166:	1cc8      	adds	r0, r1, #3
 8005168:	db02      	blt.n	8005170 <_printf_float+0x130>
 800516a:	6863      	ldr	r3, [r4, #4]
 800516c:	4299      	cmp	r1, r3
 800516e:	dd40      	ble.n	80051f2 <_printf_float+0x1b2>
 8005170:	f1aa 0a02 	sub.w	sl, sl, #2
 8005174:	fa5f fa8a 	uxtb.w	sl, sl
 8005178:	4652      	mov	r2, sl
 800517a:	3901      	subs	r1, #1
 800517c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005180:	910d      	str	r1, [sp, #52]	@ 0x34
 8005182:	f7ff ff23 	bl	8004fcc <__exponent>
 8005186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005188:	4681      	mov	r9, r0
 800518a:	1813      	adds	r3, r2, r0
 800518c:	2a01      	cmp	r2, #1
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	dc02      	bgt.n	8005198 <_printf_float+0x158>
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	07d2      	lsls	r2, r2, #31
 8005196:	d501      	bpl.n	800519c <_printf_float+0x15c>
 8005198:	3301      	adds	r3, #1
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d09e      	beq.n	80050e2 <_printf_float+0xa2>
 80051a4:	232d      	movs	r3, #45	@ 0x2d
 80051a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051aa:	e79a      	b.n	80050e2 <_printf_float+0xa2>
 80051ac:	2947      	cmp	r1, #71	@ 0x47
 80051ae:	d1bf      	bne.n	8005130 <_printf_float+0xf0>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1bd      	bne.n	8005130 <_printf_float+0xf0>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e7ba      	b.n	800512e <_printf_float+0xee>
 80051b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051bc:	d9dc      	bls.n	8005178 <_printf_float+0x138>
 80051be:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051c2:	d118      	bne.n	80051f6 <_printf_float+0x1b6>
 80051c4:	2900      	cmp	r1, #0
 80051c6:	6863      	ldr	r3, [r4, #4]
 80051c8:	dd0b      	ble.n	80051e2 <_printf_float+0x1a2>
 80051ca:	6121      	str	r1, [r4, #16]
 80051cc:	b913      	cbnz	r3, 80051d4 <_printf_float+0x194>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	07d0      	lsls	r0, r2, #31
 80051d2:	d502      	bpl.n	80051da <_printf_float+0x19a>
 80051d4:	3301      	adds	r3, #1
 80051d6:	440b      	add	r3, r1
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	f04f 0900 	mov.w	r9, #0
 80051de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051e0:	e7dc      	b.n	800519c <_printf_float+0x15c>
 80051e2:	b913      	cbnz	r3, 80051ea <_printf_float+0x1aa>
 80051e4:	6822      	ldr	r2, [r4, #0]
 80051e6:	07d2      	lsls	r2, r2, #31
 80051e8:	d501      	bpl.n	80051ee <_printf_float+0x1ae>
 80051ea:	3302      	adds	r3, #2
 80051ec:	e7f4      	b.n	80051d8 <_printf_float+0x198>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e7f2      	b.n	80051d8 <_printf_float+0x198>
 80051f2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051f8:	4299      	cmp	r1, r3
 80051fa:	db05      	blt.n	8005208 <_printf_float+0x1c8>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	6121      	str	r1, [r4, #16]
 8005200:	07d8      	lsls	r0, r3, #31
 8005202:	d5ea      	bpl.n	80051da <_printf_float+0x19a>
 8005204:	1c4b      	adds	r3, r1, #1
 8005206:	e7e7      	b.n	80051d8 <_printf_float+0x198>
 8005208:	2900      	cmp	r1, #0
 800520a:	bfcc      	ite	gt
 800520c:	2201      	movgt	r2, #1
 800520e:	f1c1 0202 	rsble	r2, r1, #2
 8005212:	4413      	add	r3, r2
 8005214:	e7e0      	b.n	80051d8 <_printf_float+0x198>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	055a      	lsls	r2, r3, #21
 800521a:	d407      	bmi.n	800522c <_printf_float+0x1ec>
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	4642      	mov	r2, r8
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	d12b      	bne.n	8005282 <_printf_float+0x242>
 800522a:	e764      	b.n	80050f6 <_printf_float+0xb6>
 800522c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005230:	f240 80dc 	bls.w	80053ec <_printf_float+0x3ac>
 8005234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005238:	2200      	movs	r2, #0
 800523a:	2300      	movs	r3, #0
 800523c:	f7fb fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8005240:	2800      	cmp	r0, #0
 8005242:	d033      	beq.n	80052ac <_printf_float+0x26c>
 8005244:	2301      	movs	r3, #1
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	4a35      	ldr	r2, [pc, #212]	@ (8005320 <_printf_float+0x2e0>)
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	f43f af51 	beq.w	80050f6 <_printf_float+0xb6>
 8005254:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005258:	4543      	cmp	r3, r8
 800525a:	db02      	blt.n	8005262 <_printf_float+0x222>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	07d8      	lsls	r0, r3, #31
 8005260:	d50f      	bpl.n	8005282 <_printf_float+0x242>
 8005262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f af42 	beq.w	80050f6 <_printf_float+0xb6>
 8005272:	f04f 0900 	mov.w	r9, #0
 8005276:	f108 38ff 	add.w	r8, r8, #4294967295
 800527a:	f104 0a1a 	add.w	sl, r4, #26
 800527e:	45c8      	cmp	r8, r9
 8005280:	dc09      	bgt.n	8005296 <_printf_float+0x256>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	079b      	lsls	r3, r3, #30
 8005286:	f100 8102 	bmi.w	800548e <_printf_float+0x44e>
 800528a:	68e0      	ldr	r0, [r4, #12]
 800528c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800528e:	4298      	cmp	r0, r3
 8005290:	bfb8      	it	lt
 8005292:	4618      	movlt	r0, r3
 8005294:	e731      	b.n	80050fa <_printf_float+0xba>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f af28 	beq.w	80050f6 <_printf_float+0xb6>
 80052a6:	f109 0901 	add.w	r9, r9, #1
 80052aa:	e7e8      	b.n	800527e <_printf_float+0x23e>
 80052ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dc38      	bgt.n	8005324 <_printf_float+0x2e4>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4631      	mov	r1, r6
 80052b6:	4628      	mov	r0, r5
 80052b8:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <_printf_float+0x2e0>)
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	f43f af1a 	beq.w	80050f6 <_printf_float+0xb6>
 80052c2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80052c6:	ea59 0303 	orrs.w	r3, r9, r3
 80052ca:	d102      	bne.n	80052d2 <_printf_float+0x292>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	07d9      	lsls	r1, r3, #31
 80052d0:	d5d7      	bpl.n	8005282 <_printf_float+0x242>
 80052d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052d6:	4631      	mov	r1, r6
 80052d8:	4628      	mov	r0, r5
 80052da:	47b8      	blx	r7
 80052dc:	3001      	adds	r0, #1
 80052de:	f43f af0a 	beq.w	80050f6 <_printf_float+0xb6>
 80052e2:	f04f 0a00 	mov.w	sl, #0
 80052e6:	f104 0b1a 	add.w	fp, r4, #26
 80052ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052ec:	425b      	negs	r3, r3
 80052ee:	4553      	cmp	r3, sl
 80052f0:	dc01      	bgt.n	80052f6 <_printf_float+0x2b6>
 80052f2:	464b      	mov	r3, r9
 80052f4:	e793      	b.n	800521e <_printf_float+0x1de>
 80052f6:	2301      	movs	r3, #1
 80052f8:	465a      	mov	r2, fp
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	f43f aef8 	beq.w	80050f6 <_printf_float+0xb6>
 8005306:	f10a 0a01 	add.w	sl, sl, #1
 800530a:	e7ee      	b.n	80052ea <_printf_float+0x2aa>
 800530c:	7fefffff 	.word	0x7fefffff
 8005310:	08009208 	.word	0x08009208
 8005314:	08009204 	.word	0x08009204
 8005318:	08009210 	.word	0x08009210
 800531c:	0800920c 	.word	0x0800920c
 8005320:	08009214 	.word	0x08009214
 8005324:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005326:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800532a:	4553      	cmp	r3, sl
 800532c:	bfa8      	it	ge
 800532e:	4653      	movge	r3, sl
 8005330:	2b00      	cmp	r3, #0
 8005332:	4699      	mov	r9, r3
 8005334:	dc36      	bgt.n	80053a4 <_printf_float+0x364>
 8005336:	f04f 0b00 	mov.w	fp, #0
 800533a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800533e:	f104 021a 	add.w	r2, r4, #26
 8005342:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005344:	930a      	str	r3, [sp, #40]	@ 0x28
 8005346:	eba3 0309 	sub.w	r3, r3, r9
 800534a:	455b      	cmp	r3, fp
 800534c:	dc31      	bgt.n	80053b2 <_printf_float+0x372>
 800534e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005350:	459a      	cmp	sl, r3
 8005352:	dc3a      	bgt.n	80053ca <_printf_float+0x38a>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	07da      	lsls	r2, r3, #31
 8005358:	d437      	bmi.n	80053ca <_printf_float+0x38a>
 800535a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800535c:	ebaa 0903 	sub.w	r9, sl, r3
 8005360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005362:	ebaa 0303 	sub.w	r3, sl, r3
 8005366:	4599      	cmp	r9, r3
 8005368:	bfa8      	it	ge
 800536a:	4699      	movge	r9, r3
 800536c:	f1b9 0f00 	cmp.w	r9, #0
 8005370:	dc33      	bgt.n	80053da <_printf_float+0x39a>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800537a:	f104 0b1a 	add.w	fp, r4, #26
 800537e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005380:	ebaa 0303 	sub.w	r3, sl, r3
 8005384:	eba3 0309 	sub.w	r3, r3, r9
 8005388:	4543      	cmp	r3, r8
 800538a:	f77f af7a 	ble.w	8005282 <_printf_float+0x242>
 800538e:	2301      	movs	r3, #1
 8005390:	465a      	mov	r2, fp
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f aeac 	beq.w	80050f6 <_printf_float+0xb6>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	e7ec      	b.n	800537e <_printf_float+0x33e>
 80053a4:	4642      	mov	r2, r8
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	d1c2      	bne.n	8005336 <_printf_float+0x2f6>
 80053b0:	e6a1      	b.n	80050f6 <_printf_float+0xb6>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4631      	mov	r1, r6
 80053b6:	4628      	mov	r0, r5
 80053b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	f43f ae9a 	beq.w	80050f6 <_printf_float+0xb6>
 80053c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053c4:	f10b 0b01 	add.w	fp, fp, #1
 80053c8:	e7bb      	b.n	8005342 <_printf_float+0x302>
 80053ca:	4631      	mov	r1, r6
 80053cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	d1c0      	bne.n	800535a <_printf_float+0x31a>
 80053d8:	e68d      	b.n	80050f6 <_printf_float+0xb6>
 80053da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053dc:	464b      	mov	r3, r9
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	4442      	add	r2, r8
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	d1c3      	bne.n	8005372 <_printf_float+0x332>
 80053ea:	e684      	b.n	80050f6 <_printf_float+0xb6>
 80053ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80053f0:	f1ba 0f01 	cmp.w	sl, #1
 80053f4:	dc01      	bgt.n	80053fa <_printf_float+0x3ba>
 80053f6:	07db      	lsls	r3, r3, #31
 80053f8:	d536      	bpl.n	8005468 <_printf_float+0x428>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4642      	mov	r2, r8
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f ae76 	beq.w	80050f6 <_printf_float+0xb6>
 800540a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f ae6e 	beq.w	80050f6 <_printf_float+0xb6>
 800541a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800541e:	2200      	movs	r2, #0
 8005420:	2300      	movs	r3, #0
 8005422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005426:	f7fb fabf 	bl	80009a8 <__aeabi_dcmpeq>
 800542a:	b9c0      	cbnz	r0, 800545e <_printf_float+0x41e>
 800542c:	4653      	mov	r3, sl
 800542e:	f108 0201 	add.w	r2, r8, #1
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	d10c      	bne.n	8005456 <_printf_float+0x416>
 800543c:	e65b      	b.n	80050f6 <_printf_float+0xb6>
 800543e:	2301      	movs	r3, #1
 8005440:	465a      	mov	r2, fp
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f ae54 	beq.w	80050f6 <_printf_float+0xb6>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	45d0      	cmp	r8, sl
 8005454:	dbf3      	blt.n	800543e <_printf_float+0x3fe>
 8005456:	464b      	mov	r3, r9
 8005458:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800545c:	e6e0      	b.n	8005220 <_printf_float+0x1e0>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	f104 0b1a 	add.w	fp, r4, #26
 8005466:	e7f4      	b.n	8005452 <_printf_float+0x412>
 8005468:	2301      	movs	r3, #1
 800546a:	4642      	mov	r2, r8
 800546c:	e7e1      	b.n	8005432 <_printf_float+0x3f2>
 800546e:	2301      	movs	r3, #1
 8005470:	464a      	mov	r2, r9
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	f43f ae3c 	beq.w	80050f6 <_printf_float+0xb6>
 800547e:	f108 0801 	add.w	r8, r8, #1
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005486:	1a5b      	subs	r3, r3, r1
 8005488:	4543      	cmp	r3, r8
 800548a:	dcf0      	bgt.n	800546e <_printf_float+0x42e>
 800548c:	e6fd      	b.n	800528a <_printf_float+0x24a>
 800548e:	f04f 0800 	mov.w	r8, #0
 8005492:	f104 0919 	add.w	r9, r4, #25
 8005496:	e7f4      	b.n	8005482 <_printf_float+0x442>

08005498 <_printf_common>:
 8005498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800549c:	4616      	mov	r6, r2
 800549e:	4698      	mov	r8, r3
 80054a0:	688a      	ldr	r2, [r1, #8]
 80054a2:	690b      	ldr	r3, [r1, #16]
 80054a4:	4607      	mov	r7, r0
 80054a6:	4293      	cmp	r3, r2
 80054a8:	bfb8      	it	lt
 80054aa:	4613      	movlt	r3, r2
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054b2:	460c      	mov	r4, r1
 80054b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054b8:	b10a      	cbz	r2, 80054be <_printf_common+0x26>
 80054ba:	3301      	adds	r3, #1
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	0699      	lsls	r1, r3, #26
 80054c2:	bf42      	ittt	mi
 80054c4:	6833      	ldrmi	r3, [r6, #0]
 80054c6:	3302      	addmi	r3, #2
 80054c8:	6033      	strmi	r3, [r6, #0]
 80054ca:	6825      	ldr	r5, [r4, #0]
 80054cc:	f015 0506 	ands.w	r5, r5, #6
 80054d0:	d106      	bne.n	80054e0 <_printf_common+0x48>
 80054d2:	f104 0a19 	add.w	sl, r4, #25
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	6832      	ldr	r2, [r6, #0]
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	42ab      	cmp	r3, r5
 80054de:	dc2b      	bgt.n	8005538 <_printf_common+0xa0>
 80054e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	3b00      	subs	r3, #0
 80054e8:	bf18      	it	ne
 80054ea:	2301      	movne	r3, #1
 80054ec:	0692      	lsls	r2, r2, #26
 80054ee:	d430      	bmi.n	8005552 <_printf_common+0xba>
 80054f0:	4641      	mov	r1, r8
 80054f2:	4638      	mov	r0, r7
 80054f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054f8:	47c8      	blx	r9
 80054fa:	3001      	adds	r0, #1
 80054fc:	d023      	beq.n	8005546 <_printf_common+0xae>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	6922      	ldr	r2, [r4, #16]
 8005502:	f003 0306 	and.w	r3, r3, #6
 8005506:	2b04      	cmp	r3, #4
 8005508:	bf14      	ite	ne
 800550a:	2500      	movne	r5, #0
 800550c:	6833      	ldreq	r3, [r6, #0]
 800550e:	f04f 0600 	mov.w	r6, #0
 8005512:	bf08      	it	eq
 8005514:	68e5      	ldreq	r5, [r4, #12]
 8005516:	f104 041a 	add.w	r4, r4, #26
 800551a:	bf08      	it	eq
 800551c:	1aed      	subeq	r5, r5, r3
 800551e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005522:	bf08      	it	eq
 8005524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005528:	4293      	cmp	r3, r2
 800552a:	bfc4      	itt	gt
 800552c:	1a9b      	subgt	r3, r3, r2
 800552e:	18ed      	addgt	r5, r5, r3
 8005530:	42b5      	cmp	r5, r6
 8005532:	d11a      	bne.n	800556a <_printf_common+0xd2>
 8005534:	2000      	movs	r0, #0
 8005536:	e008      	b.n	800554a <_printf_common+0xb2>
 8005538:	2301      	movs	r3, #1
 800553a:	4652      	mov	r2, sl
 800553c:	4641      	mov	r1, r8
 800553e:	4638      	mov	r0, r7
 8005540:	47c8      	blx	r9
 8005542:	3001      	adds	r0, #1
 8005544:	d103      	bne.n	800554e <_printf_common+0xb6>
 8005546:	f04f 30ff 	mov.w	r0, #4294967295
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	3501      	adds	r5, #1
 8005550:	e7c1      	b.n	80054d6 <_printf_common+0x3e>
 8005552:	2030      	movs	r0, #48	@ 0x30
 8005554:	18e1      	adds	r1, r4, r3
 8005556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005560:	4422      	add	r2, r4
 8005562:	3302      	adds	r3, #2
 8005564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005568:	e7c2      	b.n	80054f0 <_printf_common+0x58>
 800556a:	2301      	movs	r3, #1
 800556c:	4622      	mov	r2, r4
 800556e:	4641      	mov	r1, r8
 8005570:	4638      	mov	r0, r7
 8005572:	47c8      	blx	r9
 8005574:	3001      	adds	r0, #1
 8005576:	d0e6      	beq.n	8005546 <_printf_common+0xae>
 8005578:	3601      	adds	r6, #1
 800557a:	e7d9      	b.n	8005530 <_printf_common+0x98>

0800557c <_printf_i>:
 800557c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	7e0f      	ldrb	r7, [r1, #24]
 8005582:	4691      	mov	r9, r2
 8005584:	2f78      	cmp	r7, #120	@ 0x78
 8005586:	4680      	mov	r8, r0
 8005588:	460c      	mov	r4, r1
 800558a:	469a      	mov	sl, r3
 800558c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800558e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005592:	d807      	bhi.n	80055a4 <_printf_i+0x28>
 8005594:	2f62      	cmp	r7, #98	@ 0x62
 8005596:	d80a      	bhi.n	80055ae <_printf_i+0x32>
 8005598:	2f00      	cmp	r7, #0
 800559a:	f000 80d1 	beq.w	8005740 <_printf_i+0x1c4>
 800559e:	2f58      	cmp	r7, #88	@ 0x58
 80055a0:	f000 80b8 	beq.w	8005714 <_printf_i+0x198>
 80055a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055ac:	e03a      	b.n	8005624 <_printf_i+0xa8>
 80055ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055b2:	2b15      	cmp	r3, #21
 80055b4:	d8f6      	bhi.n	80055a4 <_printf_i+0x28>
 80055b6:	a101      	add	r1, pc, #4	@ (adr r1, 80055bc <_printf_i+0x40>)
 80055b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055bc:	08005615 	.word	0x08005615
 80055c0:	08005629 	.word	0x08005629
 80055c4:	080055a5 	.word	0x080055a5
 80055c8:	080055a5 	.word	0x080055a5
 80055cc:	080055a5 	.word	0x080055a5
 80055d0:	080055a5 	.word	0x080055a5
 80055d4:	08005629 	.word	0x08005629
 80055d8:	080055a5 	.word	0x080055a5
 80055dc:	080055a5 	.word	0x080055a5
 80055e0:	080055a5 	.word	0x080055a5
 80055e4:	080055a5 	.word	0x080055a5
 80055e8:	08005727 	.word	0x08005727
 80055ec:	08005653 	.word	0x08005653
 80055f0:	080056e1 	.word	0x080056e1
 80055f4:	080055a5 	.word	0x080055a5
 80055f8:	080055a5 	.word	0x080055a5
 80055fc:	08005749 	.word	0x08005749
 8005600:	080055a5 	.word	0x080055a5
 8005604:	08005653 	.word	0x08005653
 8005608:	080055a5 	.word	0x080055a5
 800560c:	080055a5 	.word	0x080055a5
 8005610:	080056e9 	.word	0x080056e9
 8005614:	6833      	ldr	r3, [r6, #0]
 8005616:	1d1a      	adds	r2, r3, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6032      	str	r2, [r6, #0]
 800561c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005624:	2301      	movs	r3, #1
 8005626:	e09c      	b.n	8005762 <_printf_i+0x1e6>
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	6820      	ldr	r0, [r4, #0]
 800562c:	1d19      	adds	r1, r3, #4
 800562e:	6031      	str	r1, [r6, #0]
 8005630:	0606      	lsls	r6, r0, #24
 8005632:	d501      	bpl.n	8005638 <_printf_i+0xbc>
 8005634:	681d      	ldr	r5, [r3, #0]
 8005636:	e003      	b.n	8005640 <_printf_i+0xc4>
 8005638:	0645      	lsls	r5, r0, #25
 800563a:	d5fb      	bpl.n	8005634 <_printf_i+0xb8>
 800563c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005640:	2d00      	cmp	r5, #0
 8005642:	da03      	bge.n	800564c <_printf_i+0xd0>
 8005644:	232d      	movs	r3, #45	@ 0x2d
 8005646:	426d      	negs	r5, r5
 8005648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800564c:	230a      	movs	r3, #10
 800564e:	4858      	ldr	r0, [pc, #352]	@ (80057b0 <_printf_i+0x234>)
 8005650:	e011      	b.n	8005676 <_printf_i+0xfa>
 8005652:	6821      	ldr	r1, [r4, #0]
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	0608      	lsls	r0, r1, #24
 8005658:	f853 5b04 	ldr.w	r5, [r3], #4
 800565c:	d402      	bmi.n	8005664 <_printf_i+0xe8>
 800565e:	0649      	lsls	r1, r1, #25
 8005660:	bf48      	it	mi
 8005662:	b2ad      	uxthmi	r5, r5
 8005664:	2f6f      	cmp	r7, #111	@ 0x6f
 8005666:	6033      	str	r3, [r6, #0]
 8005668:	bf14      	ite	ne
 800566a:	230a      	movne	r3, #10
 800566c:	2308      	moveq	r3, #8
 800566e:	4850      	ldr	r0, [pc, #320]	@ (80057b0 <_printf_i+0x234>)
 8005670:	2100      	movs	r1, #0
 8005672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005676:	6866      	ldr	r6, [r4, #4]
 8005678:	2e00      	cmp	r6, #0
 800567a:	60a6      	str	r6, [r4, #8]
 800567c:	db05      	blt.n	800568a <_printf_i+0x10e>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	432e      	orrs	r6, r5
 8005682:	f021 0104 	bic.w	r1, r1, #4
 8005686:	6021      	str	r1, [r4, #0]
 8005688:	d04b      	beq.n	8005722 <_printf_i+0x1a6>
 800568a:	4616      	mov	r6, r2
 800568c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005690:	fb03 5711 	mls	r7, r3, r1, r5
 8005694:	5dc7      	ldrb	r7, [r0, r7]
 8005696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800569a:	462f      	mov	r7, r5
 800569c:	42bb      	cmp	r3, r7
 800569e:	460d      	mov	r5, r1
 80056a0:	d9f4      	bls.n	800568c <_printf_i+0x110>
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d10b      	bne.n	80056be <_printf_i+0x142>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	07df      	lsls	r7, r3, #31
 80056aa:	d508      	bpl.n	80056be <_printf_i+0x142>
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	6861      	ldr	r1, [r4, #4]
 80056b0:	4299      	cmp	r1, r3
 80056b2:	bfde      	ittt	le
 80056b4:	2330      	movle	r3, #48	@ 0x30
 80056b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056be:	1b92      	subs	r2, r2, r6
 80056c0:	6122      	str	r2, [r4, #16]
 80056c2:	464b      	mov	r3, r9
 80056c4:	4621      	mov	r1, r4
 80056c6:	4640      	mov	r0, r8
 80056c8:	f8cd a000 	str.w	sl, [sp]
 80056cc:	aa03      	add	r2, sp, #12
 80056ce:	f7ff fee3 	bl	8005498 <_printf_common>
 80056d2:	3001      	adds	r0, #1
 80056d4:	d14a      	bne.n	800576c <_printf_i+0x1f0>
 80056d6:	f04f 30ff 	mov.w	r0, #4294967295
 80056da:	b004      	add	sp, #16
 80056dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	f043 0320 	orr.w	r3, r3, #32
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	2778      	movs	r7, #120	@ 0x78
 80056ea:	4832      	ldr	r0, [pc, #200]	@ (80057b4 <_printf_i+0x238>)
 80056ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	6831      	ldr	r1, [r6, #0]
 80056f4:	061f      	lsls	r7, r3, #24
 80056f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80056fa:	d402      	bmi.n	8005702 <_printf_i+0x186>
 80056fc:	065f      	lsls	r7, r3, #25
 80056fe:	bf48      	it	mi
 8005700:	b2ad      	uxthmi	r5, r5
 8005702:	6031      	str	r1, [r6, #0]
 8005704:	07d9      	lsls	r1, r3, #31
 8005706:	bf44      	itt	mi
 8005708:	f043 0320 	orrmi.w	r3, r3, #32
 800570c:	6023      	strmi	r3, [r4, #0]
 800570e:	b11d      	cbz	r5, 8005718 <_printf_i+0x19c>
 8005710:	2310      	movs	r3, #16
 8005712:	e7ad      	b.n	8005670 <_printf_i+0xf4>
 8005714:	4826      	ldr	r0, [pc, #152]	@ (80057b0 <_printf_i+0x234>)
 8005716:	e7e9      	b.n	80056ec <_printf_i+0x170>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	f023 0320 	bic.w	r3, r3, #32
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	e7f6      	b.n	8005710 <_printf_i+0x194>
 8005722:	4616      	mov	r6, r2
 8005724:	e7bd      	b.n	80056a2 <_printf_i+0x126>
 8005726:	6833      	ldr	r3, [r6, #0]
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	1d18      	adds	r0, r3, #4
 800572c:	6961      	ldr	r1, [r4, #20]
 800572e:	6030      	str	r0, [r6, #0]
 8005730:	062e      	lsls	r6, r5, #24
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	d501      	bpl.n	800573a <_printf_i+0x1be>
 8005736:	6019      	str	r1, [r3, #0]
 8005738:	e002      	b.n	8005740 <_printf_i+0x1c4>
 800573a:	0668      	lsls	r0, r5, #25
 800573c:	d5fb      	bpl.n	8005736 <_printf_i+0x1ba>
 800573e:	8019      	strh	r1, [r3, #0]
 8005740:	2300      	movs	r3, #0
 8005742:	4616      	mov	r6, r2
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	e7bc      	b.n	80056c2 <_printf_i+0x146>
 8005748:	6833      	ldr	r3, [r6, #0]
 800574a:	2100      	movs	r1, #0
 800574c:	1d1a      	adds	r2, r3, #4
 800574e:	6032      	str	r2, [r6, #0]
 8005750:	681e      	ldr	r6, [r3, #0]
 8005752:	6862      	ldr	r2, [r4, #4]
 8005754:	4630      	mov	r0, r6
 8005756:	f000 f9d6 	bl	8005b06 <memchr>
 800575a:	b108      	cbz	r0, 8005760 <_printf_i+0x1e4>
 800575c:	1b80      	subs	r0, r0, r6
 800575e:	6060      	str	r0, [r4, #4]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	2300      	movs	r3, #0
 8005766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800576a:	e7aa      	b.n	80056c2 <_printf_i+0x146>
 800576c:	4632      	mov	r2, r6
 800576e:	4649      	mov	r1, r9
 8005770:	4640      	mov	r0, r8
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	47d0      	blx	sl
 8005776:	3001      	adds	r0, #1
 8005778:	d0ad      	beq.n	80056d6 <_printf_i+0x15a>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	079b      	lsls	r3, r3, #30
 800577e:	d413      	bmi.n	80057a8 <_printf_i+0x22c>
 8005780:	68e0      	ldr	r0, [r4, #12]
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	4298      	cmp	r0, r3
 8005786:	bfb8      	it	lt
 8005788:	4618      	movlt	r0, r3
 800578a:	e7a6      	b.n	80056da <_printf_i+0x15e>
 800578c:	2301      	movs	r3, #1
 800578e:	4632      	mov	r2, r6
 8005790:	4649      	mov	r1, r9
 8005792:	4640      	mov	r0, r8
 8005794:	47d0      	blx	sl
 8005796:	3001      	adds	r0, #1
 8005798:	d09d      	beq.n	80056d6 <_printf_i+0x15a>
 800579a:	3501      	adds	r5, #1
 800579c:	68e3      	ldr	r3, [r4, #12]
 800579e:	9903      	ldr	r1, [sp, #12]
 80057a0:	1a5b      	subs	r3, r3, r1
 80057a2:	42ab      	cmp	r3, r5
 80057a4:	dcf2      	bgt.n	800578c <_printf_i+0x210>
 80057a6:	e7eb      	b.n	8005780 <_printf_i+0x204>
 80057a8:	2500      	movs	r5, #0
 80057aa:	f104 0619 	add.w	r6, r4, #25
 80057ae:	e7f5      	b.n	800579c <_printf_i+0x220>
 80057b0:	08009216 	.word	0x08009216
 80057b4:	08009227 	.word	0x08009227

080057b8 <std>:
 80057b8:	2300      	movs	r3, #0
 80057ba:	b510      	push	{r4, lr}
 80057bc:	4604      	mov	r4, r0
 80057be:	e9c0 3300 	strd	r3, r3, [r0]
 80057c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057c6:	6083      	str	r3, [r0, #8]
 80057c8:	8181      	strh	r1, [r0, #12]
 80057ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80057cc:	81c2      	strh	r2, [r0, #14]
 80057ce:	6183      	str	r3, [r0, #24]
 80057d0:	4619      	mov	r1, r3
 80057d2:	2208      	movs	r2, #8
 80057d4:	305c      	adds	r0, #92	@ 0x5c
 80057d6:	f000 f916 	bl	8005a06 <memset>
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <std+0x58>)
 80057dc:	6224      	str	r4, [r4, #32]
 80057de:	6263      	str	r3, [r4, #36]	@ 0x24
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <std+0x5c>)
 80057e2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <std+0x60>)
 80057e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057e8:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <std+0x64>)
 80057ea:	6323      	str	r3, [r4, #48]	@ 0x30
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <std+0x68>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d006      	beq.n	8005800 <std+0x48>
 80057f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057f6:	4294      	cmp	r4, r2
 80057f8:	d002      	beq.n	8005800 <std+0x48>
 80057fa:	33d0      	adds	r3, #208	@ 0xd0
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d105      	bne.n	800580c <std+0x54>
 8005800:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005808:	f000 b97a 	b.w	8005b00 <__retarget_lock_init_recursive>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	08005981 	.word	0x08005981
 8005814:	080059a3 	.word	0x080059a3
 8005818:	080059db 	.word	0x080059db
 800581c:	080059ff 	.word	0x080059ff
 8005820:	20002550 	.word	0x20002550

08005824 <stdio_exit_handler>:
 8005824:	4a02      	ldr	r2, [pc, #8]	@ (8005830 <stdio_exit_handler+0xc>)
 8005826:	4903      	ldr	r1, [pc, #12]	@ (8005834 <stdio_exit_handler+0x10>)
 8005828:	4803      	ldr	r0, [pc, #12]	@ (8005838 <stdio_exit_handler+0x14>)
 800582a:	f000 b869 	b.w	8005900 <_fwalk_sglue>
 800582e:	bf00      	nop
 8005830:	20000014 	.word	0x20000014
 8005834:	08007481 	.word	0x08007481
 8005838:	20000024 	.word	0x20000024

0800583c <cleanup_stdio>:
 800583c:	6841      	ldr	r1, [r0, #4]
 800583e:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <cleanup_stdio+0x34>)
 8005840:	b510      	push	{r4, lr}
 8005842:	4299      	cmp	r1, r3
 8005844:	4604      	mov	r4, r0
 8005846:	d001      	beq.n	800584c <cleanup_stdio+0x10>
 8005848:	f001 fe1a 	bl	8007480 <_fflush_r>
 800584c:	68a1      	ldr	r1, [r4, #8]
 800584e:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <cleanup_stdio+0x38>)
 8005850:	4299      	cmp	r1, r3
 8005852:	d002      	beq.n	800585a <cleanup_stdio+0x1e>
 8005854:	4620      	mov	r0, r4
 8005856:	f001 fe13 	bl	8007480 <_fflush_r>
 800585a:	68e1      	ldr	r1, [r4, #12]
 800585c:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <cleanup_stdio+0x3c>)
 800585e:	4299      	cmp	r1, r3
 8005860:	d004      	beq.n	800586c <cleanup_stdio+0x30>
 8005862:	4620      	mov	r0, r4
 8005864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005868:	f001 be0a 	b.w	8007480 <_fflush_r>
 800586c:	bd10      	pop	{r4, pc}
 800586e:	bf00      	nop
 8005870:	20002550 	.word	0x20002550
 8005874:	200025b8 	.word	0x200025b8
 8005878:	20002620 	.word	0x20002620

0800587c <global_stdio_init.part.0>:
 800587c:	b510      	push	{r4, lr}
 800587e:	4b0b      	ldr	r3, [pc, #44]	@ (80058ac <global_stdio_init.part.0+0x30>)
 8005880:	4c0b      	ldr	r4, [pc, #44]	@ (80058b0 <global_stdio_init.part.0+0x34>)
 8005882:	4a0c      	ldr	r2, [pc, #48]	@ (80058b4 <global_stdio_init.part.0+0x38>)
 8005884:	4620      	mov	r0, r4
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	2104      	movs	r1, #4
 800588a:	2200      	movs	r2, #0
 800588c:	f7ff ff94 	bl	80057b8 <std>
 8005890:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005894:	2201      	movs	r2, #1
 8005896:	2109      	movs	r1, #9
 8005898:	f7ff ff8e 	bl	80057b8 <std>
 800589c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058a0:	2202      	movs	r2, #2
 80058a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a6:	2112      	movs	r1, #18
 80058a8:	f7ff bf86 	b.w	80057b8 <std>
 80058ac:	20002688 	.word	0x20002688
 80058b0:	20002550 	.word	0x20002550
 80058b4:	08005825 	.word	0x08005825

080058b8 <__sfp_lock_acquire>:
 80058b8:	4801      	ldr	r0, [pc, #4]	@ (80058c0 <__sfp_lock_acquire+0x8>)
 80058ba:	f000 b922 	b.w	8005b02 <__retarget_lock_acquire_recursive>
 80058be:	bf00      	nop
 80058c0:	20002691 	.word	0x20002691

080058c4 <__sfp_lock_release>:
 80058c4:	4801      	ldr	r0, [pc, #4]	@ (80058cc <__sfp_lock_release+0x8>)
 80058c6:	f000 b91d 	b.w	8005b04 <__retarget_lock_release_recursive>
 80058ca:	bf00      	nop
 80058cc:	20002691 	.word	0x20002691

080058d0 <__sinit>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	4604      	mov	r4, r0
 80058d4:	f7ff fff0 	bl	80058b8 <__sfp_lock_acquire>
 80058d8:	6a23      	ldr	r3, [r4, #32]
 80058da:	b11b      	cbz	r3, 80058e4 <__sinit+0x14>
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	f7ff bff0 	b.w	80058c4 <__sfp_lock_release>
 80058e4:	4b04      	ldr	r3, [pc, #16]	@ (80058f8 <__sinit+0x28>)
 80058e6:	6223      	str	r3, [r4, #32]
 80058e8:	4b04      	ldr	r3, [pc, #16]	@ (80058fc <__sinit+0x2c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f5      	bne.n	80058dc <__sinit+0xc>
 80058f0:	f7ff ffc4 	bl	800587c <global_stdio_init.part.0>
 80058f4:	e7f2      	b.n	80058dc <__sinit+0xc>
 80058f6:	bf00      	nop
 80058f8:	0800583d 	.word	0x0800583d
 80058fc:	20002688 	.word	0x20002688

08005900 <_fwalk_sglue>:
 8005900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005904:	4607      	mov	r7, r0
 8005906:	4688      	mov	r8, r1
 8005908:	4614      	mov	r4, r2
 800590a:	2600      	movs	r6, #0
 800590c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005910:	f1b9 0901 	subs.w	r9, r9, #1
 8005914:	d505      	bpl.n	8005922 <_fwalk_sglue+0x22>
 8005916:	6824      	ldr	r4, [r4, #0]
 8005918:	2c00      	cmp	r4, #0
 800591a:	d1f7      	bne.n	800590c <_fwalk_sglue+0xc>
 800591c:	4630      	mov	r0, r6
 800591e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005922:	89ab      	ldrh	r3, [r5, #12]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d907      	bls.n	8005938 <_fwalk_sglue+0x38>
 8005928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800592c:	3301      	adds	r3, #1
 800592e:	d003      	beq.n	8005938 <_fwalk_sglue+0x38>
 8005930:	4629      	mov	r1, r5
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	4306      	orrs	r6, r0
 8005938:	3568      	adds	r5, #104	@ 0x68
 800593a:	e7e9      	b.n	8005910 <_fwalk_sglue+0x10>

0800593c <siprintf>:
 800593c:	b40e      	push	{r1, r2, r3}
 800593e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005942:	b510      	push	{r4, lr}
 8005944:	2400      	movs	r4, #0
 8005946:	b09d      	sub	sp, #116	@ 0x74
 8005948:	ab1f      	add	r3, sp, #124	@ 0x7c
 800594a:	9002      	str	r0, [sp, #8]
 800594c:	9006      	str	r0, [sp, #24]
 800594e:	9107      	str	r1, [sp, #28]
 8005950:	9104      	str	r1, [sp, #16]
 8005952:	4809      	ldr	r0, [pc, #36]	@ (8005978 <siprintf+0x3c>)
 8005954:	4909      	ldr	r1, [pc, #36]	@ (800597c <siprintf+0x40>)
 8005956:	f853 2b04 	ldr.w	r2, [r3], #4
 800595a:	9105      	str	r1, [sp, #20]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	a902      	add	r1, sp, #8
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005964:	f001 fc10 	bl	8007188 <_svfiprintf_r>
 8005968:	9b02      	ldr	r3, [sp, #8]
 800596a:	701c      	strb	r4, [r3, #0]
 800596c:	b01d      	add	sp, #116	@ 0x74
 800596e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005972:	b003      	add	sp, #12
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000020 	.word	0x20000020
 800597c:	ffff0208 	.word	0xffff0208

08005980 <__sread>:
 8005980:	b510      	push	{r4, lr}
 8005982:	460c      	mov	r4, r1
 8005984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005988:	f000 f86c 	bl	8005a64 <_read_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	bfab      	itete	ge
 8005990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005992:	89a3      	ldrhlt	r3, [r4, #12]
 8005994:	181b      	addge	r3, r3, r0
 8005996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800599a:	bfac      	ite	ge
 800599c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800599e:	81a3      	strhlt	r3, [r4, #12]
 80059a0:	bd10      	pop	{r4, pc}

080059a2 <__swrite>:
 80059a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a6:	461f      	mov	r7, r3
 80059a8:	898b      	ldrh	r3, [r1, #12]
 80059aa:	4605      	mov	r5, r0
 80059ac:	05db      	lsls	r3, r3, #23
 80059ae:	460c      	mov	r4, r1
 80059b0:	4616      	mov	r6, r2
 80059b2:	d505      	bpl.n	80059c0 <__swrite+0x1e>
 80059b4:	2302      	movs	r3, #2
 80059b6:	2200      	movs	r2, #0
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	f000 f840 	bl	8005a40 <_lseek_r>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	4632      	mov	r2, r6
 80059c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	4628      	mov	r0, r5
 80059cc:	463b      	mov	r3, r7
 80059ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	f000 b857 	b.w	8005a88 <_write_r>

080059da <__sseek>:
 80059da:	b510      	push	{r4, lr}
 80059dc:	460c      	mov	r4, r1
 80059de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e2:	f000 f82d 	bl	8005a40 <_lseek_r>
 80059e6:	1c43      	adds	r3, r0, #1
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	bf15      	itete	ne
 80059ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059f6:	81a3      	strheq	r3, [r4, #12]
 80059f8:	bf18      	it	ne
 80059fa:	81a3      	strhne	r3, [r4, #12]
 80059fc:	bd10      	pop	{r4, pc}

080059fe <__sclose>:
 80059fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a02:	f000 b80d 	b.w	8005a20 <_close_r>

08005a06 <memset>:
 8005a06:	4603      	mov	r3, r0
 8005a08:	4402      	add	r2, r0
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d100      	bne.n	8005a10 <memset+0xa>
 8005a0e:	4770      	bx	lr
 8005a10:	f803 1b01 	strb.w	r1, [r3], #1
 8005a14:	e7f9      	b.n	8005a0a <memset+0x4>
	...

08005a18 <_localeconv_r>:
 8005a18:	4800      	ldr	r0, [pc, #0]	@ (8005a1c <_localeconv_r+0x4>)
 8005a1a:	4770      	bx	lr
 8005a1c:	20000160 	.word	0x20000160

08005a20 <_close_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	2300      	movs	r3, #0
 8005a24:	4d05      	ldr	r5, [pc, #20]	@ (8005a3c <_close_r+0x1c>)
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	f7fc f82f 	bl	8001a8e <_close>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_close_r+0x1a>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_close_r+0x1a>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	2000268c 	.word	0x2000268c

08005a40 <_lseek_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	4611      	mov	r1, r2
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4d05      	ldr	r5, [pc, #20]	@ (8005a60 <_lseek_r+0x20>)
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7fc f841 	bl	8001ad6 <_lseek>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_lseek_r+0x1e>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_lseek_r+0x1e>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	2000268c 	.word	0x2000268c

08005a64 <_read_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4d05      	ldr	r5, [pc, #20]	@ (8005a84 <_read_r+0x20>)
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f7fb ffd2 	bl	8001a1c <_read>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_read_r+0x1e>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_read_r+0x1e>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	2000268c 	.word	0x2000268c

08005a88 <_write_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	2200      	movs	r2, #0
 8005a92:	4d05      	ldr	r5, [pc, #20]	@ (8005aa8 <_write_r+0x20>)
 8005a94:	602a      	str	r2, [r5, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f7fb ffdd 	bl	8001a56 <_write>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_write_r+0x1e>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_write_r+0x1e>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	2000268c 	.word	0x2000268c

08005aac <__errno>:
 8005aac:	4b01      	ldr	r3, [pc, #4]	@ (8005ab4 <__errno+0x8>)
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000020 	.word	0x20000020

08005ab8 <__libc_init_array>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	2600      	movs	r6, #0
 8005abc:	4d0c      	ldr	r5, [pc, #48]	@ (8005af0 <__libc_init_array+0x38>)
 8005abe:	4c0d      	ldr	r4, [pc, #52]	@ (8005af4 <__libc_init_array+0x3c>)
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	d109      	bne.n	8005adc <__libc_init_array+0x24>
 8005ac8:	f002 ffa4 	bl	8008a14 <_init>
 8005acc:	2600      	movs	r6, #0
 8005ace:	4d0a      	ldr	r5, [pc, #40]	@ (8005af8 <__libc_init_array+0x40>)
 8005ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8005afc <__libc_init_array+0x44>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	42a6      	cmp	r6, r4
 8005ad8:	d105      	bne.n	8005ae6 <__libc_init_array+0x2e>
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae0:	4798      	blx	r3
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7ee      	b.n	8005ac4 <__libc_init_array+0xc>
 8005ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aea:	4798      	blx	r3
 8005aec:	3601      	adds	r6, #1
 8005aee:	e7f2      	b.n	8005ad6 <__libc_init_array+0x1e>
 8005af0:	080095c8 	.word	0x080095c8
 8005af4:	080095c8 	.word	0x080095c8
 8005af8:	080095c8 	.word	0x080095c8
 8005afc:	080095cc 	.word	0x080095cc

08005b00 <__retarget_lock_init_recursive>:
 8005b00:	4770      	bx	lr

08005b02 <__retarget_lock_acquire_recursive>:
 8005b02:	4770      	bx	lr

08005b04 <__retarget_lock_release_recursive>:
 8005b04:	4770      	bx	lr

08005b06 <memchr>:
 8005b06:	4603      	mov	r3, r0
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	b2c9      	uxtb	r1, r1
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	d101      	bne.n	8005b18 <memchr+0x12>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e003      	b.n	8005b20 <memchr+0x1a>
 8005b18:	7804      	ldrb	r4, [r0, #0]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	428c      	cmp	r4, r1
 8005b1e:	d1f6      	bne.n	8005b0e <memchr+0x8>
 8005b20:	bd10      	pop	{r4, pc}

08005b22 <quorem>:
 8005b22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	6903      	ldr	r3, [r0, #16]
 8005b28:	690c      	ldr	r4, [r1, #16]
 8005b2a:	4607      	mov	r7, r0
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	db7e      	blt.n	8005c2e <quorem+0x10c>
 8005b30:	3c01      	subs	r4, #1
 8005b32:	00a3      	lsls	r3, r4, #2
 8005b34:	f100 0514 	add.w	r5, r0, #20
 8005b38:	f101 0814 	add.w	r8, r1, #20
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b58:	d32e      	bcc.n	8005bb8 <quorem+0x96>
 8005b5a:	f04f 0a00 	mov.w	sl, #0
 8005b5e:	46c4      	mov	ip, r8
 8005b60:	46ae      	mov	lr, r5
 8005b62:	46d3      	mov	fp, sl
 8005b64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b68:	b298      	uxth	r0, r3
 8005b6a:	fb06 a000 	mla	r0, r6, r0, sl
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	0c02      	lsrs	r2, r0, #16
 8005b72:	fb06 2303 	mla	r3, r6, r3, r2
 8005b76:	f8de 2000 	ldr.w	r2, [lr]
 8005b7a:	b280      	uxth	r0, r0
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	1a12      	subs	r2, r2, r0
 8005b80:	445a      	add	r2, fp
 8005b82:	f8de 0000 	ldr.w	r0, [lr]
 8005b86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b94:	b292      	uxth	r2, r2
 8005b96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b9a:	45e1      	cmp	r9, ip
 8005b9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ba0:	f84e 2b04 	str.w	r2, [lr], #4
 8005ba4:	d2de      	bcs.n	8005b64 <quorem+0x42>
 8005ba6:	9b00      	ldr	r3, [sp, #0]
 8005ba8:	58eb      	ldr	r3, [r5, r3]
 8005baa:	b92b      	cbnz	r3, 8005bb8 <quorem+0x96>
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	3b04      	subs	r3, #4
 8005bb0:	429d      	cmp	r5, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	d32f      	bcc.n	8005c16 <quorem+0xf4>
 8005bb6:	613c      	str	r4, [r7, #16]
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f001 f981 	bl	8006ec0 <__mcmp>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	db25      	blt.n	8005c0e <quorem+0xec>
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bca:	f8d1 c000 	ldr.w	ip, [r1]
 8005bce:	fa1f fe82 	uxth.w	lr, r2
 8005bd2:	fa1f f38c 	uxth.w	r3, ip
 8005bd6:	eba3 030e 	sub.w	r3, r3, lr
 8005bda:	4403      	add	r3, r0
 8005bdc:	0c12      	lsrs	r2, r2, #16
 8005bde:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005be2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bec:	45c1      	cmp	r9, r8
 8005bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bf2:	f841 3b04 	str.w	r3, [r1], #4
 8005bf6:	d2e6      	bcs.n	8005bc6 <quorem+0xa4>
 8005bf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c00:	b922      	cbnz	r2, 8005c0c <quorem+0xea>
 8005c02:	3b04      	subs	r3, #4
 8005c04:	429d      	cmp	r5, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	d30b      	bcc.n	8005c22 <quorem+0x100>
 8005c0a:	613c      	str	r4, [r7, #16]
 8005c0c:	3601      	adds	r6, #1
 8005c0e:	4630      	mov	r0, r6
 8005c10:	b003      	add	sp, #12
 8005c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d1cb      	bne.n	8005bb6 <quorem+0x94>
 8005c1e:	3c01      	subs	r4, #1
 8005c20:	e7c6      	b.n	8005bb0 <quorem+0x8e>
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	3b04      	subs	r3, #4
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	d1ef      	bne.n	8005c0a <quorem+0xe8>
 8005c2a:	3c01      	subs	r4, #1
 8005c2c:	e7ea      	b.n	8005c04 <quorem+0xe2>
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7ee      	b.n	8005c10 <quorem+0xee>
 8005c32:	0000      	movs	r0, r0
 8005c34:	0000      	movs	r0, r0
	...

08005c38 <_dtoa_r>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	461d      	mov	r5, r3
 8005c40:	69c7      	ldr	r7, [r0, #28]
 8005c42:	b097      	sub	sp, #92	@ 0x5c
 8005c44:	4681      	mov	r9, r0
 8005c46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005c4a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c4c:	b97f      	cbnz	r7, 8005c6e <_dtoa_r+0x36>
 8005c4e:	2010      	movs	r0, #16
 8005c50:	f000 fe0e 	bl	8006870 <malloc>
 8005c54:	4602      	mov	r2, r0
 8005c56:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c5a:	b920      	cbnz	r0, 8005c66 <_dtoa_r+0x2e>
 8005c5c:	21ef      	movs	r1, #239	@ 0xef
 8005c5e:	4bac      	ldr	r3, [pc, #688]	@ (8005f10 <_dtoa_r+0x2d8>)
 8005c60:	48ac      	ldr	r0, [pc, #688]	@ (8005f14 <_dtoa_r+0x2dc>)
 8005c62:	f001 fc6d 	bl	8007540 <__assert_func>
 8005c66:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c6a:	6007      	str	r7, [r0, #0]
 8005c6c:	60c7      	str	r7, [r0, #12]
 8005c6e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	b159      	cbz	r1, 8005c8e <_dtoa_r+0x56>
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4093      	lsls	r3, r2
 8005c7c:	604a      	str	r2, [r1, #4]
 8005c7e:	608b      	str	r3, [r1, #8]
 8005c80:	4648      	mov	r0, r9
 8005c82:	f000 feeb 	bl	8006a5c <_Bfree>
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	1e2b      	subs	r3, r5, #0
 8005c90:	bfaf      	iteee	ge
 8005c92:	2300      	movge	r3, #0
 8005c94:	2201      	movlt	r2, #1
 8005c96:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c9a:	9307      	strlt	r3, [sp, #28]
 8005c9c:	bfa8      	it	ge
 8005c9e:	6033      	strge	r3, [r6, #0]
 8005ca0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8005f18 <_dtoa_r+0x2e0>)
 8005ca6:	bfb8      	it	lt
 8005ca8:	6032      	strlt	r2, [r6, #0]
 8005caa:	ea33 0308 	bics.w	r3, r3, r8
 8005cae:	d112      	bne.n	8005cd6 <_dtoa_r+0x9e>
 8005cb0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cb4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005cbc:	4323      	orrs	r3, r4
 8005cbe:	f000 855e 	beq.w	800677e <_dtoa_r+0xb46>
 8005cc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f1c <_dtoa_r+0x2e4>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8560 	beq.w	800678e <_dtoa_r+0xb56>
 8005cce:	f10a 0303 	add.w	r3, sl, #3
 8005cd2:	f000 bd5a 	b.w	800678a <_dtoa_r+0xb52>
 8005cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cda:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f7fa fe5f 	bl	80009a8 <__aeabi_dcmpeq>
 8005cea:	4607      	mov	r7, r0
 8005cec:	b158      	cbz	r0, 8005d06 <_dtoa_r+0xce>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cf6:	b113      	cbz	r3, 8005cfe <_dtoa_r+0xc6>
 8005cf8:	4b89      	ldr	r3, [pc, #548]	@ (8005f20 <_dtoa_r+0x2e8>)
 8005cfa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005f24 <_dtoa_r+0x2ec>
 8005d02:	f000 bd44 	b.w	800678e <_dtoa_r+0xb56>
 8005d06:	ab14      	add	r3, sp, #80	@ 0x50
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	ab15      	add	r3, sp, #84	@ 0x54
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	4648      	mov	r0, r9
 8005d10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d14:	f001 f984 	bl	8007020 <__d2b>
 8005d18:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005d1c:	9003      	str	r0, [sp, #12]
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	d078      	beq.n	8005e14 <_dtoa_r+0x1dc>
 8005d22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d28:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d30:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d34:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d38:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005f28 <_dtoa_r+0x2f0>)
 8005d40:	f7fa fa12 	bl	8000168 <__aeabi_dsub>
 8005d44:	a36c      	add	r3, pc, #432	@ (adr r3, 8005ef8 <_dtoa_r+0x2c0>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fbc5 	bl	80004d8 <__aeabi_dmul>
 8005d4e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005f00 <_dtoa_r+0x2c8>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fa0a 	bl	800016c <__adddf3>
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	f7fa fb51 	bl	8000404 <__aeabi_i2d>
 8005d62:	a369      	add	r3, pc, #420	@ (adr r3, 8005f08 <_dtoa_r+0x2d0>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f7fa fbb6 	bl	80004d8 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	f7fa f9fa 	bl	800016c <__adddf3>
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	f7fa fe5c 	bl	8000a38 <__aeabi_d2iz>
 8005d80:	2200      	movs	r2, #0
 8005d82:	4607      	mov	r7, r0
 8005d84:	2300      	movs	r3, #0
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa fe17 	bl	80009bc <__aeabi_dcmplt>
 8005d8e:	b140      	cbz	r0, 8005da2 <_dtoa_r+0x16a>
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7fa fb37 	bl	8000404 <__aeabi_i2d>
 8005d96:	4622      	mov	r2, r4
 8005d98:	462b      	mov	r3, r5
 8005d9a:	f7fa fe05 	bl	80009a8 <__aeabi_dcmpeq>
 8005d9e:	b900      	cbnz	r0, 8005da2 <_dtoa_r+0x16a>
 8005da0:	3f01      	subs	r7, #1
 8005da2:	2f16      	cmp	r7, #22
 8005da4:	d854      	bhi.n	8005e50 <_dtoa_r+0x218>
 8005da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005daa:	4b60      	ldr	r3, [pc, #384]	@ (8005f2c <_dtoa_r+0x2f4>)
 8005dac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f7fa fe02 	bl	80009bc <__aeabi_dcmplt>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d04b      	beq.n	8005e54 <_dtoa_r+0x21c>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	3f01      	subs	r7, #1
 8005dc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005dc4:	1b9b      	subs	r3, r3, r6
 8005dc6:	1e5a      	subs	r2, r3, #1
 8005dc8:	bf49      	itett	mi
 8005dca:	f1c3 0301 	rsbmi	r3, r3, #1
 8005dce:	2300      	movpl	r3, #0
 8005dd0:	9304      	strmi	r3, [sp, #16]
 8005dd2:	2300      	movmi	r3, #0
 8005dd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dd6:	bf54      	ite	pl
 8005dd8:	9304      	strpl	r3, [sp, #16]
 8005dda:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005ddc:	2f00      	cmp	r7, #0
 8005dde:	db3b      	blt.n	8005e58 <_dtoa_r+0x220>
 8005de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de2:	970e      	str	r7, [sp, #56]	@ 0x38
 8005de4:	443b      	add	r3, r7
 8005de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de8:	2300      	movs	r3, #0
 8005dea:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dee:	2b09      	cmp	r3, #9
 8005df0:	d865      	bhi.n	8005ebe <_dtoa_r+0x286>
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	bfc4      	itt	gt
 8005df6:	3b04      	subgt	r3, #4
 8005df8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005dfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dfc:	bfc8      	it	gt
 8005dfe:	2400      	movgt	r4, #0
 8005e00:	f1a3 0302 	sub.w	r3, r3, #2
 8005e04:	bfd8      	it	le
 8005e06:	2401      	movle	r4, #1
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d864      	bhi.n	8005ed6 <_dtoa_r+0x29e>
 8005e0c:	e8df f003 	tbb	[pc, r3]
 8005e10:	2c385553 	.word	0x2c385553
 8005e14:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e18:	441e      	add	r6, r3
 8005e1a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	bfc1      	itttt	gt
 8005e22:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e26:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e32:	bfd6      	itet	le
 8005e34:	f1c3 0320 	rsble	r3, r3, #32
 8005e38:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e3c:	fa04 f003 	lslle.w	r0, r4, r3
 8005e40:	f7fa fad0 	bl	80003e4 <__aeabi_ui2d>
 8005e44:	2201      	movs	r2, #1
 8005e46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e4a:	3e01      	subs	r6, #1
 8005e4c:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e4e:	e774      	b.n	8005d3a <_dtoa_r+0x102>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e7b5      	b.n	8005dc0 <_dtoa_r+0x188>
 8005e54:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e56:	e7b4      	b.n	8005dc2 <_dtoa_r+0x18a>
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	1bdb      	subs	r3, r3, r7
 8005e5c:	9304      	str	r3, [sp, #16]
 8005e5e:	427b      	negs	r3, r7
 8005e60:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e62:	2300      	movs	r3, #0
 8005e64:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e66:	e7c1      	b.n	8005dec <_dtoa_r+0x1b4>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e6e:	eb07 0b03 	add.w	fp, r7, r3
 8005e72:	f10b 0301 	add.w	r3, fp, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	9308      	str	r3, [sp, #32]
 8005e7a:	bfb8      	it	lt
 8005e7c:	2301      	movlt	r3, #1
 8005e7e:	e006      	b.n	8005e8e <_dtoa_r+0x256>
 8005e80:	2301      	movs	r3, #1
 8005e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	dd28      	ble.n	8005edc <_dtoa_r+0x2a4>
 8005e8a:	469b      	mov	fp, r3
 8005e8c:	9308      	str	r3, [sp, #32]
 8005e8e:	2100      	movs	r1, #0
 8005e90:	2204      	movs	r2, #4
 8005e92:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005e96:	f102 0514 	add.w	r5, r2, #20
 8005e9a:	429d      	cmp	r5, r3
 8005e9c:	d926      	bls.n	8005eec <_dtoa_r+0x2b4>
 8005e9e:	6041      	str	r1, [r0, #4]
 8005ea0:	4648      	mov	r0, r9
 8005ea2:	f000 fd9b 	bl	80069dc <_Balloc>
 8005ea6:	4682      	mov	sl, r0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d143      	bne.n	8005f34 <_dtoa_r+0x2fc>
 8005eac:	4602      	mov	r2, r0
 8005eae:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005f30 <_dtoa_r+0x2f8>)
 8005eb4:	e6d4      	b.n	8005c60 <_dtoa_r+0x28>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e7e3      	b.n	8005e82 <_dtoa_r+0x24a>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e7d5      	b.n	8005e6a <_dtoa_r+0x232>
 8005ebe:	2401      	movs	r4, #1
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ec4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ec6:	f04f 3bff 	mov.w	fp, #4294967295
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2312      	movs	r3, #18
 8005ece:	f8cd b020 	str.w	fp, [sp, #32]
 8005ed2:	9221      	str	r2, [sp, #132]	@ 0x84
 8005ed4:	e7db      	b.n	8005e8e <_dtoa_r+0x256>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eda:	e7f4      	b.n	8005ec6 <_dtoa_r+0x28e>
 8005edc:	f04f 0b01 	mov.w	fp, #1
 8005ee0:	465b      	mov	r3, fp
 8005ee2:	f8cd b020 	str.w	fp, [sp, #32]
 8005ee6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005eea:	e7d0      	b.n	8005e8e <_dtoa_r+0x256>
 8005eec:	3101      	adds	r1, #1
 8005eee:	0052      	lsls	r2, r2, #1
 8005ef0:	e7d1      	b.n	8005e96 <_dtoa_r+0x25e>
 8005ef2:	bf00      	nop
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	636f4361 	.word	0x636f4361
 8005efc:	3fd287a7 	.word	0x3fd287a7
 8005f00:	8b60c8b3 	.word	0x8b60c8b3
 8005f04:	3fc68a28 	.word	0x3fc68a28
 8005f08:	509f79fb 	.word	0x509f79fb
 8005f0c:	3fd34413 	.word	0x3fd34413
 8005f10:	08009245 	.word	0x08009245
 8005f14:	0800925c 	.word	0x0800925c
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	08009241 	.word	0x08009241
 8005f20:	08009215 	.word	0x08009215
 8005f24:	08009214 	.word	0x08009214
 8005f28:	3ff80000 	.word	0x3ff80000
 8005f2c:	080093b0 	.word	0x080093b0
 8005f30:	080092b4 	.word	0x080092b4
 8005f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f38:	6018      	str	r0, [r3, #0]
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	2b0e      	cmp	r3, #14
 8005f3e:	f200 80a1 	bhi.w	8006084 <_dtoa_r+0x44c>
 8005f42:	2c00      	cmp	r4, #0
 8005f44:	f000 809e 	beq.w	8006084 <_dtoa_r+0x44c>
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	dd33      	ble.n	8005fb4 <_dtoa_r+0x37c>
 8005f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80061c0 <_dtoa_r+0x588>)
 8005f4e:	f007 020f 	and.w	r2, r7, #15
 8005f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f56:	05f8      	lsls	r0, r7, #23
 8005f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005f60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f64:	d516      	bpl.n	8005f94 <_dtoa_r+0x35c>
 8005f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f6a:	4b96      	ldr	r3, [pc, #600]	@ (80061c4 <_dtoa_r+0x58c>)
 8005f6c:	2603      	movs	r6, #3
 8005f6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f72:	f7fa fbdb 	bl	800072c <__aeabi_ddiv>
 8005f76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f7a:	f004 040f 	and.w	r4, r4, #15
 8005f7e:	4d91      	ldr	r5, [pc, #580]	@ (80061c4 <_dtoa_r+0x58c>)
 8005f80:	b954      	cbnz	r4, 8005f98 <_dtoa_r+0x360>
 8005f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8a:	f7fa fbcf 	bl	800072c <__aeabi_ddiv>
 8005f8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f92:	e028      	b.n	8005fe6 <_dtoa_r+0x3ae>
 8005f94:	2602      	movs	r6, #2
 8005f96:	e7f2      	b.n	8005f7e <_dtoa_r+0x346>
 8005f98:	07e1      	lsls	r1, r4, #31
 8005f9a:	d508      	bpl.n	8005fae <_dtoa_r+0x376>
 8005f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fa4:	f7fa fa98 	bl	80004d8 <__aeabi_dmul>
 8005fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fac:	3601      	adds	r6, #1
 8005fae:	1064      	asrs	r4, r4, #1
 8005fb0:	3508      	adds	r5, #8
 8005fb2:	e7e5      	b.n	8005f80 <_dtoa_r+0x348>
 8005fb4:	f000 80af 	beq.w	8006116 <_dtoa_r+0x4de>
 8005fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fbc:	427c      	negs	r4, r7
 8005fbe:	4b80      	ldr	r3, [pc, #512]	@ (80061c0 <_dtoa_r+0x588>)
 8005fc0:	f004 020f 	and.w	r2, r4, #15
 8005fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f7fa fa84 	bl	80004d8 <__aeabi_dmul>
 8005fd0:	2602      	movs	r6, #2
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fd8:	4d7a      	ldr	r5, [pc, #488]	@ (80061c4 <_dtoa_r+0x58c>)
 8005fda:	1124      	asrs	r4, r4, #4
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	f040 808f 	bne.w	8006100 <_dtoa_r+0x4c8>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d3      	bne.n	8005f8e <_dtoa_r+0x356>
 8005fe6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8094 	beq.w	800611a <_dtoa_r+0x4e2>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4b73      	ldr	r3, [pc, #460]	@ (80061c8 <_dtoa_r+0x590>)
 8005ffa:	f7fa fcdf 	bl	80009bc <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f000 808b 	beq.w	800611a <_dtoa_r+0x4e2>
 8006004:	9b08      	ldr	r3, [sp, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8087 	beq.w	800611a <_dtoa_r+0x4e2>
 800600c:	f1bb 0f00 	cmp.w	fp, #0
 8006010:	dd34      	ble.n	800607c <_dtoa_r+0x444>
 8006012:	4620      	mov	r0, r4
 8006014:	2200      	movs	r2, #0
 8006016:	4629      	mov	r1, r5
 8006018:	4b6c      	ldr	r3, [pc, #432]	@ (80061cc <_dtoa_r+0x594>)
 800601a:	f7fa fa5d 	bl	80004d8 <__aeabi_dmul>
 800601e:	465c      	mov	r4, fp
 8006020:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006024:	f107 38ff 	add.w	r8, r7, #4294967295
 8006028:	3601      	adds	r6, #1
 800602a:	4630      	mov	r0, r6
 800602c:	f7fa f9ea 	bl	8000404 <__aeabi_i2d>
 8006030:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006034:	f7fa fa50 	bl	80004d8 <__aeabi_dmul>
 8006038:	2200      	movs	r2, #0
 800603a:	4b65      	ldr	r3, [pc, #404]	@ (80061d0 <_dtoa_r+0x598>)
 800603c:	f7fa f896 	bl	800016c <__adddf3>
 8006040:	4605      	mov	r5, r0
 8006042:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006046:	2c00      	cmp	r4, #0
 8006048:	d16a      	bne.n	8006120 <_dtoa_r+0x4e8>
 800604a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800604e:	2200      	movs	r2, #0
 8006050:	4b60      	ldr	r3, [pc, #384]	@ (80061d4 <_dtoa_r+0x59c>)
 8006052:	f7fa f889 	bl	8000168 <__aeabi_dsub>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800605e:	462a      	mov	r2, r5
 8006060:	4633      	mov	r3, r6
 8006062:	f7fa fcc9 	bl	80009f8 <__aeabi_dcmpgt>
 8006066:	2800      	cmp	r0, #0
 8006068:	f040 8298 	bne.w	800659c <_dtoa_r+0x964>
 800606c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006070:	462a      	mov	r2, r5
 8006072:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006076:	f7fa fca1 	bl	80009bc <__aeabi_dcmplt>
 800607a:	bb38      	cbnz	r0, 80060cc <_dtoa_r+0x494>
 800607c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006080:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006084:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006086:	2b00      	cmp	r3, #0
 8006088:	f2c0 8157 	blt.w	800633a <_dtoa_r+0x702>
 800608c:	2f0e      	cmp	r7, #14
 800608e:	f300 8154 	bgt.w	800633a <_dtoa_r+0x702>
 8006092:	4b4b      	ldr	r3, [pc, #300]	@ (80061c0 <_dtoa_r+0x588>)
 8006094:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006098:	e9d3 3400 	ldrd	r3, r4, [r3]
 800609c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f280 80e5 	bge.w	8006272 <_dtoa_r+0x63a>
 80060a8:	9b08      	ldr	r3, [sp, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f300 80e1 	bgt.w	8006272 <_dtoa_r+0x63a>
 80060b0:	d10c      	bne.n	80060cc <_dtoa_r+0x494>
 80060b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b6:	2200      	movs	r2, #0
 80060b8:	4b46      	ldr	r3, [pc, #280]	@ (80061d4 <_dtoa_r+0x59c>)
 80060ba:	f7fa fa0d 	bl	80004d8 <__aeabi_dmul>
 80060be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060c2:	f7fa fc8f 	bl	80009e4 <__aeabi_dcmpge>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f000 8266 	beq.w	8006598 <_dtoa_r+0x960>
 80060cc:	2400      	movs	r4, #0
 80060ce:	4625      	mov	r5, r4
 80060d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060d2:	4656      	mov	r6, sl
 80060d4:	ea6f 0803 	mvn.w	r8, r3
 80060d8:	2700      	movs	r7, #0
 80060da:	4621      	mov	r1, r4
 80060dc:	4648      	mov	r0, r9
 80060de:	f000 fcbd 	bl	8006a5c <_Bfree>
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	f000 80bd 	beq.w	8006262 <_dtoa_r+0x62a>
 80060e8:	b12f      	cbz	r7, 80060f6 <_dtoa_r+0x4be>
 80060ea:	42af      	cmp	r7, r5
 80060ec:	d003      	beq.n	80060f6 <_dtoa_r+0x4be>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4648      	mov	r0, r9
 80060f2:	f000 fcb3 	bl	8006a5c <_Bfree>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4648      	mov	r0, r9
 80060fa:	f000 fcaf 	bl	8006a5c <_Bfree>
 80060fe:	e0b0      	b.n	8006262 <_dtoa_r+0x62a>
 8006100:	07e2      	lsls	r2, r4, #31
 8006102:	d505      	bpl.n	8006110 <_dtoa_r+0x4d8>
 8006104:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006108:	f7fa f9e6 	bl	80004d8 <__aeabi_dmul>
 800610c:	2301      	movs	r3, #1
 800610e:	3601      	adds	r6, #1
 8006110:	1064      	asrs	r4, r4, #1
 8006112:	3508      	adds	r5, #8
 8006114:	e762      	b.n	8005fdc <_dtoa_r+0x3a4>
 8006116:	2602      	movs	r6, #2
 8006118:	e765      	b.n	8005fe6 <_dtoa_r+0x3ae>
 800611a:	46b8      	mov	r8, r7
 800611c:	9c08      	ldr	r4, [sp, #32]
 800611e:	e784      	b.n	800602a <_dtoa_r+0x3f2>
 8006120:	4b27      	ldr	r3, [pc, #156]	@ (80061c0 <_dtoa_r+0x588>)
 8006122:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800612c:	4454      	add	r4, sl
 800612e:	2900      	cmp	r1, #0
 8006130:	d054      	beq.n	80061dc <_dtoa_r+0x5a4>
 8006132:	2000      	movs	r0, #0
 8006134:	4928      	ldr	r1, [pc, #160]	@ (80061d8 <_dtoa_r+0x5a0>)
 8006136:	f7fa faf9 	bl	800072c <__aeabi_ddiv>
 800613a:	4633      	mov	r3, r6
 800613c:	462a      	mov	r2, r5
 800613e:	f7fa f813 	bl	8000168 <__aeabi_dsub>
 8006142:	4656      	mov	r6, sl
 8006144:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800614c:	f7fa fc74 	bl	8000a38 <__aeabi_d2iz>
 8006150:	4605      	mov	r5, r0
 8006152:	f7fa f957 	bl	8000404 <__aeabi_i2d>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800615e:	f7fa f803 	bl	8000168 <__aeabi_dsub>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	3530      	adds	r5, #48	@ 0x30
 8006168:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800616c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006170:	f806 5b01 	strb.w	r5, [r6], #1
 8006174:	f7fa fc22 	bl	80009bc <__aeabi_dcmplt>
 8006178:	2800      	cmp	r0, #0
 800617a:	d172      	bne.n	8006262 <_dtoa_r+0x62a>
 800617c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006180:	2000      	movs	r0, #0
 8006182:	4911      	ldr	r1, [pc, #68]	@ (80061c8 <_dtoa_r+0x590>)
 8006184:	f7f9 fff0 	bl	8000168 <__aeabi_dsub>
 8006188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800618c:	f7fa fc16 	bl	80009bc <__aeabi_dcmplt>
 8006190:	2800      	cmp	r0, #0
 8006192:	f040 80b4 	bne.w	80062fe <_dtoa_r+0x6c6>
 8006196:	42a6      	cmp	r6, r4
 8006198:	f43f af70 	beq.w	800607c <_dtoa_r+0x444>
 800619c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061a0:	2200      	movs	r2, #0
 80061a2:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <_dtoa_r+0x594>)
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	2200      	movs	r2, #0
 80061aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <_dtoa_r+0x594>)
 80061b4:	f7fa f990 	bl	80004d8 <__aeabi_dmul>
 80061b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061bc:	e7c4      	b.n	8006148 <_dtoa_r+0x510>
 80061be:	bf00      	nop
 80061c0:	080093b0 	.word	0x080093b0
 80061c4:	08009388 	.word	0x08009388
 80061c8:	3ff00000 	.word	0x3ff00000
 80061cc:	40240000 	.word	0x40240000
 80061d0:	401c0000 	.word	0x401c0000
 80061d4:	40140000 	.word	0x40140000
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	f7fa f97a 	bl	80004d8 <__aeabi_dmul>
 80061e4:	4656      	mov	r6, sl
 80061e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061f0:	f7fa fc22 	bl	8000a38 <__aeabi_d2iz>
 80061f4:	4605      	mov	r5, r0
 80061f6:	f7fa f905 	bl	8000404 <__aeabi_i2d>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006202:	f7f9 ffb1 	bl	8000168 <__aeabi_dsub>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	3530      	adds	r5, #48	@ 0x30
 800620c:	f806 5b01 	strb.w	r5, [r6], #1
 8006210:	42a6      	cmp	r6, r4
 8006212:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	d124      	bne.n	8006266 <_dtoa_r+0x62e>
 800621c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006220:	4bae      	ldr	r3, [pc, #696]	@ (80064dc <_dtoa_r+0x8a4>)
 8006222:	f7f9 ffa3 	bl	800016c <__adddf3>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800622e:	f7fa fbe3 	bl	80009f8 <__aeabi_dcmpgt>
 8006232:	2800      	cmp	r0, #0
 8006234:	d163      	bne.n	80062fe <_dtoa_r+0x6c6>
 8006236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800623a:	2000      	movs	r0, #0
 800623c:	49a7      	ldr	r1, [pc, #668]	@ (80064dc <_dtoa_r+0x8a4>)
 800623e:	f7f9 ff93 	bl	8000168 <__aeabi_dsub>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800624a:	f7fa fbb7 	bl	80009bc <__aeabi_dcmplt>
 800624e:	2800      	cmp	r0, #0
 8006250:	f43f af14 	beq.w	800607c <_dtoa_r+0x444>
 8006254:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006256:	1e73      	subs	r3, r6, #1
 8006258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800625a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800625e:	2b30      	cmp	r3, #48	@ 0x30
 8006260:	d0f8      	beq.n	8006254 <_dtoa_r+0x61c>
 8006262:	4647      	mov	r7, r8
 8006264:	e03b      	b.n	80062de <_dtoa_r+0x6a6>
 8006266:	4b9e      	ldr	r3, [pc, #632]	@ (80064e0 <_dtoa_r+0x8a8>)
 8006268:	f7fa f936 	bl	80004d8 <__aeabi_dmul>
 800626c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006270:	e7bc      	b.n	80061ec <_dtoa_r+0x5b4>
 8006272:	4656      	mov	r6, sl
 8006274:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa fa54 	bl	800072c <__aeabi_ddiv>
 8006284:	f7fa fbd8 	bl	8000a38 <__aeabi_d2iz>
 8006288:	4680      	mov	r8, r0
 800628a:	f7fa f8bb 	bl	8000404 <__aeabi_i2d>
 800628e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006292:	f7fa f921 	bl	80004d8 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7f9 ff63 	bl	8000168 <__aeabi_dsub>
 80062a2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062a6:	9d08      	ldr	r5, [sp, #32]
 80062a8:	f806 4b01 	strb.w	r4, [r6], #1
 80062ac:	eba6 040a 	sub.w	r4, r6, sl
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	d133      	bne.n	8006320 <_dtoa_r+0x6e8>
 80062b8:	f7f9 ff58 	bl	800016c <__adddf3>
 80062bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	f7fa fb98 	bl	80009f8 <__aeabi_dcmpgt>
 80062c8:	b9c0      	cbnz	r0, 80062fc <_dtoa_r+0x6c4>
 80062ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa fb69 	bl	80009a8 <__aeabi_dcmpeq>
 80062d6:	b110      	cbz	r0, 80062de <_dtoa_r+0x6a6>
 80062d8:	f018 0f01 	tst.w	r8, #1
 80062dc:	d10e      	bne.n	80062fc <_dtoa_r+0x6c4>
 80062de:	4648      	mov	r0, r9
 80062e0:	9903      	ldr	r1, [sp, #12]
 80062e2:	f000 fbbb 	bl	8006a5c <_Bfree>
 80062e6:	2300      	movs	r3, #0
 80062e8:	7033      	strb	r3, [r6, #0]
 80062ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062ec:	3701      	adds	r7, #1
 80062ee:	601f      	str	r7, [r3, #0]
 80062f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 824b 	beq.w	800678e <_dtoa_r+0xb56>
 80062f8:	601e      	str	r6, [r3, #0]
 80062fa:	e248      	b.n	800678e <_dtoa_r+0xb56>
 80062fc:	46b8      	mov	r8, r7
 80062fe:	4633      	mov	r3, r6
 8006300:	461e      	mov	r6, r3
 8006302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006306:	2a39      	cmp	r2, #57	@ 0x39
 8006308:	d106      	bne.n	8006318 <_dtoa_r+0x6e0>
 800630a:	459a      	cmp	sl, r3
 800630c:	d1f8      	bne.n	8006300 <_dtoa_r+0x6c8>
 800630e:	2230      	movs	r2, #48	@ 0x30
 8006310:	f108 0801 	add.w	r8, r8, #1
 8006314:	f88a 2000 	strb.w	r2, [sl]
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	3201      	adds	r2, #1
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e7a0      	b.n	8006262 <_dtoa_r+0x62a>
 8006320:	2200      	movs	r2, #0
 8006322:	4b6f      	ldr	r3, [pc, #444]	@ (80064e0 <_dtoa_r+0x8a8>)
 8006324:	f7fa f8d8 	bl	80004d8 <__aeabi_dmul>
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	f7fa fb3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006334:	2800      	cmp	r0, #0
 8006336:	d09f      	beq.n	8006278 <_dtoa_r+0x640>
 8006338:	e7d1      	b.n	80062de <_dtoa_r+0x6a6>
 800633a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800633c:	2a00      	cmp	r2, #0
 800633e:	f000 80ea 	beq.w	8006516 <_dtoa_r+0x8de>
 8006342:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006344:	2a01      	cmp	r2, #1
 8006346:	f300 80cd 	bgt.w	80064e4 <_dtoa_r+0x8ac>
 800634a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800634c:	2a00      	cmp	r2, #0
 800634e:	f000 80c1 	beq.w	80064d4 <_dtoa_r+0x89c>
 8006352:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006356:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006358:	9e04      	ldr	r6, [sp, #16]
 800635a:	9a04      	ldr	r2, [sp, #16]
 800635c:	2101      	movs	r1, #1
 800635e:	441a      	add	r2, r3
 8006360:	9204      	str	r2, [sp, #16]
 8006362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006364:	4648      	mov	r0, r9
 8006366:	441a      	add	r2, r3
 8006368:	9209      	str	r2, [sp, #36]	@ 0x24
 800636a:	f000 fc2b 	bl	8006bc4 <__i2b>
 800636e:	4605      	mov	r5, r0
 8006370:	b166      	cbz	r6, 800638c <_dtoa_r+0x754>
 8006372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd09      	ble.n	800638c <_dtoa_r+0x754>
 8006378:	42b3      	cmp	r3, r6
 800637a:	bfa8      	it	ge
 800637c:	4633      	movge	r3, r6
 800637e:	9a04      	ldr	r2, [sp, #16]
 8006380:	1af6      	subs	r6, r6, r3
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	9204      	str	r2, [sp, #16]
 8006386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	9309      	str	r3, [sp, #36]	@ 0x24
 800638c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800638e:	b30b      	cbz	r3, 80063d4 <_dtoa_r+0x79c>
 8006390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80c6 	beq.w	8006524 <_dtoa_r+0x8ec>
 8006398:	2c00      	cmp	r4, #0
 800639a:	f000 80c0 	beq.w	800651e <_dtoa_r+0x8e6>
 800639e:	4629      	mov	r1, r5
 80063a0:	4622      	mov	r2, r4
 80063a2:	4648      	mov	r0, r9
 80063a4:	f000 fcc6 	bl	8006d34 <__pow5mult>
 80063a8:	9a03      	ldr	r2, [sp, #12]
 80063aa:	4601      	mov	r1, r0
 80063ac:	4605      	mov	r5, r0
 80063ae:	4648      	mov	r0, r9
 80063b0:	f000 fc1e 	bl	8006bf0 <__multiply>
 80063b4:	9903      	ldr	r1, [sp, #12]
 80063b6:	4680      	mov	r8, r0
 80063b8:	4648      	mov	r0, r9
 80063ba:	f000 fb4f 	bl	8006a5c <_Bfree>
 80063be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c0:	1b1b      	subs	r3, r3, r4
 80063c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80063c4:	f000 80b1 	beq.w	800652a <_dtoa_r+0x8f2>
 80063c8:	4641      	mov	r1, r8
 80063ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063cc:	4648      	mov	r0, r9
 80063ce:	f000 fcb1 	bl	8006d34 <__pow5mult>
 80063d2:	9003      	str	r0, [sp, #12]
 80063d4:	2101      	movs	r1, #1
 80063d6:	4648      	mov	r0, r9
 80063d8:	f000 fbf4 	bl	8006bc4 <__i2b>
 80063dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063de:	4604      	mov	r4, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 81d8 	beq.w	8006796 <_dtoa_r+0xb5e>
 80063e6:	461a      	mov	r2, r3
 80063e8:	4601      	mov	r1, r0
 80063ea:	4648      	mov	r0, r9
 80063ec:	f000 fca2 	bl	8006d34 <__pow5mult>
 80063f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063f2:	4604      	mov	r4, r0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f300 809f 	bgt.w	8006538 <_dtoa_r+0x900>
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8097 	bne.w	8006530 <_dtoa_r+0x8f8>
 8006402:	9b07      	ldr	r3, [sp, #28]
 8006404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 8093 	bne.w	8006534 <_dtoa_r+0x8fc>
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006414:	0d1b      	lsrs	r3, r3, #20
 8006416:	051b      	lsls	r3, r3, #20
 8006418:	b133      	cbz	r3, 8006428 <_dtoa_r+0x7f0>
 800641a:	9b04      	ldr	r3, [sp, #16]
 800641c:	3301      	adds	r3, #1
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006422:	3301      	adds	r3, #1
 8006424:	9309      	str	r3, [sp, #36]	@ 0x24
 8006426:	2301      	movs	r3, #1
 8006428:	930a      	str	r3, [sp, #40]	@ 0x28
 800642a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 81b8 	beq.w	80067a2 <_dtoa_r+0xb6a>
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006438:	6918      	ldr	r0, [r3, #16]
 800643a:	f000 fb77 	bl	8006b2c <__hi0bits>
 800643e:	f1c0 0020 	rsb	r0, r0, #32
 8006442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006444:	4418      	add	r0, r3
 8006446:	f010 001f 	ands.w	r0, r0, #31
 800644a:	f000 8082 	beq.w	8006552 <_dtoa_r+0x91a>
 800644e:	f1c0 0320 	rsb	r3, r0, #32
 8006452:	2b04      	cmp	r3, #4
 8006454:	dd73      	ble.n	800653e <_dtoa_r+0x906>
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	f1c0 001c 	rsb	r0, r0, #28
 800645c:	4403      	add	r3, r0
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006462:	4406      	add	r6, r0
 8006464:	4403      	add	r3, r0
 8006466:	9309      	str	r3, [sp, #36]	@ 0x24
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	dd05      	ble.n	800647a <_dtoa_r+0x842>
 800646e:	461a      	mov	r2, r3
 8006470:	4648      	mov	r0, r9
 8006472:	9903      	ldr	r1, [sp, #12]
 8006474:	f000 fcb8 	bl	8006de8 <__lshift>
 8006478:	9003      	str	r0, [sp, #12]
 800647a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd05      	ble.n	800648c <_dtoa_r+0x854>
 8006480:	4621      	mov	r1, r4
 8006482:	461a      	mov	r2, r3
 8006484:	4648      	mov	r0, r9
 8006486:	f000 fcaf 	bl	8006de8 <__lshift>
 800648a:	4604      	mov	r4, r0
 800648c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d061      	beq.n	8006556 <_dtoa_r+0x91e>
 8006492:	4621      	mov	r1, r4
 8006494:	9803      	ldr	r0, [sp, #12]
 8006496:	f000 fd13 	bl	8006ec0 <__mcmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	da5b      	bge.n	8006556 <_dtoa_r+0x91e>
 800649e:	2300      	movs	r3, #0
 80064a0:	220a      	movs	r2, #10
 80064a2:	4648      	mov	r0, r9
 80064a4:	9903      	ldr	r1, [sp, #12]
 80064a6:	f000 fafb 	bl	8006aa0 <__multadd>
 80064aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80064b0:	9003      	str	r0, [sp, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8177 	beq.w	80067a6 <_dtoa_r+0xb6e>
 80064b8:	4629      	mov	r1, r5
 80064ba:	2300      	movs	r3, #0
 80064bc:	220a      	movs	r2, #10
 80064be:	4648      	mov	r0, r9
 80064c0:	f000 faee 	bl	8006aa0 <__multadd>
 80064c4:	f1bb 0f00 	cmp.w	fp, #0
 80064c8:	4605      	mov	r5, r0
 80064ca:	dc6f      	bgt.n	80065ac <_dtoa_r+0x974>
 80064cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	dc49      	bgt.n	8006566 <_dtoa_r+0x92e>
 80064d2:	e06b      	b.n	80065ac <_dtoa_r+0x974>
 80064d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064da:	e73c      	b.n	8006356 <_dtoa_r+0x71e>
 80064dc:	3fe00000 	.word	0x3fe00000
 80064e0:	40240000 	.word	0x40240000
 80064e4:	9b08      	ldr	r3, [sp, #32]
 80064e6:	1e5c      	subs	r4, r3, #1
 80064e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	db09      	blt.n	8006502 <_dtoa_r+0x8ca>
 80064ee:	1b1c      	subs	r4, r3, r4
 80064f0:	9b08      	ldr	r3, [sp, #32]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f6bf af30 	bge.w	8006358 <_dtoa_r+0x720>
 80064f8:	9b04      	ldr	r3, [sp, #16]
 80064fa:	9a08      	ldr	r2, [sp, #32]
 80064fc:	1a9e      	subs	r6, r3, r2
 80064fe:	2300      	movs	r3, #0
 8006500:	e72b      	b.n	800635a <_dtoa_r+0x722>
 8006502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006504:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006506:	1ae3      	subs	r3, r4, r3
 8006508:	441a      	add	r2, r3
 800650a:	940a      	str	r4, [sp, #40]	@ 0x28
 800650c:	9e04      	ldr	r6, [sp, #16]
 800650e:	2400      	movs	r4, #0
 8006510:	9b08      	ldr	r3, [sp, #32]
 8006512:	920e      	str	r2, [sp, #56]	@ 0x38
 8006514:	e721      	b.n	800635a <_dtoa_r+0x722>
 8006516:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006518:	9e04      	ldr	r6, [sp, #16]
 800651a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800651c:	e728      	b.n	8006370 <_dtoa_r+0x738>
 800651e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006522:	e751      	b.n	80063c8 <_dtoa_r+0x790>
 8006524:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006526:	9903      	ldr	r1, [sp, #12]
 8006528:	e750      	b.n	80063cc <_dtoa_r+0x794>
 800652a:	f8cd 800c 	str.w	r8, [sp, #12]
 800652e:	e751      	b.n	80063d4 <_dtoa_r+0x79c>
 8006530:	2300      	movs	r3, #0
 8006532:	e779      	b.n	8006428 <_dtoa_r+0x7f0>
 8006534:	9b06      	ldr	r3, [sp, #24]
 8006536:	e777      	b.n	8006428 <_dtoa_r+0x7f0>
 8006538:	2300      	movs	r3, #0
 800653a:	930a      	str	r3, [sp, #40]	@ 0x28
 800653c:	e779      	b.n	8006432 <_dtoa_r+0x7fa>
 800653e:	d093      	beq.n	8006468 <_dtoa_r+0x830>
 8006540:	9a04      	ldr	r2, [sp, #16]
 8006542:	331c      	adds	r3, #28
 8006544:	441a      	add	r2, r3
 8006546:	9204      	str	r2, [sp, #16]
 8006548:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800654a:	441e      	add	r6, r3
 800654c:	441a      	add	r2, r3
 800654e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006550:	e78a      	b.n	8006468 <_dtoa_r+0x830>
 8006552:	4603      	mov	r3, r0
 8006554:	e7f4      	b.n	8006540 <_dtoa_r+0x908>
 8006556:	9b08      	ldr	r3, [sp, #32]
 8006558:	46b8      	mov	r8, r7
 800655a:	2b00      	cmp	r3, #0
 800655c:	dc20      	bgt.n	80065a0 <_dtoa_r+0x968>
 800655e:	469b      	mov	fp, r3
 8006560:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006562:	2b02      	cmp	r3, #2
 8006564:	dd1e      	ble.n	80065a4 <_dtoa_r+0x96c>
 8006566:	f1bb 0f00 	cmp.w	fp, #0
 800656a:	f47f adb1 	bne.w	80060d0 <_dtoa_r+0x498>
 800656e:	4621      	mov	r1, r4
 8006570:	465b      	mov	r3, fp
 8006572:	2205      	movs	r2, #5
 8006574:	4648      	mov	r0, r9
 8006576:	f000 fa93 	bl	8006aa0 <__multadd>
 800657a:	4601      	mov	r1, r0
 800657c:	4604      	mov	r4, r0
 800657e:	9803      	ldr	r0, [sp, #12]
 8006580:	f000 fc9e 	bl	8006ec0 <__mcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	f77f ada3 	ble.w	80060d0 <_dtoa_r+0x498>
 800658a:	4656      	mov	r6, sl
 800658c:	2331      	movs	r3, #49	@ 0x31
 800658e:	f108 0801 	add.w	r8, r8, #1
 8006592:	f806 3b01 	strb.w	r3, [r6], #1
 8006596:	e59f      	b.n	80060d8 <_dtoa_r+0x4a0>
 8006598:	46b8      	mov	r8, r7
 800659a:	9c08      	ldr	r4, [sp, #32]
 800659c:	4625      	mov	r5, r4
 800659e:	e7f4      	b.n	800658a <_dtoa_r+0x952>
 80065a0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80065a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8101 	beq.w	80067ae <_dtoa_r+0xb76>
 80065ac:	2e00      	cmp	r6, #0
 80065ae:	dd05      	ble.n	80065bc <_dtoa_r+0x984>
 80065b0:	4629      	mov	r1, r5
 80065b2:	4632      	mov	r2, r6
 80065b4:	4648      	mov	r0, r9
 80065b6:	f000 fc17 	bl	8006de8 <__lshift>
 80065ba:	4605      	mov	r5, r0
 80065bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d05c      	beq.n	800667c <_dtoa_r+0xa44>
 80065c2:	4648      	mov	r0, r9
 80065c4:	6869      	ldr	r1, [r5, #4]
 80065c6:	f000 fa09 	bl	80069dc <_Balloc>
 80065ca:	4606      	mov	r6, r0
 80065cc:	b928      	cbnz	r0, 80065da <_dtoa_r+0x9a2>
 80065ce:	4602      	mov	r2, r0
 80065d0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065d4:	4b80      	ldr	r3, [pc, #512]	@ (80067d8 <_dtoa_r+0xba0>)
 80065d6:	f7ff bb43 	b.w	8005c60 <_dtoa_r+0x28>
 80065da:	692a      	ldr	r2, [r5, #16]
 80065dc:	f105 010c 	add.w	r1, r5, #12
 80065e0:	3202      	adds	r2, #2
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	300c      	adds	r0, #12
 80065e6:	f000 ff9d 	bl	8007524 <memcpy>
 80065ea:	2201      	movs	r2, #1
 80065ec:	4631      	mov	r1, r6
 80065ee:	4648      	mov	r0, r9
 80065f0:	f000 fbfa 	bl	8006de8 <__lshift>
 80065f4:	462f      	mov	r7, r5
 80065f6:	4605      	mov	r5, r0
 80065f8:	f10a 0301 	add.w	r3, sl, #1
 80065fc:	9304      	str	r3, [sp, #16]
 80065fe:	eb0a 030b 	add.w	r3, sl, fp
 8006602:	930a      	str	r3, [sp, #40]	@ 0x28
 8006604:	9b06      	ldr	r3, [sp, #24]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	9309      	str	r3, [sp, #36]	@ 0x24
 800660c:	9b04      	ldr	r3, [sp, #16]
 800660e:	4621      	mov	r1, r4
 8006610:	9803      	ldr	r0, [sp, #12]
 8006612:	f103 3bff 	add.w	fp, r3, #4294967295
 8006616:	f7ff fa84 	bl	8005b22 <quorem>
 800661a:	4603      	mov	r3, r0
 800661c:	4639      	mov	r1, r7
 800661e:	3330      	adds	r3, #48	@ 0x30
 8006620:	9006      	str	r0, [sp, #24]
 8006622:	9803      	ldr	r0, [sp, #12]
 8006624:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006626:	f000 fc4b 	bl	8006ec0 <__mcmp>
 800662a:	462a      	mov	r2, r5
 800662c:	9008      	str	r0, [sp, #32]
 800662e:	4621      	mov	r1, r4
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fc61 	bl	8006ef8 <__mdiff>
 8006636:	68c2      	ldr	r2, [r0, #12]
 8006638:	4606      	mov	r6, r0
 800663a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800663c:	bb02      	cbnz	r2, 8006680 <_dtoa_r+0xa48>
 800663e:	4601      	mov	r1, r0
 8006640:	9803      	ldr	r0, [sp, #12]
 8006642:	f000 fc3d 	bl	8006ec0 <__mcmp>
 8006646:	4602      	mov	r2, r0
 8006648:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800664a:	4631      	mov	r1, r6
 800664c:	4648      	mov	r0, r9
 800664e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006652:	f000 fa03 	bl	8006a5c <_Bfree>
 8006656:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006658:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800665a:	9e04      	ldr	r6, [sp, #16]
 800665c:	ea42 0103 	orr.w	r1, r2, r3
 8006660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006662:	4319      	orrs	r1, r3
 8006664:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006666:	d10d      	bne.n	8006684 <_dtoa_r+0xa4c>
 8006668:	2b39      	cmp	r3, #57	@ 0x39
 800666a:	d027      	beq.n	80066bc <_dtoa_r+0xa84>
 800666c:	9a08      	ldr	r2, [sp, #32]
 800666e:	2a00      	cmp	r2, #0
 8006670:	dd01      	ble.n	8006676 <_dtoa_r+0xa3e>
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	3331      	adds	r3, #49	@ 0x31
 8006676:	f88b 3000 	strb.w	r3, [fp]
 800667a:	e52e      	b.n	80060da <_dtoa_r+0x4a2>
 800667c:	4628      	mov	r0, r5
 800667e:	e7b9      	b.n	80065f4 <_dtoa_r+0x9bc>
 8006680:	2201      	movs	r2, #1
 8006682:	e7e2      	b.n	800664a <_dtoa_r+0xa12>
 8006684:	9908      	ldr	r1, [sp, #32]
 8006686:	2900      	cmp	r1, #0
 8006688:	db04      	blt.n	8006694 <_dtoa_r+0xa5c>
 800668a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800668c:	4301      	orrs	r1, r0
 800668e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006690:	4301      	orrs	r1, r0
 8006692:	d120      	bne.n	80066d6 <_dtoa_r+0xa9e>
 8006694:	2a00      	cmp	r2, #0
 8006696:	ddee      	ble.n	8006676 <_dtoa_r+0xa3e>
 8006698:	2201      	movs	r2, #1
 800669a:	9903      	ldr	r1, [sp, #12]
 800669c:	4648      	mov	r0, r9
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	f000 fba2 	bl	8006de8 <__lshift>
 80066a4:	4621      	mov	r1, r4
 80066a6:	9003      	str	r0, [sp, #12]
 80066a8:	f000 fc0a 	bl	8006ec0 <__mcmp>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	9b04      	ldr	r3, [sp, #16]
 80066b0:	dc02      	bgt.n	80066b8 <_dtoa_r+0xa80>
 80066b2:	d1e0      	bne.n	8006676 <_dtoa_r+0xa3e>
 80066b4:	07da      	lsls	r2, r3, #31
 80066b6:	d5de      	bpl.n	8006676 <_dtoa_r+0xa3e>
 80066b8:	2b39      	cmp	r3, #57	@ 0x39
 80066ba:	d1da      	bne.n	8006672 <_dtoa_r+0xa3a>
 80066bc:	2339      	movs	r3, #57	@ 0x39
 80066be:	f88b 3000 	strb.w	r3, [fp]
 80066c2:	4633      	mov	r3, r6
 80066c4:	461e      	mov	r6, r3
 80066c6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2a39      	cmp	r2, #57	@ 0x39
 80066ce:	d04e      	beq.n	800676e <_dtoa_r+0xb36>
 80066d0:	3201      	adds	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e501      	b.n	80060da <_dtoa_r+0x4a2>
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	dd03      	ble.n	80066e2 <_dtoa_r+0xaaa>
 80066da:	2b39      	cmp	r3, #57	@ 0x39
 80066dc:	d0ee      	beq.n	80066bc <_dtoa_r+0xa84>
 80066de:	3301      	adds	r3, #1
 80066e0:	e7c9      	b.n	8006676 <_dtoa_r+0xa3e>
 80066e2:	9a04      	ldr	r2, [sp, #16]
 80066e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066ea:	428a      	cmp	r2, r1
 80066ec:	d028      	beq.n	8006740 <_dtoa_r+0xb08>
 80066ee:	2300      	movs	r3, #0
 80066f0:	220a      	movs	r2, #10
 80066f2:	9903      	ldr	r1, [sp, #12]
 80066f4:	4648      	mov	r0, r9
 80066f6:	f000 f9d3 	bl	8006aa0 <__multadd>
 80066fa:	42af      	cmp	r7, r5
 80066fc:	9003      	str	r0, [sp, #12]
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	f04f 020a 	mov.w	r2, #10
 8006706:	4639      	mov	r1, r7
 8006708:	4648      	mov	r0, r9
 800670a:	d107      	bne.n	800671c <_dtoa_r+0xae4>
 800670c:	f000 f9c8 	bl	8006aa0 <__multadd>
 8006710:	4607      	mov	r7, r0
 8006712:	4605      	mov	r5, r0
 8006714:	9b04      	ldr	r3, [sp, #16]
 8006716:	3301      	adds	r3, #1
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	e777      	b.n	800660c <_dtoa_r+0x9d4>
 800671c:	f000 f9c0 	bl	8006aa0 <__multadd>
 8006720:	4629      	mov	r1, r5
 8006722:	4607      	mov	r7, r0
 8006724:	2300      	movs	r3, #0
 8006726:	220a      	movs	r2, #10
 8006728:	4648      	mov	r0, r9
 800672a:	f000 f9b9 	bl	8006aa0 <__multadd>
 800672e:	4605      	mov	r5, r0
 8006730:	e7f0      	b.n	8006714 <_dtoa_r+0xadc>
 8006732:	f1bb 0f00 	cmp.w	fp, #0
 8006736:	bfcc      	ite	gt
 8006738:	465e      	movgt	r6, fp
 800673a:	2601      	movle	r6, #1
 800673c:	2700      	movs	r7, #0
 800673e:	4456      	add	r6, sl
 8006740:	2201      	movs	r2, #1
 8006742:	9903      	ldr	r1, [sp, #12]
 8006744:	4648      	mov	r0, r9
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	f000 fb4e 	bl	8006de8 <__lshift>
 800674c:	4621      	mov	r1, r4
 800674e:	9003      	str	r0, [sp, #12]
 8006750:	f000 fbb6 	bl	8006ec0 <__mcmp>
 8006754:	2800      	cmp	r0, #0
 8006756:	dcb4      	bgt.n	80066c2 <_dtoa_r+0xa8a>
 8006758:	d102      	bne.n	8006760 <_dtoa_r+0xb28>
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	07db      	lsls	r3, r3, #31
 800675e:	d4b0      	bmi.n	80066c2 <_dtoa_r+0xa8a>
 8006760:	4633      	mov	r3, r6
 8006762:	461e      	mov	r6, r3
 8006764:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006768:	2a30      	cmp	r2, #48	@ 0x30
 800676a:	d0fa      	beq.n	8006762 <_dtoa_r+0xb2a>
 800676c:	e4b5      	b.n	80060da <_dtoa_r+0x4a2>
 800676e:	459a      	cmp	sl, r3
 8006770:	d1a8      	bne.n	80066c4 <_dtoa_r+0xa8c>
 8006772:	2331      	movs	r3, #49	@ 0x31
 8006774:	f108 0801 	add.w	r8, r8, #1
 8006778:	f88a 3000 	strb.w	r3, [sl]
 800677c:	e4ad      	b.n	80060da <_dtoa_r+0x4a2>
 800677e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006780:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80067dc <_dtoa_r+0xba4>
 8006784:	b11b      	cbz	r3, 800678e <_dtoa_r+0xb56>
 8006786:	f10a 0308 	add.w	r3, sl, #8
 800678a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4650      	mov	r0, sl
 8006790:	b017      	add	sp, #92	@ 0x5c
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006798:	2b01      	cmp	r3, #1
 800679a:	f77f ae2e 	ble.w	80063fa <_dtoa_r+0x7c2>
 800679e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a2:	2001      	movs	r0, #1
 80067a4:	e64d      	b.n	8006442 <_dtoa_r+0x80a>
 80067a6:	f1bb 0f00 	cmp.w	fp, #0
 80067aa:	f77f aed9 	ble.w	8006560 <_dtoa_r+0x928>
 80067ae:	4656      	mov	r6, sl
 80067b0:	4621      	mov	r1, r4
 80067b2:	9803      	ldr	r0, [sp, #12]
 80067b4:	f7ff f9b5 	bl	8005b22 <quorem>
 80067b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80067bc:	f806 3b01 	strb.w	r3, [r6], #1
 80067c0:	eba6 020a 	sub.w	r2, r6, sl
 80067c4:	4593      	cmp	fp, r2
 80067c6:	ddb4      	ble.n	8006732 <_dtoa_r+0xafa>
 80067c8:	2300      	movs	r3, #0
 80067ca:	220a      	movs	r2, #10
 80067cc:	4648      	mov	r0, r9
 80067ce:	9903      	ldr	r1, [sp, #12]
 80067d0:	f000 f966 	bl	8006aa0 <__multadd>
 80067d4:	9003      	str	r0, [sp, #12]
 80067d6:	e7eb      	b.n	80067b0 <_dtoa_r+0xb78>
 80067d8:	080092b4 	.word	0x080092b4
 80067dc:	08009238 	.word	0x08009238

080067e0 <_free_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4605      	mov	r5, r0
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d040      	beq.n	800686a <_free_r+0x8a>
 80067e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ec:	1f0c      	subs	r4, r1, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfb8      	it	lt
 80067f2:	18e4      	addlt	r4, r4, r3
 80067f4:	f000 f8e6 	bl	80069c4 <__malloc_lock>
 80067f8:	4a1c      	ldr	r2, [pc, #112]	@ (800686c <_free_r+0x8c>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	b933      	cbnz	r3, 800680c <_free_r+0x2c>
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	4628      	mov	r0, r5
 8006804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006808:	f000 b8e2 	b.w	80069d0 <__malloc_unlock>
 800680c:	42a3      	cmp	r3, r4
 800680e:	d908      	bls.n	8006822 <_free_r+0x42>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428b      	cmp	r3, r1
 8006816:	bf01      	itttt	eq
 8006818:	6819      	ldreq	r1, [r3, #0]
 800681a:	685b      	ldreq	r3, [r3, #4]
 800681c:	1809      	addeq	r1, r1, r0
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	e7ed      	b.n	80067fe <_free_r+0x1e>
 8006822:	461a      	mov	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b10b      	cbz	r3, 800682c <_free_r+0x4c>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d9fa      	bls.n	8006822 <_free_r+0x42>
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	1850      	adds	r0, r2, r1
 8006830:	42a0      	cmp	r0, r4
 8006832:	d10b      	bne.n	800684c <_free_r+0x6c>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	4401      	add	r1, r0
 8006838:	1850      	adds	r0, r2, r1
 800683a:	4283      	cmp	r3, r0
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	d1e0      	bne.n	8006802 <_free_r+0x22>
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4408      	add	r0, r1
 8006846:	6010      	str	r0, [r2, #0]
 8006848:	6053      	str	r3, [r2, #4]
 800684a:	e7da      	b.n	8006802 <_free_r+0x22>
 800684c:	d902      	bls.n	8006854 <_free_r+0x74>
 800684e:	230c      	movs	r3, #12
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	e7d6      	b.n	8006802 <_free_r+0x22>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	1821      	adds	r1, r4, r0
 8006858:	428b      	cmp	r3, r1
 800685a:	bf01      	itttt	eq
 800685c:	6819      	ldreq	r1, [r3, #0]
 800685e:	685b      	ldreq	r3, [r3, #4]
 8006860:	1809      	addeq	r1, r1, r0
 8006862:	6021      	streq	r1, [r4, #0]
 8006864:	6063      	str	r3, [r4, #4]
 8006866:	6054      	str	r4, [r2, #4]
 8006868:	e7cb      	b.n	8006802 <_free_r+0x22>
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20002698 	.word	0x20002698

08006870 <malloc>:
 8006870:	4b02      	ldr	r3, [pc, #8]	@ (800687c <malloc+0xc>)
 8006872:	4601      	mov	r1, r0
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f000 b825 	b.w	80068c4 <_malloc_r>
 800687a:	bf00      	nop
 800687c:	20000020 	.word	0x20000020

08006880 <sbrk_aligned>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4e0f      	ldr	r6, [pc, #60]	@ (80068c0 <sbrk_aligned+0x40>)
 8006884:	460c      	mov	r4, r1
 8006886:	6831      	ldr	r1, [r6, #0]
 8006888:	4605      	mov	r5, r0
 800688a:	b911      	cbnz	r1, 8006892 <sbrk_aligned+0x12>
 800688c:	f000 fe3a 	bl	8007504 <_sbrk_r>
 8006890:	6030      	str	r0, [r6, #0]
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f000 fe35 	bl	8007504 <_sbrk_r>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	d103      	bne.n	80068a6 <sbrk_aligned+0x26>
 800689e:	f04f 34ff 	mov.w	r4, #4294967295
 80068a2:	4620      	mov	r0, r4
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	1cc4      	adds	r4, r0, #3
 80068a8:	f024 0403 	bic.w	r4, r4, #3
 80068ac:	42a0      	cmp	r0, r4
 80068ae:	d0f8      	beq.n	80068a2 <sbrk_aligned+0x22>
 80068b0:	1a21      	subs	r1, r4, r0
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 fe26 	bl	8007504 <_sbrk_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d1f2      	bne.n	80068a2 <sbrk_aligned+0x22>
 80068bc:	e7ef      	b.n	800689e <sbrk_aligned+0x1e>
 80068be:	bf00      	nop
 80068c0:	20002694 	.word	0x20002694

080068c4 <_malloc_r>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	1ccd      	adds	r5, r1, #3
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	4606      	mov	r6, r0
 80068da:	db01      	blt.n	80068e0 <_malloc_r+0x1c>
 80068dc:	42a9      	cmp	r1, r5
 80068de:	d904      	bls.n	80068ea <_malloc_r+0x26>
 80068e0:	230c      	movs	r3, #12
 80068e2:	6033      	str	r3, [r6, #0]
 80068e4:	2000      	movs	r0, #0
 80068e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c0 <_malloc_r+0xfc>
 80068ee:	f000 f869 	bl	80069c4 <__malloc_lock>
 80068f2:	f8d8 3000 	ldr.w	r3, [r8]
 80068f6:	461c      	mov	r4, r3
 80068f8:	bb44      	cbnz	r4, 800694c <_malloc_r+0x88>
 80068fa:	4629      	mov	r1, r5
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff ffbf 	bl	8006880 <sbrk_aligned>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	4604      	mov	r4, r0
 8006906:	d158      	bne.n	80069ba <_malloc_r+0xf6>
 8006908:	f8d8 4000 	ldr.w	r4, [r8]
 800690c:	4627      	mov	r7, r4
 800690e:	2f00      	cmp	r7, #0
 8006910:	d143      	bne.n	800699a <_malloc_r+0xd6>
 8006912:	2c00      	cmp	r4, #0
 8006914:	d04b      	beq.n	80069ae <_malloc_r+0xea>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	4639      	mov	r1, r7
 800691a:	4630      	mov	r0, r6
 800691c:	eb04 0903 	add.w	r9, r4, r3
 8006920:	f000 fdf0 	bl	8007504 <_sbrk_r>
 8006924:	4581      	cmp	r9, r0
 8006926:	d142      	bne.n	80069ae <_malloc_r+0xea>
 8006928:	6821      	ldr	r1, [r4, #0]
 800692a:	4630      	mov	r0, r6
 800692c:	1a6d      	subs	r5, r5, r1
 800692e:	4629      	mov	r1, r5
 8006930:	f7ff ffa6 	bl	8006880 <sbrk_aligned>
 8006934:	3001      	adds	r0, #1
 8006936:	d03a      	beq.n	80069ae <_malloc_r+0xea>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	442b      	add	r3, r5
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	f8d8 3000 	ldr.w	r3, [r8]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	bb62      	cbnz	r2, 80069a0 <_malloc_r+0xdc>
 8006946:	f8c8 7000 	str.w	r7, [r8]
 800694a:	e00f      	b.n	800696c <_malloc_r+0xa8>
 800694c:	6822      	ldr	r2, [r4, #0]
 800694e:	1b52      	subs	r2, r2, r5
 8006950:	d420      	bmi.n	8006994 <_malloc_r+0xd0>
 8006952:	2a0b      	cmp	r2, #11
 8006954:	d917      	bls.n	8006986 <_malloc_r+0xc2>
 8006956:	1961      	adds	r1, r4, r5
 8006958:	42a3      	cmp	r3, r4
 800695a:	6025      	str	r5, [r4, #0]
 800695c:	bf18      	it	ne
 800695e:	6059      	strne	r1, [r3, #4]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	bf08      	it	eq
 8006964:	f8c8 1000 	streq.w	r1, [r8]
 8006968:	5162      	str	r2, [r4, r5]
 800696a:	604b      	str	r3, [r1, #4]
 800696c:	4630      	mov	r0, r6
 800696e:	f000 f82f 	bl	80069d0 <__malloc_unlock>
 8006972:	f104 000b 	add.w	r0, r4, #11
 8006976:	1d23      	adds	r3, r4, #4
 8006978:	f020 0007 	bic.w	r0, r0, #7
 800697c:	1ac2      	subs	r2, r0, r3
 800697e:	bf1c      	itt	ne
 8006980:	1a1b      	subne	r3, r3, r0
 8006982:	50a3      	strne	r3, [r4, r2]
 8006984:	e7af      	b.n	80068e6 <_malloc_r+0x22>
 8006986:	6862      	ldr	r2, [r4, #4]
 8006988:	42a3      	cmp	r3, r4
 800698a:	bf0c      	ite	eq
 800698c:	f8c8 2000 	streq.w	r2, [r8]
 8006990:	605a      	strne	r2, [r3, #4]
 8006992:	e7eb      	b.n	800696c <_malloc_r+0xa8>
 8006994:	4623      	mov	r3, r4
 8006996:	6864      	ldr	r4, [r4, #4]
 8006998:	e7ae      	b.n	80068f8 <_malloc_r+0x34>
 800699a:	463c      	mov	r4, r7
 800699c:	687f      	ldr	r7, [r7, #4]
 800699e:	e7b6      	b.n	800690e <_malloc_r+0x4a>
 80069a0:	461a      	mov	r2, r3
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d1fb      	bne.n	80069a0 <_malloc_r+0xdc>
 80069a8:	2300      	movs	r3, #0
 80069aa:	6053      	str	r3, [r2, #4]
 80069ac:	e7de      	b.n	800696c <_malloc_r+0xa8>
 80069ae:	230c      	movs	r3, #12
 80069b0:	4630      	mov	r0, r6
 80069b2:	6033      	str	r3, [r6, #0]
 80069b4:	f000 f80c 	bl	80069d0 <__malloc_unlock>
 80069b8:	e794      	b.n	80068e4 <_malloc_r+0x20>
 80069ba:	6005      	str	r5, [r0, #0]
 80069bc:	e7d6      	b.n	800696c <_malloc_r+0xa8>
 80069be:	bf00      	nop
 80069c0:	20002698 	.word	0x20002698

080069c4 <__malloc_lock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	@ (80069cc <__malloc_lock+0x8>)
 80069c6:	f7ff b89c 	b.w	8005b02 <__retarget_lock_acquire_recursive>
 80069ca:	bf00      	nop
 80069cc:	20002690 	.word	0x20002690

080069d0 <__malloc_unlock>:
 80069d0:	4801      	ldr	r0, [pc, #4]	@ (80069d8 <__malloc_unlock+0x8>)
 80069d2:	f7ff b897 	b.w	8005b04 <__retarget_lock_release_recursive>
 80069d6:	bf00      	nop
 80069d8:	20002690 	.word	0x20002690

080069dc <_Balloc>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	69c6      	ldr	r6, [r0, #28]
 80069e0:	4604      	mov	r4, r0
 80069e2:	460d      	mov	r5, r1
 80069e4:	b976      	cbnz	r6, 8006a04 <_Balloc+0x28>
 80069e6:	2010      	movs	r0, #16
 80069e8:	f7ff ff42 	bl	8006870 <malloc>
 80069ec:	4602      	mov	r2, r0
 80069ee:	61e0      	str	r0, [r4, #28]
 80069f0:	b920      	cbnz	r0, 80069fc <_Balloc+0x20>
 80069f2:	216b      	movs	r1, #107	@ 0x6b
 80069f4:	4b17      	ldr	r3, [pc, #92]	@ (8006a54 <_Balloc+0x78>)
 80069f6:	4818      	ldr	r0, [pc, #96]	@ (8006a58 <_Balloc+0x7c>)
 80069f8:	f000 fda2 	bl	8007540 <__assert_func>
 80069fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a00:	6006      	str	r6, [r0, #0]
 8006a02:	60c6      	str	r6, [r0, #12]
 8006a04:	69e6      	ldr	r6, [r4, #28]
 8006a06:	68f3      	ldr	r3, [r6, #12]
 8006a08:	b183      	cbz	r3, 8006a2c <_Balloc+0x50>
 8006a0a:	69e3      	ldr	r3, [r4, #28]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a12:	b9b8      	cbnz	r0, 8006a44 <_Balloc+0x68>
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f605 	lsl.w	r6, r1, r5
 8006a1a:	1d72      	adds	r2, r6, #5
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	0092      	lsls	r2, r2, #2
 8006a20:	f000 fdac 	bl	800757c <_calloc_r>
 8006a24:	b160      	cbz	r0, 8006a40 <_Balloc+0x64>
 8006a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a2a:	e00e      	b.n	8006a4a <_Balloc+0x6e>
 8006a2c:	2221      	movs	r2, #33	@ 0x21
 8006a2e:	2104      	movs	r1, #4
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 fda3 	bl	800757c <_calloc_r>
 8006a36:	69e3      	ldr	r3, [r4, #28]
 8006a38:	60f0      	str	r0, [r6, #12]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e4      	bne.n	8006a0a <_Balloc+0x2e>
 8006a40:	2000      	movs	r0, #0
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	6802      	ldr	r2, [r0, #0]
 8006a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a50:	e7f7      	b.n	8006a42 <_Balloc+0x66>
 8006a52:	bf00      	nop
 8006a54:	08009245 	.word	0x08009245
 8006a58:	080092c5 	.word	0x080092c5

08006a5c <_Bfree>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	69c6      	ldr	r6, [r0, #28]
 8006a60:	4605      	mov	r5, r0
 8006a62:	460c      	mov	r4, r1
 8006a64:	b976      	cbnz	r6, 8006a84 <_Bfree+0x28>
 8006a66:	2010      	movs	r0, #16
 8006a68:	f7ff ff02 	bl	8006870 <malloc>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	61e8      	str	r0, [r5, #28]
 8006a70:	b920      	cbnz	r0, 8006a7c <_Bfree+0x20>
 8006a72:	218f      	movs	r1, #143	@ 0x8f
 8006a74:	4b08      	ldr	r3, [pc, #32]	@ (8006a98 <_Bfree+0x3c>)
 8006a76:	4809      	ldr	r0, [pc, #36]	@ (8006a9c <_Bfree+0x40>)
 8006a78:	f000 fd62 	bl	8007540 <__assert_func>
 8006a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a80:	6006      	str	r6, [r0, #0]
 8006a82:	60c6      	str	r6, [r0, #12]
 8006a84:	b13c      	cbz	r4, 8006a96 <_Bfree+0x3a>
 8006a86:	69eb      	ldr	r3, [r5, #28]
 8006a88:	6862      	ldr	r2, [r4, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a90:	6021      	str	r1, [r4, #0]
 8006a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
 8006a98:	08009245 	.word	0x08009245
 8006a9c:	080092c5 	.word	0x080092c5

08006aa0 <__multadd>:
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	461e      	mov	r6, r3
 8006aaa:	2000      	movs	r0, #0
 8006aac:	690d      	ldr	r5, [r1, #16]
 8006aae:	f101 0c14 	add.w	ip, r1, #20
 8006ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	b299      	uxth	r1, r3
 8006aba:	fb02 6101 	mla	r1, r2, r1, r6
 8006abe:	0c1e      	lsrs	r6, r3, #16
 8006ac0:	0c0b      	lsrs	r3, r1, #16
 8006ac2:	fb02 3306 	mla	r3, r2, r6, r3
 8006ac6:	b289      	uxth	r1, r1
 8006ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006acc:	4285      	cmp	r5, r0
 8006ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ad6:	dcec      	bgt.n	8006ab2 <__multadd+0x12>
 8006ad8:	b30e      	cbz	r6, 8006b1e <__multadd+0x7e>
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dc19      	bgt.n	8006b14 <__multadd+0x74>
 8006ae0:	6861      	ldr	r1, [r4, #4]
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	3101      	adds	r1, #1
 8006ae6:	f7ff ff79 	bl	80069dc <_Balloc>
 8006aea:	4680      	mov	r8, r0
 8006aec:	b928      	cbnz	r0, 8006afa <__multadd+0x5a>
 8006aee:	4602      	mov	r2, r0
 8006af0:	21ba      	movs	r1, #186	@ 0xba
 8006af2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b24 <__multadd+0x84>)
 8006af4:	480c      	ldr	r0, [pc, #48]	@ (8006b28 <__multadd+0x88>)
 8006af6:	f000 fd23 	bl	8007540 <__assert_func>
 8006afa:	6922      	ldr	r2, [r4, #16]
 8006afc:	f104 010c 	add.w	r1, r4, #12
 8006b00:	3202      	adds	r2, #2
 8006b02:	0092      	lsls	r2, r2, #2
 8006b04:	300c      	adds	r0, #12
 8006b06:	f000 fd0d 	bl	8007524 <memcpy>
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7ff ffa5 	bl	8006a5c <_Bfree>
 8006b12:	4644      	mov	r4, r8
 8006b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b18:	3501      	adds	r5, #1
 8006b1a:	615e      	str	r6, [r3, #20]
 8006b1c:	6125      	str	r5, [r4, #16]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b24:	080092b4 	.word	0x080092b4
 8006b28:	080092c5 	.word	0x080092c5

08006b2c <__hi0bits>:
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b32:	bf3a      	itte	cc
 8006b34:	0403      	lslcc	r3, r0, #16
 8006b36:	2010      	movcc	r0, #16
 8006b38:	2000      	movcs	r0, #0
 8006b3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b3e:	bf3c      	itt	cc
 8006b40:	021b      	lslcc	r3, r3, #8
 8006b42:	3008      	addcc	r0, #8
 8006b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b48:	bf3c      	itt	cc
 8006b4a:	011b      	lslcc	r3, r3, #4
 8006b4c:	3004      	addcc	r0, #4
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b52:	bf3c      	itt	cc
 8006b54:	009b      	lslcc	r3, r3, #2
 8006b56:	3002      	addcc	r0, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	db05      	blt.n	8006b68 <__hi0bits+0x3c>
 8006b5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b60:	f100 0001 	add.w	r0, r0, #1
 8006b64:	bf08      	it	eq
 8006b66:	2020      	moveq	r0, #32
 8006b68:	4770      	bx	lr

08006b6a <__lo0bits>:
 8006b6a:	6803      	ldr	r3, [r0, #0]
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	f013 0007 	ands.w	r0, r3, #7
 8006b72:	d00b      	beq.n	8006b8c <__lo0bits+0x22>
 8006b74:	07d9      	lsls	r1, r3, #31
 8006b76:	d421      	bmi.n	8006bbc <__lo0bits+0x52>
 8006b78:	0798      	lsls	r0, r3, #30
 8006b7a:	bf49      	itett	mi
 8006b7c:	085b      	lsrmi	r3, r3, #1
 8006b7e:	089b      	lsrpl	r3, r3, #2
 8006b80:	2001      	movmi	r0, #1
 8006b82:	6013      	strmi	r3, [r2, #0]
 8006b84:	bf5c      	itt	pl
 8006b86:	2002      	movpl	r0, #2
 8006b88:	6013      	strpl	r3, [r2, #0]
 8006b8a:	4770      	bx	lr
 8006b8c:	b299      	uxth	r1, r3
 8006b8e:	b909      	cbnz	r1, 8006b94 <__lo0bits+0x2a>
 8006b90:	2010      	movs	r0, #16
 8006b92:	0c1b      	lsrs	r3, r3, #16
 8006b94:	b2d9      	uxtb	r1, r3
 8006b96:	b909      	cbnz	r1, 8006b9c <__lo0bits+0x32>
 8006b98:	3008      	adds	r0, #8
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	0719      	lsls	r1, r3, #28
 8006b9e:	bf04      	itt	eq
 8006ba0:	091b      	lsreq	r3, r3, #4
 8006ba2:	3004      	addeq	r0, #4
 8006ba4:	0799      	lsls	r1, r3, #30
 8006ba6:	bf04      	itt	eq
 8006ba8:	089b      	lsreq	r3, r3, #2
 8006baa:	3002      	addeq	r0, #2
 8006bac:	07d9      	lsls	r1, r3, #31
 8006bae:	d403      	bmi.n	8006bb8 <__lo0bits+0x4e>
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	f100 0001 	add.w	r0, r0, #1
 8006bb6:	d003      	beq.n	8006bc0 <__lo0bits+0x56>
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4770      	bx	lr
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	4770      	bx	lr
 8006bc0:	2020      	movs	r0, #32
 8006bc2:	4770      	bx	lr

08006bc4 <__i2b>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	2101      	movs	r1, #1
 8006bca:	f7ff ff07 	bl	80069dc <_Balloc>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	b928      	cbnz	r0, 8006bde <__i2b+0x1a>
 8006bd2:	f240 1145 	movw	r1, #325	@ 0x145
 8006bd6:	4b04      	ldr	r3, [pc, #16]	@ (8006be8 <__i2b+0x24>)
 8006bd8:	4804      	ldr	r0, [pc, #16]	@ (8006bec <__i2b+0x28>)
 8006bda:	f000 fcb1 	bl	8007540 <__assert_func>
 8006bde:	2301      	movs	r3, #1
 8006be0:	6144      	str	r4, [r0, #20]
 8006be2:	6103      	str	r3, [r0, #16]
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	bf00      	nop
 8006be8:	080092b4 	.word	0x080092b4
 8006bec:	080092c5 	.word	0x080092c5

08006bf0 <__multiply>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	4617      	mov	r7, r2
 8006bf6:	690a      	ldr	r2, [r1, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4689      	mov	r9, r1
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	bfa2      	ittt	ge
 8006c00:	463b      	movge	r3, r7
 8006c02:	460f      	movge	r7, r1
 8006c04:	4699      	movge	r9, r3
 8006c06:	693d      	ldr	r5, [r7, #16]
 8006c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	eb05 060a 	add.w	r6, r5, sl
 8006c14:	42b3      	cmp	r3, r6
 8006c16:	b085      	sub	sp, #20
 8006c18:	bfb8      	it	lt
 8006c1a:	3101      	addlt	r1, #1
 8006c1c:	f7ff fede 	bl	80069dc <_Balloc>
 8006c20:	b930      	cbnz	r0, 8006c30 <__multiply+0x40>
 8006c22:	4602      	mov	r2, r0
 8006c24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c28:	4b40      	ldr	r3, [pc, #256]	@ (8006d2c <__multiply+0x13c>)
 8006c2a:	4841      	ldr	r0, [pc, #260]	@ (8006d30 <__multiply+0x140>)
 8006c2c:	f000 fc88 	bl	8007540 <__assert_func>
 8006c30:	f100 0414 	add.w	r4, r0, #20
 8006c34:	4623      	mov	r3, r4
 8006c36:	2200      	movs	r2, #0
 8006c38:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006c3c:	4573      	cmp	r3, lr
 8006c3e:	d320      	bcc.n	8006c82 <__multiply+0x92>
 8006c40:	f107 0814 	add.w	r8, r7, #20
 8006c44:	f109 0114 	add.w	r1, r9, #20
 8006c48:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006c4c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006c50:	9302      	str	r3, [sp, #8]
 8006c52:	1beb      	subs	r3, r5, r7
 8006c54:	3b15      	subs	r3, #21
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	3715      	adds	r7, #21
 8006c5e:	42bd      	cmp	r5, r7
 8006c60:	bf38      	it	cc
 8006c62:	2304      	movcc	r3, #4
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	9b02      	ldr	r3, [sp, #8]
 8006c68:	9103      	str	r1, [sp, #12]
 8006c6a:	428b      	cmp	r3, r1
 8006c6c:	d80c      	bhi.n	8006c88 <__multiply+0x98>
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	dd03      	ble.n	8006c7a <__multiply+0x8a>
 8006c72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d055      	beq.n	8006d26 <__multiply+0x136>
 8006c7a:	6106      	str	r6, [r0, #16]
 8006c7c:	b005      	add	sp, #20
 8006c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c82:	f843 2b04 	str.w	r2, [r3], #4
 8006c86:	e7d9      	b.n	8006c3c <__multiply+0x4c>
 8006c88:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c8c:	f1ba 0f00 	cmp.w	sl, #0
 8006c90:	d01f      	beq.n	8006cd2 <__multiply+0xe2>
 8006c92:	46c4      	mov	ip, r8
 8006c94:	46a1      	mov	r9, r4
 8006c96:	2700      	movs	r7, #0
 8006c98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c9c:	f8d9 3000 	ldr.w	r3, [r9]
 8006ca0:	fa1f fb82 	uxth.w	fp, r2
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	fb0a 330b 	mla	r3, sl, fp, r3
 8006caa:	443b      	add	r3, r7
 8006cac:	f8d9 7000 	ldr.w	r7, [r9]
 8006cb0:	0c12      	lsrs	r2, r2, #16
 8006cb2:	0c3f      	lsrs	r7, r7, #16
 8006cb4:	fb0a 7202 	mla	r2, sl, r2, r7
 8006cb8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cc2:	4565      	cmp	r5, ip
 8006cc4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006cc8:	f849 3b04 	str.w	r3, [r9], #4
 8006ccc:	d8e4      	bhi.n	8006c98 <__multiply+0xa8>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	50e7      	str	r7, [r4, r3]
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	3104      	adds	r1, #4
 8006cd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cda:	f1b9 0f00 	cmp.w	r9, #0
 8006cde:	d020      	beq.n	8006d22 <__multiply+0x132>
 8006ce0:	4647      	mov	r7, r8
 8006ce2:	46a4      	mov	ip, r4
 8006ce4:	f04f 0a00 	mov.w	sl, #0
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	f8b7 b000 	ldrh.w	fp, [r7]
 8006cee:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	fb09 220b 	mla	r2, r9, fp, r2
 8006cf8:	4452      	add	r2, sl
 8006cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cfe:	f84c 3b04 	str.w	r3, [ip], #4
 8006d02:	f857 3b04 	ldr.w	r3, [r7], #4
 8006d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d0a:	f8bc 3000 	ldrh.w	r3, [ip]
 8006d0e:	42bd      	cmp	r5, r7
 8006d10:	fb09 330a 	mla	r3, r9, sl, r3
 8006d14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d1c:	d8e5      	bhi.n	8006cea <__multiply+0xfa>
 8006d1e:	9a01      	ldr	r2, [sp, #4]
 8006d20:	50a3      	str	r3, [r4, r2]
 8006d22:	3404      	adds	r4, #4
 8006d24:	e79f      	b.n	8006c66 <__multiply+0x76>
 8006d26:	3e01      	subs	r6, #1
 8006d28:	e7a1      	b.n	8006c6e <__multiply+0x7e>
 8006d2a:	bf00      	nop
 8006d2c:	080092b4 	.word	0x080092b4
 8006d30:	080092c5 	.word	0x080092c5

08006d34 <__pow5mult>:
 8006d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d38:	4615      	mov	r5, r2
 8006d3a:	f012 0203 	ands.w	r2, r2, #3
 8006d3e:	4607      	mov	r7, r0
 8006d40:	460e      	mov	r6, r1
 8006d42:	d007      	beq.n	8006d54 <__pow5mult+0x20>
 8006d44:	4c25      	ldr	r4, [pc, #148]	@ (8006ddc <__pow5mult+0xa8>)
 8006d46:	3a01      	subs	r2, #1
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d4e:	f7ff fea7 	bl	8006aa0 <__multadd>
 8006d52:	4606      	mov	r6, r0
 8006d54:	10ad      	asrs	r5, r5, #2
 8006d56:	d03d      	beq.n	8006dd4 <__pow5mult+0xa0>
 8006d58:	69fc      	ldr	r4, [r7, #28]
 8006d5a:	b97c      	cbnz	r4, 8006d7c <__pow5mult+0x48>
 8006d5c:	2010      	movs	r0, #16
 8006d5e:	f7ff fd87 	bl	8006870 <malloc>
 8006d62:	4602      	mov	r2, r0
 8006d64:	61f8      	str	r0, [r7, #28]
 8006d66:	b928      	cbnz	r0, 8006d74 <__pow5mult+0x40>
 8006d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006de0 <__pow5mult+0xac>)
 8006d6e:	481d      	ldr	r0, [pc, #116]	@ (8006de4 <__pow5mult+0xb0>)
 8006d70:	f000 fbe6 	bl	8007540 <__assert_func>
 8006d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d78:	6004      	str	r4, [r0, #0]
 8006d7a:	60c4      	str	r4, [r0, #12]
 8006d7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d84:	b94c      	cbnz	r4, 8006d9a <__pow5mult+0x66>
 8006d86:	f240 2171 	movw	r1, #625	@ 0x271
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	f7ff ff1a 	bl	8006bc4 <__i2b>
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d98:	6003      	str	r3, [r0, #0]
 8006d9a:	f04f 0900 	mov.w	r9, #0
 8006d9e:	07eb      	lsls	r3, r5, #31
 8006da0:	d50a      	bpl.n	8006db8 <__pow5mult+0x84>
 8006da2:	4631      	mov	r1, r6
 8006da4:	4622      	mov	r2, r4
 8006da6:	4638      	mov	r0, r7
 8006da8:	f7ff ff22 	bl	8006bf0 <__multiply>
 8006dac:	4680      	mov	r8, r0
 8006dae:	4631      	mov	r1, r6
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff fe53 	bl	8006a5c <_Bfree>
 8006db6:	4646      	mov	r6, r8
 8006db8:	106d      	asrs	r5, r5, #1
 8006dba:	d00b      	beq.n	8006dd4 <__pow5mult+0xa0>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	b938      	cbnz	r0, 8006dd0 <__pow5mult+0x9c>
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f7ff ff13 	bl	8006bf0 <__multiply>
 8006dca:	6020      	str	r0, [r4, #0]
 8006dcc:	f8c0 9000 	str.w	r9, [r0]
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	e7e4      	b.n	8006d9e <__pow5mult+0x6a>
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dda:	bf00      	nop
 8006ddc:	08009378 	.word	0x08009378
 8006de0:	08009245 	.word	0x08009245
 8006de4:	080092c5 	.word	0x080092c5

08006de8 <__lshift>:
 8006de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	460c      	mov	r4, r1
 8006dee:	4607      	mov	r7, r0
 8006df0:	4691      	mov	r9, r2
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	6849      	ldr	r1, [r1, #4]
 8006df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e00:	f108 0601 	add.w	r6, r8, #1
 8006e04:	42b3      	cmp	r3, r6
 8006e06:	db0b      	blt.n	8006e20 <__lshift+0x38>
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff fde7 	bl	80069dc <_Balloc>
 8006e0e:	4605      	mov	r5, r0
 8006e10:	b948      	cbnz	r0, 8006e26 <__lshift+0x3e>
 8006e12:	4602      	mov	r2, r0
 8006e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e18:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <__lshift+0xd0>)
 8006e1a:	4828      	ldr	r0, [pc, #160]	@ (8006ebc <__lshift+0xd4>)
 8006e1c:	f000 fb90 	bl	8007540 <__assert_func>
 8006e20:	3101      	adds	r1, #1
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	e7ee      	b.n	8006e04 <__lshift+0x1c>
 8006e26:	2300      	movs	r3, #0
 8006e28:	f100 0114 	add.w	r1, r0, #20
 8006e2c:	f100 0210 	add.w	r2, r0, #16
 8006e30:	4618      	mov	r0, r3
 8006e32:	4553      	cmp	r3, sl
 8006e34:	db33      	blt.n	8006e9e <__lshift+0xb6>
 8006e36:	6920      	ldr	r0, [r4, #16]
 8006e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e3c:	f104 0314 	add.w	r3, r4, #20
 8006e40:	f019 091f 	ands.w	r9, r9, #31
 8006e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e4c:	d02b      	beq.n	8006ea6 <__lshift+0xbe>
 8006e4e:	468a      	mov	sl, r1
 8006e50:	2200      	movs	r2, #0
 8006e52:	f1c9 0e20 	rsb	lr, r9, #32
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	fa00 f009 	lsl.w	r0, r0, r9
 8006e5c:	4310      	orrs	r0, r2
 8006e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	459c      	cmp	ip, r3
 8006e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e6c:	d8f3      	bhi.n	8006e56 <__lshift+0x6e>
 8006e6e:	ebac 0304 	sub.w	r3, ip, r4
 8006e72:	3b15      	subs	r3, #21
 8006e74:	f023 0303 	bic.w	r3, r3, #3
 8006e78:	3304      	adds	r3, #4
 8006e7a:	f104 0015 	add.w	r0, r4, #21
 8006e7e:	4560      	cmp	r0, ip
 8006e80:	bf88      	it	hi
 8006e82:	2304      	movhi	r3, #4
 8006e84:	50ca      	str	r2, [r1, r3]
 8006e86:	b10a      	cbz	r2, 8006e8c <__lshift+0xa4>
 8006e88:	f108 0602 	add.w	r6, r8, #2
 8006e8c:	3e01      	subs	r6, #1
 8006e8e:	4638      	mov	r0, r7
 8006e90:	4621      	mov	r1, r4
 8006e92:	612e      	str	r6, [r5, #16]
 8006e94:	f7ff fde2 	bl	8006a5c <_Bfree>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	e7c5      	b.n	8006e32 <__lshift+0x4a>
 8006ea6:	3904      	subs	r1, #4
 8006ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eac:	459c      	cmp	ip, r3
 8006eae:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eb2:	d8f9      	bhi.n	8006ea8 <__lshift+0xc0>
 8006eb4:	e7ea      	b.n	8006e8c <__lshift+0xa4>
 8006eb6:	bf00      	nop
 8006eb8:	080092b4 	.word	0x080092b4
 8006ebc:	080092c5 	.word	0x080092c5

08006ec0 <__mcmp>:
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	690a      	ldr	r2, [r1, #16]
 8006ec4:	6900      	ldr	r0, [r0, #16]
 8006ec6:	b530      	push	{r4, r5, lr}
 8006ec8:	1a80      	subs	r0, r0, r2
 8006eca:	d10e      	bne.n	8006eea <__mcmp+0x2a>
 8006ecc:	3314      	adds	r3, #20
 8006ece:	3114      	adds	r1, #20
 8006ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ee0:	4295      	cmp	r5, r2
 8006ee2:	d003      	beq.n	8006eec <__mcmp+0x2c>
 8006ee4:	d205      	bcs.n	8006ef2 <__mcmp+0x32>
 8006ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eea:	bd30      	pop	{r4, r5, pc}
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	d3f3      	bcc.n	8006ed8 <__mcmp+0x18>
 8006ef0:	e7fb      	b.n	8006eea <__mcmp+0x2a>
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	e7f9      	b.n	8006eea <__mcmp+0x2a>
	...

08006ef8 <__mdiff>:
 8006ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	4689      	mov	r9, r1
 8006efe:	4606      	mov	r6, r0
 8006f00:	4611      	mov	r1, r2
 8006f02:	4648      	mov	r0, r9
 8006f04:	4614      	mov	r4, r2
 8006f06:	f7ff ffdb 	bl	8006ec0 <__mcmp>
 8006f0a:	1e05      	subs	r5, r0, #0
 8006f0c:	d112      	bne.n	8006f34 <__mdiff+0x3c>
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff fd63 	bl	80069dc <_Balloc>
 8006f16:	4602      	mov	r2, r0
 8006f18:	b928      	cbnz	r0, 8006f26 <__mdiff+0x2e>
 8006f1a:	f240 2137 	movw	r1, #567	@ 0x237
 8006f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8007018 <__mdiff+0x120>)
 8006f20:	483e      	ldr	r0, [pc, #248]	@ (800701c <__mdiff+0x124>)
 8006f22:	f000 fb0d 	bl	8007540 <__assert_func>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	b003      	add	sp, #12
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	bfbc      	itt	lt
 8006f36:	464b      	movlt	r3, r9
 8006f38:	46a1      	movlt	r9, r4
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f40:	bfba      	itte	lt
 8006f42:	461c      	movlt	r4, r3
 8006f44:	2501      	movlt	r5, #1
 8006f46:	2500      	movge	r5, #0
 8006f48:	f7ff fd48 	bl	80069dc <_Balloc>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	b918      	cbnz	r0, 8006f58 <__mdiff+0x60>
 8006f50:	f240 2145 	movw	r1, #581	@ 0x245
 8006f54:	4b30      	ldr	r3, [pc, #192]	@ (8007018 <__mdiff+0x120>)
 8006f56:	e7e3      	b.n	8006f20 <__mdiff+0x28>
 8006f58:	f100 0b14 	add.w	fp, r0, #20
 8006f5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f60:	f109 0310 	add.w	r3, r9, #16
 8006f64:	60c5      	str	r5, [r0, #12]
 8006f66:	f04f 0c00 	mov.w	ip, #0
 8006f6a:	f109 0514 	add.w	r5, r9, #20
 8006f6e:	46d9      	mov	r9, fp
 8006f70:	6926      	ldr	r6, [r4, #16]
 8006f72:	f104 0e14 	add.w	lr, r4, #20
 8006f76:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f7a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f8a:	b281      	uxth	r1, r0
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	fa1f f38a 	uxth.w	r3, sl
 8006f92:	1a5b      	subs	r3, r3, r1
 8006f94:	0c00      	lsrs	r0, r0, #16
 8006f96:	4463      	add	r3, ip
 8006f98:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f9c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fa6:	4576      	cmp	r6, lr
 8006fa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fac:	f849 3b04 	str.w	r3, [r9], #4
 8006fb0:	d8e6      	bhi.n	8006f80 <__mdiff+0x88>
 8006fb2:	1b33      	subs	r3, r6, r4
 8006fb4:	3b15      	subs	r3, #21
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	3415      	adds	r4, #21
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	bf38      	it	cc
 8006fc2:	2304      	movcc	r3, #4
 8006fc4:	441d      	add	r5, r3
 8006fc6:	445b      	add	r3, fp
 8006fc8:	461e      	mov	r6, r3
 8006fca:	462c      	mov	r4, r5
 8006fcc:	4544      	cmp	r4, r8
 8006fce:	d30e      	bcc.n	8006fee <__mdiff+0xf6>
 8006fd0:	f108 0103 	add.w	r1, r8, #3
 8006fd4:	1b49      	subs	r1, r1, r5
 8006fd6:	f021 0103 	bic.w	r1, r1, #3
 8006fda:	3d03      	subs	r5, #3
 8006fdc:	45a8      	cmp	r8, r5
 8006fde:	bf38      	it	cc
 8006fe0:	2100      	movcc	r1, #0
 8006fe2:	440b      	add	r3, r1
 8006fe4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fe8:	b199      	cbz	r1, 8007012 <__mdiff+0x11a>
 8006fea:	6117      	str	r7, [r2, #16]
 8006fec:	e79e      	b.n	8006f2c <__mdiff+0x34>
 8006fee:	46e6      	mov	lr, ip
 8006ff0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ff4:	fa1f fc81 	uxth.w	ip, r1
 8006ff8:	44f4      	add	ip, lr
 8006ffa:	0c08      	lsrs	r0, r1, #16
 8006ffc:	4471      	add	r1, lr
 8006ffe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007002:	b289      	uxth	r1, r1
 8007004:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800700c:	f846 1b04 	str.w	r1, [r6], #4
 8007010:	e7dc      	b.n	8006fcc <__mdiff+0xd4>
 8007012:	3f01      	subs	r7, #1
 8007014:	e7e6      	b.n	8006fe4 <__mdiff+0xec>
 8007016:	bf00      	nop
 8007018:	080092b4 	.word	0x080092b4
 800701c:	080092c5 	.word	0x080092c5

08007020 <__d2b>:
 8007020:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007024:	2101      	movs	r1, #1
 8007026:	4690      	mov	r8, r2
 8007028:	4699      	mov	r9, r3
 800702a:	9e08      	ldr	r6, [sp, #32]
 800702c:	f7ff fcd6 	bl	80069dc <_Balloc>
 8007030:	4604      	mov	r4, r0
 8007032:	b930      	cbnz	r0, 8007042 <__d2b+0x22>
 8007034:	4602      	mov	r2, r0
 8007036:	f240 310f 	movw	r1, #783	@ 0x30f
 800703a:	4b23      	ldr	r3, [pc, #140]	@ (80070c8 <__d2b+0xa8>)
 800703c:	4823      	ldr	r0, [pc, #140]	@ (80070cc <__d2b+0xac>)
 800703e:	f000 fa7f 	bl	8007540 <__assert_func>
 8007042:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007046:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800704a:	b10d      	cbz	r5, 8007050 <__d2b+0x30>
 800704c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	f1b8 0300 	subs.w	r3, r8, #0
 8007056:	d024      	beq.n	80070a2 <__d2b+0x82>
 8007058:	4668      	mov	r0, sp
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	f7ff fd85 	bl	8006b6a <__lo0bits>
 8007060:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007064:	b1d8      	cbz	r0, 800709e <__d2b+0x7e>
 8007066:	f1c0 0320 	rsb	r3, r0, #32
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	430b      	orrs	r3, r1
 8007070:	40c2      	lsrs	r2, r0
 8007072:	6163      	str	r3, [r4, #20]
 8007074:	9201      	str	r2, [sp, #4]
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf0c      	ite	eq
 800707c:	2201      	moveq	r2, #1
 800707e:	2202      	movne	r2, #2
 8007080:	61a3      	str	r3, [r4, #24]
 8007082:	6122      	str	r2, [r4, #16]
 8007084:	b1ad      	cbz	r5, 80070b2 <__d2b+0x92>
 8007086:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800708a:	4405      	add	r5, r0
 800708c:	6035      	str	r5, [r6, #0]
 800708e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007094:	6018      	str	r0, [r3, #0]
 8007096:	4620      	mov	r0, r4
 8007098:	b002      	add	sp, #8
 800709a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800709e:	6161      	str	r1, [r4, #20]
 80070a0:	e7e9      	b.n	8007076 <__d2b+0x56>
 80070a2:	a801      	add	r0, sp, #4
 80070a4:	f7ff fd61 	bl	8006b6a <__lo0bits>
 80070a8:	9b01      	ldr	r3, [sp, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	6163      	str	r3, [r4, #20]
 80070ae:	3020      	adds	r0, #32
 80070b0:	e7e7      	b.n	8007082 <__d2b+0x62>
 80070b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070ba:	6030      	str	r0, [r6, #0]
 80070bc:	6918      	ldr	r0, [r3, #16]
 80070be:	f7ff fd35 	bl	8006b2c <__hi0bits>
 80070c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070c6:	e7e4      	b.n	8007092 <__d2b+0x72>
 80070c8:	080092b4 	.word	0x080092b4
 80070cc:	080092c5 	.word	0x080092c5

080070d0 <__ssputs_r>:
 80070d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	461f      	mov	r7, r3
 80070d6:	688e      	ldr	r6, [r1, #8]
 80070d8:	4682      	mov	sl, r0
 80070da:	42be      	cmp	r6, r7
 80070dc:	460c      	mov	r4, r1
 80070de:	4690      	mov	r8, r2
 80070e0:	680b      	ldr	r3, [r1, #0]
 80070e2:	d82d      	bhi.n	8007140 <__ssputs_r+0x70>
 80070e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070ec:	d026      	beq.n	800713c <__ssputs_r+0x6c>
 80070ee:	6965      	ldr	r5, [r4, #20]
 80070f0:	6909      	ldr	r1, [r1, #16]
 80070f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070f6:	eba3 0901 	sub.w	r9, r3, r1
 80070fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070fe:	1c7b      	adds	r3, r7, #1
 8007100:	444b      	add	r3, r9
 8007102:	106d      	asrs	r5, r5, #1
 8007104:	429d      	cmp	r5, r3
 8007106:	bf38      	it	cc
 8007108:	461d      	movcc	r5, r3
 800710a:	0553      	lsls	r3, r2, #21
 800710c:	d527      	bpl.n	800715e <__ssputs_r+0x8e>
 800710e:	4629      	mov	r1, r5
 8007110:	f7ff fbd8 	bl	80068c4 <_malloc_r>
 8007114:	4606      	mov	r6, r0
 8007116:	b360      	cbz	r0, 8007172 <__ssputs_r+0xa2>
 8007118:	464a      	mov	r2, r9
 800711a:	6921      	ldr	r1, [r4, #16]
 800711c:	f000 fa02 	bl	8007524 <memcpy>
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800712a:	81a3      	strh	r3, [r4, #12]
 800712c:	6126      	str	r6, [r4, #16]
 800712e:	444e      	add	r6, r9
 8007130:	6026      	str	r6, [r4, #0]
 8007132:	463e      	mov	r6, r7
 8007134:	6165      	str	r5, [r4, #20]
 8007136:	eba5 0509 	sub.w	r5, r5, r9
 800713a:	60a5      	str	r5, [r4, #8]
 800713c:	42be      	cmp	r6, r7
 800713e:	d900      	bls.n	8007142 <__ssputs_r+0x72>
 8007140:	463e      	mov	r6, r7
 8007142:	4632      	mov	r2, r6
 8007144:	4641      	mov	r1, r8
 8007146:	6820      	ldr	r0, [r4, #0]
 8007148:	f000 f9c2 	bl	80074d0 <memmove>
 800714c:	2000      	movs	r0, #0
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	1b9b      	subs	r3, r3, r6
 8007152:	60a3      	str	r3, [r4, #8]
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	4433      	add	r3, r6
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	462a      	mov	r2, r5
 8007160:	f000 fa32 	bl	80075c8 <_realloc_r>
 8007164:	4606      	mov	r6, r0
 8007166:	2800      	cmp	r0, #0
 8007168:	d1e0      	bne.n	800712c <__ssputs_r+0x5c>
 800716a:	4650      	mov	r0, sl
 800716c:	6921      	ldr	r1, [r4, #16]
 800716e:	f7ff fb37 	bl	80067e0 <_free_r>
 8007172:	230c      	movs	r3, #12
 8007174:	f8ca 3000 	str.w	r3, [sl]
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	e7e9      	b.n	800715a <__ssputs_r+0x8a>
	...

08007188 <_svfiprintf_r>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	4698      	mov	r8, r3
 800718e:	898b      	ldrh	r3, [r1, #12]
 8007190:	4607      	mov	r7, r0
 8007192:	061b      	lsls	r3, r3, #24
 8007194:	460d      	mov	r5, r1
 8007196:	4614      	mov	r4, r2
 8007198:	b09d      	sub	sp, #116	@ 0x74
 800719a:	d510      	bpl.n	80071be <_svfiprintf_r+0x36>
 800719c:	690b      	ldr	r3, [r1, #16]
 800719e:	b973      	cbnz	r3, 80071be <_svfiprintf_r+0x36>
 80071a0:	2140      	movs	r1, #64	@ 0x40
 80071a2:	f7ff fb8f 	bl	80068c4 <_malloc_r>
 80071a6:	6028      	str	r0, [r5, #0]
 80071a8:	6128      	str	r0, [r5, #16]
 80071aa:	b930      	cbnz	r0, 80071ba <_svfiprintf_r+0x32>
 80071ac:	230c      	movs	r3, #12
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	b01d      	add	sp, #116	@ 0x74
 80071b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ba:	2340      	movs	r3, #64	@ 0x40
 80071bc:	616b      	str	r3, [r5, #20]
 80071be:	2300      	movs	r3, #0
 80071c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c2:	2320      	movs	r3, #32
 80071c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071c8:	2330      	movs	r3, #48	@ 0x30
 80071ca:	f04f 0901 	mov.w	r9, #1
 80071ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800736c <_svfiprintf_r+0x1e4>
 80071d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071da:	4623      	mov	r3, r4
 80071dc:	469a      	mov	sl, r3
 80071de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e2:	b10a      	cbz	r2, 80071e8 <_svfiprintf_r+0x60>
 80071e4:	2a25      	cmp	r2, #37	@ 0x25
 80071e6:	d1f9      	bne.n	80071dc <_svfiprintf_r+0x54>
 80071e8:	ebba 0b04 	subs.w	fp, sl, r4
 80071ec:	d00b      	beq.n	8007206 <_svfiprintf_r+0x7e>
 80071ee:	465b      	mov	r3, fp
 80071f0:	4622      	mov	r2, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7ff ff6b 	bl	80070d0 <__ssputs_r>
 80071fa:	3001      	adds	r0, #1
 80071fc:	f000 80a7 	beq.w	800734e <_svfiprintf_r+0x1c6>
 8007200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007202:	445a      	add	r2, fp
 8007204:	9209      	str	r2, [sp, #36]	@ 0x24
 8007206:	f89a 3000 	ldrb.w	r3, [sl]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 809f 	beq.w	800734e <_svfiprintf_r+0x1c6>
 8007210:	2300      	movs	r3, #0
 8007212:	f04f 32ff 	mov.w	r2, #4294967295
 8007216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800721a:	f10a 0a01 	add.w	sl, sl, #1
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	9307      	str	r3, [sp, #28]
 8007222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007226:	931a      	str	r3, [sp, #104]	@ 0x68
 8007228:	4654      	mov	r4, sl
 800722a:	2205      	movs	r2, #5
 800722c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007230:	484e      	ldr	r0, [pc, #312]	@ (800736c <_svfiprintf_r+0x1e4>)
 8007232:	f7fe fc68 	bl	8005b06 <memchr>
 8007236:	9a04      	ldr	r2, [sp, #16]
 8007238:	b9d8      	cbnz	r0, 8007272 <_svfiprintf_r+0xea>
 800723a:	06d0      	lsls	r0, r2, #27
 800723c:	bf44      	itt	mi
 800723e:	2320      	movmi	r3, #32
 8007240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007244:	0711      	lsls	r1, r2, #28
 8007246:	bf44      	itt	mi
 8007248:	232b      	movmi	r3, #43	@ 0x2b
 800724a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800724e:	f89a 3000 	ldrb.w	r3, [sl]
 8007252:	2b2a      	cmp	r3, #42	@ 0x2a
 8007254:	d015      	beq.n	8007282 <_svfiprintf_r+0xfa>
 8007256:	4654      	mov	r4, sl
 8007258:	2000      	movs	r0, #0
 800725a:	f04f 0c0a 	mov.w	ip, #10
 800725e:	9a07      	ldr	r2, [sp, #28]
 8007260:	4621      	mov	r1, r4
 8007262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007266:	3b30      	subs	r3, #48	@ 0x30
 8007268:	2b09      	cmp	r3, #9
 800726a:	d94b      	bls.n	8007304 <_svfiprintf_r+0x17c>
 800726c:	b1b0      	cbz	r0, 800729c <_svfiprintf_r+0x114>
 800726e:	9207      	str	r2, [sp, #28]
 8007270:	e014      	b.n	800729c <_svfiprintf_r+0x114>
 8007272:	eba0 0308 	sub.w	r3, r0, r8
 8007276:	fa09 f303 	lsl.w	r3, r9, r3
 800727a:	4313      	orrs	r3, r2
 800727c:	46a2      	mov	sl, r4
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	e7d2      	b.n	8007228 <_svfiprintf_r+0xa0>
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	1d19      	adds	r1, r3, #4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	9103      	str	r1, [sp, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	bfbb      	ittet	lt
 800728e:	425b      	neglt	r3, r3
 8007290:	f042 0202 	orrlt.w	r2, r2, #2
 8007294:	9307      	strge	r3, [sp, #28]
 8007296:	9307      	strlt	r3, [sp, #28]
 8007298:	bfb8      	it	lt
 800729a:	9204      	strlt	r2, [sp, #16]
 800729c:	7823      	ldrb	r3, [r4, #0]
 800729e:	2b2e      	cmp	r3, #46	@ 0x2e
 80072a0:	d10a      	bne.n	80072b8 <_svfiprintf_r+0x130>
 80072a2:	7863      	ldrb	r3, [r4, #1]
 80072a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072a6:	d132      	bne.n	800730e <_svfiprintf_r+0x186>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	3402      	adds	r4, #2
 80072ac:	1d1a      	adds	r2, r3, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	9203      	str	r2, [sp, #12]
 80072b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072b6:	9305      	str	r3, [sp, #20]
 80072b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007370 <_svfiprintf_r+0x1e8>
 80072bc:	2203      	movs	r2, #3
 80072be:	4650      	mov	r0, sl
 80072c0:	7821      	ldrb	r1, [r4, #0]
 80072c2:	f7fe fc20 	bl	8005b06 <memchr>
 80072c6:	b138      	cbz	r0, 80072d8 <_svfiprintf_r+0x150>
 80072c8:	2240      	movs	r2, #64	@ 0x40
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	eba0 000a 	sub.w	r0, r0, sl
 80072d0:	4082      	lsls	r2, r0
 80072d2:	4313      	orrs	r3, r2
 80072d4:	3401      	adds	r4, #1
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072dc:	2206      	movs	r2, #6
 80072de:	4825      	ldr	r0, [pc, #148]	@ (8007374 <_svfiprintf_r+0x1ec>)
 80072e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072e4:	f7fe fc0f 	bl	8005b06 <memchr>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d036      	beq.n	800735a <_svfiprintf_r+0x1d2>
 80072ec:	4b22      	ldr	r3, [pc, #136]	@ (8007378 <_svfiprintf_r+0x1f0>)
 80072ee:	bb1b      	cbnz	r3, 8007338 <_svfiprintf_r+0x1b0>
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	3307      	adds	r3, #7
 80072f4:	f023 0307 	bic.w	r3, r3, #7
 80072f8:	3308      	adds	r3, #8
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fe:	4433      	add	r3, r6
 8007300:	9309      	str	r3, [sp, #36]	@ 0x24
 8007302:	e76a      	b.n	80071da <_svfiprintf_r+0x52>
 8007304:	460c      	mov	r4, r1
 8007306:	2001      	movs	r0, #1
 8007308:	fb0c 3202 	mla	r2, ip, r2, r3
 800730c:	e7a8      	b.n	8007260 <_svfiprintf_r+0xd8>
 800730e:	2300      	movs	r3, #0
 8007310:	f04f 0c0a 	mov.w	ip, #10
 8007314:	4619      	mov	r1, r3
 8007316:	3401      	adds	r4, #1
 8007318:	9305      	str	r3, [sp, #20]
 800731a:	4620      	mov	r0, r4
 800731c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007320:	3a30      	subs	r2, #48	@ 0x30
 8007322:	2a09      	cmp	r2, #9
 8007324:	d903      	bls.n	800732e <_svfiprintf_r+0x1a6>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0c6      	beq.n	80072b8 <_svfiprintf_r+0x130>
 800732a:	9105      	str	r1, [sp, #20]
 800732c:	e7c4      	b.n	80072b8 <_svfiprintf_r+0x130>
 800732e:	4604      	mov	r4, r0
 8007330:	2301      	movs	r3, #1
 8007332:	fb0c 2101 	mla	r1, ip, r1, r2
 8007336:	e7f0      	b.n	800731a <_svfiprintf_r+0x192>
 8007338:	ab03      	add	r3, sp, #12
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	462a      	mov	r2, r5
 800733e:	4638      	mov	r0, r7
 8007340:	4b0e      	ldr	r3, [pc, #56]	@ (800737c <_svfiprintf_r+0x1f4>)
 8007342:	a904      	add	r1, sp, #16
 8007344:	f7fd fe7c 	bl	8005040 <_printf_float>
 8007348:	1c42      	adds	r2, r0, #1
 800734a:	4606      	mov	r6, r0
 800734c:	d1d6      	bne.n	80072fc <_svfiprintf_r+0x174>
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	065b      	lsls	r3, r3, #25
 8007352:	f53f af2d 	bmi.w	80071b0 <_svfiprintf_r+0x28>
 8007356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007358:	e72c      	b.n	80071b4 <_svfiprintf_r+0x2c>
 800735a:	ab03      	add	r3, sp, #12
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	462a      	mov	r2, r5
 8007360:	4638      	mov	r0, r7
 8007362:	4b06      	ldr	r3, [pc, #24]	@ (800737c <_svfiprintf_r+0x1f4>)
 8007364:	a904      	add	r1, sp, #16
 8007366:	f7fe f909 	bl	800557c <_printf_i>
 800736a:	e7ed      	b.n	8007348 <_svfiprintf_r+0x1c0>
 800736c:	0800931e 	.word	0x0800931e
 8007370:	08009324 	.word	0x08009324
 8007374:	08009328 	.word	0x08009328
 8007378:	08005041 	.word	0x08005041
 800737c:	080070d1 	.word	0x080070d1

08007380 <__sflush_r>:
 8007380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	0716      	lsls	r6, r2, #28
 8007388:	4605      	mov	r5, r0
 800738a:	460c      	mov	r4, r1
 800738c:	d454      	bmi.n	8007438 <__sflush_r+0xb8>
 800738e:	684b      	ldr	r3, [r1, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc02      	bgt.n	800739a <__sflush_r+0x1a>
 8007394:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	dd48      	ble.n	800742c <__sflush_r+0xac>
 800739a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800739c:	2e00      	cmp	r6, #0
 800739e:	d045      	beq.n	800742c <__sflush_r+0xac>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073a6:	682f      	ldr	r7, [r5, #0]
 80073a8:	6a21      	ldr	r1, [r4, #32]
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	d030      	beq.n	8007410 <__sflush_r+0x90>
 80073ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	0759      	lsls	r1, r3, #29
 80073b4:	d505      	bpl.n	80073c2 <__sflush_r+0x42>
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	1ad2      	subs	r2, r2, r3
 80073ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073bc:	b10b      	cbz	r3, 80073c2 <__sflush_r+0x42>
 80073be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	4628      	mov	r0, r5
 80073c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073c8:	6a21      	ldr	r1, [r4, #32]
 80073ca:	47b0      	blx	r6
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	d106      	bne.n	80073e0 <__sflush_r+0x60>
 80073d2:	6829      	ldr	r1, [r5, #0]
 80073d4:	291d      	cmp	r1, #29
 80073d6:	d82b      	bhi.n	8007430 <__sflush_r+0xb0>
 80073d8:	4a28      	ldr	r2, [pc, #160]	@ (800747c <__sflush_r+0xfc>)
 80073da:	40ca      	lsrs	r2, r1
 80073dc:	07d6      	lsls	r6, r2, #31
 80073de:	d527      	bpl.n	8007430 <__sflush_r+0xb0>
 80073e0:	2200      	movs	r2, #0
 80073e2:	6062      	str	r2, [r4, #4]
 80073e4:	6922      	ldr	r2, [r4, #16]
 80073e6:	04d9      	lsls	r1, r3, #19
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	d504      	bpl.n	80073f6 <__sflush_r+0x76>
 80073ec:	1c42      	adds	r2, r0, #1
 80073ee:	d101      	bne.n	80073f4 <__sflush_r+0x74>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b903      	cbnz	r3, 80073f6 <__sflush_r+0x76>
 80073f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80073f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073f8:	602f      	str	r7, [r5, #0]
 80073fa:	b1b9      	cbz	r1, 800742c <__sflush_r+0xac>
 80073fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007400:	4299      	cmp	r1, r3
 8007402:	d002      	beq.n	800740a <__sflush_r+0x8a>
 8007404:	4628      	mov	r0, r5
 8007406:	f7ff f9eb 	bl	80067e0 <_free_r>
 800740a:	2300      	movs	r3, #0
 800740c:	6363      	str	r3, [r4, #52]	@ 0x34
 800740e:	e00d      	b.n	800742c <__sflush_r+0xac>
 8007410:	2301      	movs	r3, #1
 8007412:	4628      	mov	r0, r5
 8007414:	47b0      	blx	r6
 8007416:	4602      	mov	r2, r0
 8007418:	1c50      	adds	r0, r2, #1
 800741a:	d1c9      	bne.n	80073b0 <__sflush_r+0x30>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0c6      	beq.n	80073b0 <__sflush_r+0x30>
 8007422:	2b1d      	cmp	r3, #29
 8007424:	d001      	beq.n	800742a <__sflush_r+0xaa>
 8007426:	2b16      	cmp	r3, #22
 8007428:	d11d      	bne.n	8007466 <__sflush_r+0xe6>
 800742a:	602f      	str	r7, [r5, #0]
 800742c:	2000      	movs	r0, #0
 800742e:	e021      	b.n	8007474 <__sflush_r+0xf4>
 8007430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007434:	b21b      	sxth	r3, r3
 8007436:	e01a      	b.n	800746e <__sflush_r+0xee>
 8007438:	690f      	ldr	r7, [r1, #16]
 800743a:	2f00      	cmp	r7, #0
 800743c:	d0f6      	beq.n	800742c <__sflush_r+0xac>
 800743e:	0793      	lsls	r3, r2, #30
 8007440:	bf18      	it	ne
 8007442:	2300      	movne	r3, #0
 8007444:	680e      	ldr	r6, [r1, #0]
 8007446:	bf08      	it	eq
 8007448:	694b      	ldreq	r3, [r1, #20]
 800744a:	1bf6      	subs	r6, r6, r7
 800744c:	600f      	str	r7, [r1, #0]
 800744e:	608b      	str	r3, [r1, #8]
 8007450:	2e00      	cmp	r6, #0
 8007452:	ddeb      	ble.n	800742c <__sflush_r+0xac>
 8007454:	4633      	mov	r3, r6
 8007456:	463a      	mov	r2, r7
 8007458:	4628      	mov	r0, r5
 800745a:	6a21      	ldr	r1, [r4, #32]
 800745c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007460:	47e0      	blx	ip
 8007462:	2800      	cmp	r0, #0
 8007464:	dc07      	bgt.n	8007476 <__sflush_r+0xf6>
 8007466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800746e:	f04f 30ff 	mov.w	r0, #4294967295
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007476:	4407      	add	r7, r0
 8007478:	1a36      	subs	r6, r6, r0
 800747a:	e7e9      	b.n	8007450 <__sflush_r+0xd0>
 800747c:	20400001 	.word	0x20400001

08007480 <_fflush_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	690b      	ldr	r3, [r1, #16]
 8007484:	4605      	mov	r5, r0
 8007486:	460c      	mov	r4, r1
 8007488:	b913      	cbnz	r3, 8007490 <_fflush_r+0x10>
 800748a:	2500      	movs	r5, #0
 800748c:	4628      	mov	r0, r5
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	b118      	cbz	r0, 800749a <_fflush_r+0x1a>
 8007492:	6a03      	ldr	r3, [r0, #32]
 8007494:	b90b      	cbnz	r3, 800749a <_fflush_r+0x1a>
 8007496:	f7fe fa1b 	bl	80058d0 <__sinit>
 800749a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f3      	beq.n	800748a <_fflush_r+0xa>
 80074a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074a4:	07d0      	lsls	r0, r2, #31
 80074a6:	d404      	bmi.n	80074b2 <_fflush_r+0x32>
 80074a8:	0599      	lsls	r1, r3, #22
 80074aa:	d402      	bmi.n	80074b2 <_fflush_r+0x32>
 80074ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ae:	f7fe fb28 	bl	8005b02 <__retarget_lock_acquire_recursive>
 80074b2:	4628      	mov	r0, r5
 80074b4:	4621      	mov	r1, r4
 80074b6:	f7ff ff63 	bl	8007380 <__sflush_r>
 80074ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074bc:	4605      	mov	r5, r0
 80074be:	07da      	lsls	r2, r3, #31
 80074c0:	d4e4      	bmi.n	800748c <_fflush_r+0xc>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	059b      	lsls	r3, r3, #22
 80074c6:	d4e1      	bmi.n	800748c <_fflush_r+0xc>
 80074c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ca:	f7fe fb1b 	bl	8005b04 <__retarget_lock_release_recursive>
 80074ce:	e7dd      	b.n	800748c <_fflush_r+0xc>

080074d0 <memmove>:
 80074d0:	4288      	cmp	r0, r1
 80074d2:	b510      	push	{r4, lr}
 80074d4:	eb01 0402 	add.w	r4, r1, r2
 80074d8:	d902      	bls.n	80074e0 <memmove+0x10>
 80074da:	4284      	cmp	r4, r0
 80074dc:	4623      	mov	r3, r4
 80074de:	d807      	bhi.n	80074f0 <memmove+0x20>
 80074e0:	1e43      	subs	r3, r0, #1
 80074e2:	42a1      	cmp	r1, r4
 80074e4:	d008      	beq.n	80074f8 <memmove+0x28>
 80074e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074ee:	e7f8      	b.n	80074e2 <memmove+0x12>
 80074f0:	4601      	mov	r1, r0
 80074f2:	4402      	add	r2, r0
 80074f4:	428a      	cmp	r2, r1
 80074f6:	d100      	bne.n	80074fa <memmove+0x2a>
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007502:	e7f7      	b.n	80074f4 <memmove+0x24>

08007504 <_sbrk_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	2300      	movs	r3, #0
 8007508:	4d05      	ldr	r5, [pc, #20]	@ (8007520 <_sbrk_r+0x1c>)
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	f7fa faee 	bl	8001af0 <_sbrk>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_sbrk_r+0x1a>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_sbrk_r+0x1a>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	2000268c 	.word	0x2000268c

08007524 <memcpy>:
 8007524:	440a      	add	r2, r1
 8007526:	4291      	cmp	r1, r2
 8007528:	f100 33ff 	add.w	r3, r0, #4294967295
 800752c:	d100      	bne.n	8007530 <memcpy+0xc>
 800752e:	4770      	bx	lr
 8007530:	b510      	push	{r4, lr}
 8007532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007536:	4291      	cmp	r1, r2
 8007538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800753c:	d1f9      	bne.n	8007532 <memcpy+0xe>
 800753e:	bd10      	pop	{r4, pc}

08007540 <__assert_func>:
 8007540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007542:	4614      	mov	r4, r2
 8007544:	461a      	mov	r2, r3
 8007546:	4b09      	ldr	r3, [pc, #36]	@ (800756c <__assert_func+0x2c>)
 8007548:	4605      	mov	r5, r0
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68d8      	ldr	r0, [r3, #12]
 800754e:	b14c      	cbz	r4, 8007564 <__assert_func+0x24>
 8007550:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <__assert_func+0x30>)
 8007552:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007556:	9100      	str	r1, [sp, #0]
 8007558:	462b      	mov	r3, r5
 800755a:	4906      	ldr	r1, [pc, #24]	@ (8007574 <__assert_func+0x34>)
 800755c:	f000 f870 	bl	8007640 <fiprintf>
 8007560:	f000 f880 	bl	8007664 <abort>
 8007564:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <__assert_func+0x38>)
 8007566:	461c      	mov	r4, r3
 8007568:	e7f3      	b.n	8007552 <__assert_func+0x12>
 800756a:	bf00      	nop
 800756c:	20000020 	.word	0x20000020
 8007570:	08009339 	.word	0x08009339
 8007574:	08009346 	.word	0x08009346
 8007578:	08009374 	.word	0x08009374

0800757c <_calloc_r>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	fba1 5402 	umull	r5, r4, r1, r2
 8007582:	b934      	cbnz	r4, 8007592 <_calloc_r+0x16>
 8007584:	4629      	mov	r1, r5
 8007586:	f7ff f99d 	bl	80068c4 <_malloc_r>
 800758a:	4606      	mov	r6, r0
 800758c:	b928      	cbnz	r0, 800759a <_calloc_r+0x1e>
 800758e:	4630      	mov	r0, r6
 8007590:	bd70      	pop	{r4, r5, r6, pc}
 8007592:	220c      	movs	r2, #12
 8007594:	2600      	movs	r6, #0
 8007596:	6002      	str	r2, [r0, #0]
 8007598:	e7f9      	b.n	800758e <_calloc_r+0x12>
 800759a:	462a      	mov	r2, r5
 800759c:	4621      	mov	r1, r4
 800759e:	f7fe fa32 	bl	8005a06 <memset>
 80075a2:	e7f4      	b.n	800758e <_calloc_r+0x12>

080075a4 <__ascii_mbtowc>:
 80075a4:	b082      	sub	sp, #8
 80075a6:	b901      	cbnz	r1, 80075aa <__ascii_mbtowc+0x6>
 80075a8:	a901      	add	r1, sp, #4
 80075aa:	b142      	cbz	r2, 80075be <__ascii_mbtowc+0x1a>
 80075ac:	b14b      	cbz	r3, 80075c2 <__ascii_mbtowc+0x1e>
 80075ae:	7813      	ldrb	r3, [r2, #0]
 80075b0:	600b      	str	r3, [r1, #0]
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	1e10      	subs	r0, r2, #0
 80075b6:	bf18      	it	ne
 80075b8:	2001      	movne	r0, #1
 80075ba:	b002      	add	sp, #8
 80075bc:	4770      	bx	lr
 80075be:	4610      	mov	r0, r2
 80075c0:	e7fb      	b.n	80075ba <__ascii_mbtowc+0x16>
 80075c2:	f06f 0001 	mvn.w	r0, #1
 80075c6:	e7f8      	b.n	80075ba <__ascii_mbtowc+0x16>

080075c8 <_realloc_r>:
 80075c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075cc:	4607      	mov	r7, r0
 80075ce:	4614      	mov	r4, r2
 80075d0:	460d      	mov	r5, r1
 80075d2:	b921      	cbnz	r1, 80075de <_realloc_r+0x16>
 80075d4:	4611      	mov	r1, r2
 80075d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075da:	f7ff b973 	b.w	80068c4 <_malloc_r>
 80075de:	b92a      	cbnz	r2, 80075ec <_realloc_r+0x24>
 80075e0:	f7ff f8fe 	bl	80067e0 <_free_r>
 80075e4:	4625      	mov	r5, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	f000 f841 	bl	8007672 <_malloc_usable_size_r>
 80075f0:	4284      	cmp	r4, r0
 80075f2:	4606      	mov	r6, r0
 80075f4:	d802      	bhi.n	80075fc <_realloc_r+0x34>
 80075f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075fa:	d8f4      	bhi.n	80075e6 <_realloc_r+0x1e>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4638      	mov	r0, r7
 8007600:	f7ff f960 	bl	80068c4 <_malloc_r>
 8007604:	4680      	mov	r8, r0
 8007606:	b908      	cbnz	r0, 800760c <_realloc_r+0x44>
 8007608:	4645      	mov	r5, r8
 800760a:	e7ec      	b.n	80075e6 <_realloc_r+0x1e>
 800760c:	42b4      	cmp	r4, r6
 800760e:	4622      	mov	r2, r4
 8007610:	4629      	mov	r1, r5
 8007612:	bf28      	it	cs
 8007614:	4632      	movcs	r2, r6
 8007616:	f7ff ff85 	bl	8007524 <memcpy>
 800761a:	4629      	mov	r1, r5
 800761c:	4638      	mov	r0, r7
 800761e:	f7ff f8df 	bl	80067e0 <_free_r>
 8007622:	e7f1      	b.n	8007608 <_realloc_r+0x40>

08007624 <__ascii_wctomb>:
 8007624:	4603      	mov	r3, r0
 8007626:	4608      	mov	r0, r1
 8007628:	b141      	cbz	r1, 800763c <__ascii_wctomb+0x18>
 800762a:	2aff      	cmp	r2, #255	@ 0xff
 800762c:	d904      	bls.n	8007638 <__ascii_wctomb+0x14>
 800762e:	228a      	movs	r2, #138	@ 0x8a
 8007630:	f04f 30ff 	mov.w	r0, #4294967295
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	4770      	bx	lr
 8007638:	2001      	movs	r0, #1
 800763a:	700a      	strb	r2, [r1, #0]
 800763c:	4770      	bx	lr
	...

08007640 <fiprintf>:
 8007640:	b40e      	push	{r1, r2, r3}
 8007642:	b503      	push	{r0, r1, lr}
 8007644:	4601      	mov	r1, r0
 8007646:	ab03      	add	r3, sp, #12
 8007648:	4805      	ldr	r0, [pc, #20]	@ (8007660 <fiprintf+0x20>)
 800764a:	f853 2b04 	ldr.w	r2, [r3], #4
 800764e:	6800      	ldr	r0, [r0, #0]
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	f000 f83d 	bl	80076d0 <_vfiprintf_r>
 8007656:	b002      	add	sp, #8
 8007658:	f85d eb04 	ldr.w	lr, [sp], #4
 800765c:	b003      	add	sp, #12
 800765e:	4770      	bx	lr
 8007660:	20000020 	.word	0x20000020

08007664 <abort>:
 8007664:	2006      	movs	r0, #6
 8007666:	b508      	push	{r3, lr}
 8007668:	f000 fa06 	bl	8007a78 <raise>
 800766c:	2001      	movs	r0, #1
 800766e:	f7fa f9ca 	bl	8001a06 <_exit>

08007672 <_malloc_usable_size_r>:
 8007672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007676:	1f18      	subs	r0, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	bfbc      	itt	lt
 800767c:	580b      	ldrlt	r3, [r1, r0]
 800767e:	18c0      	addlt	r0, r0, r3
 8007680:	4770      	bx	lr

08007682 <__sfputc_r>:
 8007682:	6893      	ldr	r3, [r2, #8]
 8007684:	b410      	push	{r4}
 8007686:	3b01      	subs	r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	6093      	str	r3, [r2, #8]
 800768c:	da07      	bge.n	800769e <__sfputc_r+0x1c>
 800768e:	6994      	ldr	r4, [r2, #24]
 8007690:	42a3      	cmp	r3, r4
 8007692:	db01      	blt.n	8007698 <__sfputc_r+0x16>
 8007694:	290a      	cmp	r1, #10
 8007696:	d102      	bne.n	800769e <__sfputc_r+0x1c>
 8007698:	bc10      	pop	{r4}
 800769a:	f000 b931 	b.w	8007900 <__swbuf_r>
 800769e:	6813      	ldr	r3, [r2, #0]
 80076a0:	1c58      	adds	r0, r3, #1
 80076a2:	6010      	str	r0, [r2, #0]
 80076a4:	7019      	strb	r1, [r3, #0]
 80076a6:	4608      	mov	r0, r1
 80076a8:	bc10      	pop	{r4}
 80076aa:	4770      	bx	lr

080076ac <__sfputs_r>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	4606      	mov	r6, r0
 80076b0:	460f      	mov	r7, r1
 80076b2:	4614      	mov	r4, r2
 80076b4:	18d5      	adds	r5, r2, r3
 80076b6:	42ac      	cmp	r4, r5
 80076b8:	d101      	bne.n	80076be <__sfputs_r+0x12>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e007      	b.n	80076ce <__sfputs_r+0x22>
 80076be:	463a      	mov	r2, r7
 80076c0:	4630      	mov	r0, r6
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	f7ff ffdc 	bl	8007682 <__sfputc_r>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	d1f3      	bne.n	80076b6 <__sfputs_r+0xa>
 80076ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076d0 <_vfiprintf_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	460d      	mov	r5, r1
 80076d6:	4614      	mov	r4, r2
 80076d8:	4698      	mov	r8, r3
 80076da:	4606      	mov	r6, r0
 80076dc:	b09d      	sub	sp, #116	@ 0x74
 80076de:	b118      	cbz	r0, 80076e8 <_vfiprintf_r+0x18>
 80076e0:	6a03      	ldr	r3, [r0, #32]
 80076e2:	b90b      	cbnz	r3, 80076e8 <_vfiprintf_r+0x18>
 80076e4:	f7fe f8f4 	bl	80058d0 <__sinit>
 80076e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ea:	07d9      	lsls	r1, r3, #31
 80076ec:	d405      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	059a      	lsls	r2, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076f6:	f7fe fa04 	bl	8005b02 <__retarget_lock_acquire_recursive>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	071b      	lsls	r3, r3, #28
 80076fe:	d501      	bpl.n	8007704 <_vfiprintf_r+0x34>
 8007700:	692b      	ldr	r3, [r5, #16]
 8007702:	b99b      	cbnz	r3, 800772c <_vfiprintf_r+0x5c>
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f000 f938 	bl	800797c <__swsetup_r>
 800770c:	b170      	cbz	r0, 800772c <_vfiprintf_r+0x5c>
 800770e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007710:	07dc      	lsls	r4, r3, #31
 8007712:	d504      	bpl.n	800771e <_vfiprintf_r+0x4e>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	b01d      	add	sp, #116	@ 0x74
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	0598      	lsls	r0, r3, #22
 8007722:	d4f7      	bmi.n	8007714 <_vfiprintf_r+0x44>
 8007724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007726:	f7fe f9ed 	bl	8005b04 <__retarget_lock_release_recursive>
 800772a:	e7f3      	b.n	8007714 <_vfiprintf_r+0x44>
 800772c:	2300      	movs	r3, #0
 800772e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007730:	2320      	movs	r3, #32
 8007732:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007736:	2330      	movs	r3, #48	@ 0x30
 8007738:	f04f 0901 	mov.w	r9, #1
 800773c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007740:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80078ec <_vfiprintf_r+0x21c>
 8007744:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007748:	4623      	mov	r3, r4
 800774a:	469a      	mov	sl, r3
 800774c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007750:	b10a      	cbz	r2, 8007756 <_vfiprintf_r+0x86>
 8007752:	2a25      	cmp	r2, #37	@ 0x25
 8007754:	d1f9      	bne.n	800774a <_vfiprintf_r+0x7a>
 8007756:	ebba 0b04 	subs.w	fp, sl, r4
 800775a:	d00b      	beq.n	8007774 <_vfiprintf_r+0xa4>
 800775c:	465b      	mov	r3, fp
 800775e:	4622      	mov	r2, r4
 8007760:	4629      	mov	r1, r5
 8007762:	4630      	mov	r0, r6
 8007764:	f7ff ffa2 	bl	80076ac <__sfputs_r>
 8007768:	3001      	adds	r0, #1
 800776a:	f000 80a7 	beq.w	80078bc <_vfiprintf_r+0x1ec>
 800776e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007770:	445a      	add	r2, fp
 8007772:	9209      	str	r2, [sp, #36]	@ 0x24
 8007774:	f89a 3000 	ldrb.w	r3, [sl]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 809f 	beq.w	80078bc <_vfiprintf_r+0x1ec>
 800777e:	2300      	movs	r3, #0
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007788:	f10a 0a01 	add.w	sl, sl, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007794:	931a      	str	r3, [sp, #104]	@ 0x68
 8007796:	4654      	mov	r4, sl
 8007798:	2205      	movs	r2, #5
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	4853      	ldr	r0, [pc, #332]	@ (80078ec <_vfiprintf_r+0x21c>)
 80077a0:	f7fe f9b1 	bl	8005b06 <memchr>
 80077a4:	9a04      	ldr	r2, [sp, #16]
 80077a6:	b9d8      	cbnz	r0, 80077e0 <_vfiprintf_r+0x110>
 80077a8:	06d1      	lsls	r1, r2, #27
 80077aa:	bf44      	itt	mi
 80077ac:	2320      	movmi	r3, #32
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077b2:	0713      	lsls	r3, r2, #28
 80077b4:	bf44      	itt	mi
 80077b6:	232b      	movmi	r3, #43	@ 0x2b
 80077b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077bc:	f89a 3000 	ldrb.w	r3, [sl]
 80077c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077c2:	d015      	beq.n	80077f0 <_vfiprintf_r+0x120>
 80077c4:	4654      	mov	r4, sl
 80077c6:	2000      	movs	r0, #0
 80077c8:	f04f 0c0a 	mov.w	ip, #10
 80077cc:	9a07      	ldr	r2, [sp, #28]
 80077ce:	4621      	mov	r1, r4
 80077d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d4:	3b30      	subs	r3, #48	@ 0x30
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d94b      	bls.n	8007872 <_vfiprintf_r+0x1a2>
 80077da:	b1b0      	cbz	r0, 800780a <_vfiprintf_r+0x13a>
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	e014      	b.n	800780a <_vfiprintf_r+0x13a>
 80077e0:	eba0 0308 	sub.w	r3, r0, r8
 80077e4:	fa09 f303 	lsl.w	r3, r9, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	46a2      	mov	sl, r4
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	e7d2      	b.n	8007796 <_vfiprintf_r+0xc6>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	1d19      	adds	r1, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	9103      	str	r1, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfbb      	ittet	lt
 80077fc:	425b      	neglt	r3, r3
 80077fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007802:	9307      	strge	r3, [sp, #28]
 8007804:	9307      	strlt	r3, [sp, #28]
 8007806:	bfb8      	it	lt
 8007808:	9204      	strlt	r2, [sp, #16]
 800780a:	7823      	ldrb	r3, [r4, #0]
 800780c:	2b2e      	cmp	r3, #46	@ 0x2e
 800780e:	d10a      	bne.n	8007826 <_vfiprintf_r+0x156>
 8007810:	7863      	ldrb	r3, [r4, #1]
 8007812:	2b2a      	cmp	r3, #42	@ 0x2a
 8007814:	d132      	bne.n	800787c <_vfiprintf_r+0x1ac>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	3402      	adds	r4, #2
 800781a:	1d1a      	adds	r2, r3, #4
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	9203      	str	r2, [sp, #12]
 8007820:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80078f0 <_vfiprintf_r+0x220>
 800782a:	2203      	movs	r2, #3
 800782c:	4650      	mov	r0, sl
 800782e:	7821      	ldrb	r1, [r4, #0]
 8007830:	f7fe f969 	bl	8005b06 <memchr>
 8007834:	b138      	cbz	r0, 8007846 <_vfiprintf_r+0x176>
 8007836:	2240      	movs	r2, #64	@ 0x40
 8007838:	9b04      	ldr	r3, [sp, #16]
 800783a:	eba0 000a 	sub.w	r0, r0, sl
 800783e:	4082      	lsls	r2, r0
 8007840:	4313      	orrs	r3, r2
 8007842:	3401      	adds	r4, #1
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784a:	2206      	movs	r2, #6
 800784c:	4829      	ldr	r0, [pc, #164]	@ (80078f4 <_vfiprintf_r+0x224>)
 800784e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007852:	f7fe f958 	bl	8005b06 <memchr>
 8007856:	2800      	cmp	r0, #0
 8007858:	d03f      	beq.n	80078da <_vfiprintf_r+0x20a>
 800785a:	4b27      	ldr	r3, [pc, #156]	@ (80078f8 <_vfiprintf_r+0x228>)
 800785c:	bb1b      	cbnz	r3, 80078a6 <_vfiprintf_r+0x1d6>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	3308      	adds	r3, #8
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786c:	443b      	add	r3, r7
 800786e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007870:	e76a      	b.n	8007748 <_vfiprintf_r+0x78>
 8007872:	460c      	mov	r4, r1
 8007874:	2001      	movs	r0, #1
 8007876:	fb0c 3202 	mla	r2, ip, r2, r3
 800787a:	e7a8      	b.n	80077ce <_vfiprintf_r+0xfe>
 800787c:	2300      	movs	r3, #0
 800787e:	f04f 0c0a 	mov.w	ip, #10
 8007882:	4619      	mov	r1, r3
 8007884:	3401      	adds	r4, #1
 8007886:	9305      	str	r3, [sp, #20]
 8007888:	4620      	mov	r0, r4
 800788a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800788e:	3a30      	subs	r2, #48	@ 0x30
 8007890:	2a09      	cmp	r2, #9
 8007892:	d903      	bls.n	800789c <_vfiprintf_r+0x1cc>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0c6      	beq.n	8007826 <_vfiprintf_r+0x156>
 8007898:	9105      	str	r1, [sp, #20]
 800789a:	e7c4      	b.n	8007826 <_vfiprintf_r+0x156>
 800789c:	4604      	mov	r4, r0
 800789e:	2301      	movs	r3, #1
 80078a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a4:	e7f0      	b.n	8007888 <_vfiprintf_r+0x1b8>
 80078a6:	ab03      	add	r3, sp, #12
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	462a      	mov	r2, r5
 80078ac:	4630      	mov	r0, r6
 80078ae:	4b13      	ldr	r3, [pc, #76]	@ (80078fc <_vfiprintf_r+0x22c>)
 80078b0:	a904      	add	r1, sp, #16
 80078b2:	f7fd fbc5 	bl	8005040 <_printf_float>
 80078b6:	4607      	mov	r7, r0
 80078b8:	1c78      	adds	r0, r7, #1
 80078ba:	d1d6      	bne.n	800786a <_vfiprintf_r+0x19a>
 80078bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078be:	07d9      	lsls	r1, r3, #31
 80078c0:	d405      	bmi.n	80078ce <_vfiprintf_r+0x1fe>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	059a      	lsls	r2, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_vfiprintf_r+0x1fe>
 80078c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ca:	f7fe f91b 	bl	8005b04 <__retarget_lock_release_recursive>
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	065b      	lsls	r3, r3, #25
 80078d2:	f53f af1f 	bmi.w	8007714 <_vfiprintf_r+0x44>
 80078d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078d8:	e71e      	b.n	8007718 <_vfiprintf_r+0x48>
 80078da:	ab03      	add	r3, sp, #12
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	462a      	mov	r2, r5
 80078e0:	4630      	mov	r0, r6
 80078e2:	4b06      	ldr	r3, [pc, #24]	@ (80078fc <_vfiprintf_r+0x22c>)
 80078e4:	a904      	add	r1, sp, #16
 80078e6:	f7fd fe49 	bl	800557c <_printf_i>
 80078ea:	e7e4      	b.n	80078b6 <_vfiprintf_r+0x1e6>
 80078ec:	0800931e 	.word	0x0800931e
 80078f0:	08009324 	.word	0x08009324
 80078f4:	08009328 	.word	0x08009328
 80078f8:	08005041 	.word	0x08005041
 80078fc:	080076ad 	.word	0x080076ad

08007900 <__swbuf_r>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	460e      	mov	r6, r1
 8007904:	4614      	mov	r4, r2
 8007906:	4605      	mov	r5, r0
 8007908:	b118      	cbz	r0, 8007912 <__swbuf_r+0x12>
 800790a:	6a03      	ldr	r3, [r0, #32]
 800790c:	b90b      	cbnz	r3, 8007912 <__swbuf_r+0x12>
 800790e:	f7fd ffdf 	bl	80058d0 <__sinit>
 8007912:	69a3      	ldr	r3, [r4, #24]
 8007914:	60a3      	str	r3, [r4, #8]
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	071a      	lsls	r2, r3, #28
 800791a:	d501      	bpl.n	8007920 <__swbuf_r+0x20>
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	b943      	cbnz	r3, 8007932 <__swbuf_r+0x32>
 8007920:	4621      	mov	r1, r4
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f82a 	bl	800797c <__swsetup_r>
 8007928:	b118      	cbz	r0, 8007932 <__swbuf_r+0x32>
 800792a:	f04f 37ff 	mov.w	r7, #4294967295
 800792e:	4638      	mov	r0, r7
 8007930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	6922      	ldr	r2, [r4, #16]
 8007936:	b2f6      	uxtb	r6, r6
 8007938:	1a98      	subs	r0, r3, r2
 800793a:	6963      	ldr	r3, [r4, #20]
 800793c:	4637      	mov	r7, r6
 800793e:	4283      	cmp	r3, r0
 8007940:	dc05      	bgt.n	800794e <__swbuf_r+0x4e>
 8007942:	4621      	mov	r1, r4
 8007944:	4628      	mov	r0, r5
 8007946:	f7ff fd9b 	bl	8007480 <_fflush_r>
 800794a:	2800      	cmp	r0, #0
 800794c:	d1ed      	bne.n	800792a <__swbuf_r+0x2a>
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	3b01      	subs	r3, #1
 8007952:	60a3      	str	r3, [r4, #8]
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	6022      	str	r2, [r4, #0]
 800795a:	701e      	strb	r6, [r3, #0]
 800795c:	6962      	ldr	r2, [r4, #20]
 800795e:	1c43      	adds	r3, r0, #1
 8007960:	429a      	cmp	r2, r3
 8007962:	d004      	beq.n	800796e <__swbuf_r+0x6e>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	07db      	lsls	r3, r3, #31
 8007968:	d5e1      	bpl.n	800792e <__swbuf_r+0x2e>
 800796a:	2e0a      	cmp	r6, #10
 800796c:	d1df      	bne.n	800792e <__swbuf_r+0x2e>
 800796e:	4621      	mov	r1, r4
 8007970:	4628      	mov	r0, r5
 8007972:	f7ff fd85 	bl	8007480 <_fflush_r>
 8007976:	2800      	cmp	r0, #0
 8007978:	d0d9      	beq.n	800792e <__swbuf_r+0x2e>
 800797a:	e7d6      	b.n	800792a <__swbuf_r+0x2a>

0800797c <__swsetup_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4b29      	ldr	r3, [pc, #164]	@ (8007a24 <__swsetup_r+0xa8>)
 8007980:	4605      	mov	r5, r0
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	460c      	mov	r4, r1
 8007986:	b118      	cbz	r0, 8007990 <__swsetup_r+0x14>
 8007988:	6a03      	ldr	r3, [r0, #32]
 800798a:	b90b      	cbnz	r3, 8007990 <__swsetup_r+0x14>
 800798c:	f7fd ffa0 	bl	80058d0 <__sinit>
 8007990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007994:	0719      	lsls	r1, r3, #28
 8007996:	d422      	bmi.n	80079de <__swsetup_r+0x62>
 8007998:	06da      	lsls	r2, r3, #27
 800799a:	d407      	bmi.n	80079ac <__swsetup_r+0x30>
 800799c:	2209      	movs	r2, #9
 800799e:	602a      	str	r2, [r5, #0]
 80079a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	e033      	b.n	8007a14 <__swsetup_r+0x98>
 80079ac:	0758      	lsls	r0, r3, #29
 80079ae:	d512      	bpl.n	80079d6 <__swsetup_r+0x5a>
 80079b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079b2:	b141      	cbz	r1, 80079c6 <__swsetup_r+0x4a>
 80079b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079b8:	4299      	cmp	r1, r3
 80079ba:	d002      	beq.n	80079c2 <__swsetup_r+0x46>
 80079bc:	4628      	mov	r0, r5
 80079be:	f7fe ff0f 	bl	80067e0 <_free_r>
 80079c2:	2300      	movs	r3, #0
 80079c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	2300      	movs	r3, #0
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0308 	orr.w	r3, r3, #8
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	b94b      	cbnz	r3, 80079f6 <__swsetup_r+0x7a>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ec:	d003      	beq.n	80079f6 <__swsetup_r+0x7a>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4628      	mov	r0, r5
 80079f2:	f000 f882 	bl	8007afa <__smakebuf_r>
 80079f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fa:	f013 0201 	ands.w	r2, r3, #1
 80079fe:	d00a      	beq.n	8007a16 <__swsetup_r+0x9a>
 8007a00:	2200      	movs	r2, #0
 8007a02:	60a2      	str	r2, [r4, #8]
 8007a04:	6962      	ldr	r2, [r4, #20]
 8007a06:	4252      	negs	r2, r2
 8007a08:	61a2      	str	r2, [r4, #24]
 8007a0a:	6922      	ldr	r2, [r4, #16]
 8007a0c:	b942      	cbnz	r2, 8007a20 <__swsetup_r+0xa4>
 8007a0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a12:	d1c5      	bne.n	80079a0 <__swsetup_r+0x24>
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	0799      	lsls	r1, r3, #30
 8007a18:	bf58      	it	pl
 8007a1a:	6962      	ldrpl	r2, [r4, #20]
 8007a1c:	60a2      	str	r2, [r4, #8]
 8007a1e:	e7f4      	b.n	8007a0a <__swsetup_r+0x8e>
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7f7      	b.n	8007a14 <__swsetup_r+0x98>
 8007a24:	20000020 	.word	0x20000020

08007a28 <_raise_r>:
 8007a28:	291f      	cmp	r1, #31
 8007a2a:	b538      	push	{r3, r4, r5, lr}
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	d904      	bls.n	8007a3c <_raise_r+0x14>
 8007a32:	2316      	movs	r3, #22
 8007a34:	6003      	str	r3, [r0, #0]
 8007a36:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a3e:	b112      	cbz	r2, 8007a46 <_raise_r+0x1e>
 8007a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a44:	b94b      	cbnz	r3, 8007a5a <_raise_r+0x32>
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f830 	bl	8007aac <_getpid_r>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4601      	mov	r1, r0
 8007a50:	4628      	mov	r0, r5
 8007a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a56:	f000 b817 	b.w	8007a88 <_kill_r>
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d00a      	beq.n	8007a74 <_raise_r+0x4c>
 8007a5e:	1c59      	adds	r1, r3, #1
 8007a60:	d103      	bne.n	8007a6a <_raise_r+0x42>
 8007a62:	2316      	movs	r3, #22
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	2001      	movs	r0, #1
 8007a68:	e7e7      	b.n	8007a3a <_raise_r+0x12>
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a72:	4798      	blx	r3
 8007a74:	2000      	movs	r0, #0
 8007a76:	e7e0      	b.n	8007a3a <_raise_r+0x12>

08007a78 <raise>:
 8007a78:	4b02      	ldr	r3, [pc, #8]	@ (8007a84 <raise+0xc>)
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	f7ff bfd3 	b.w	8007a28 <_raise_r>
 8007a82:	bf00      	nop
 8007a84:	20000020 	.word	0x20000020

08007a88 <_kill_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4d06      	ldr	r5, [pc, #24]	@ (8007aa8 <_kill_r+0x20>)
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	4611      	mov	r1, r2
 8007a94:	602b      	str	r3, [r5, #0]
 8007a96:	f7f9 ffa6 	bl	80019e6 <_kill>
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	d102      	bne.n	8007aa4 <_kill_r+0x1c>
 8007a9e:	682b      	ldr	r3, [r5, #0]
 8007aa0:	b103      	cbz	r3, 8007aa4 <_kill_r+0x1c>
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	bd38      	pop	{r3, r4, r5, pc}
 8007aa6:	bf00      	nop
 8007aa8:	2000268c 	.word	0x2000268c

08007aac <_getpid_r>:
 8007aac:	f7f9 bf94 	b.w	80019d8 <_getpid>

08007ab0 <__swhatbuf_r>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	4615      	mov	r5, r2
 8007aba:	2900      	cmp	r1, #0
 8007abc:	461e      	mov	r6, r3
 8007abe:	b096      	sub	sp, #88	@ 0x58
 8007ac0:	da0c      	bge.n	8007adc <__swhatbuf_r+0x2c>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007aca:	bf14      	ite	ne
 8007acc:	2340      	movne	r3, #64	@ 0x40
 8007ace:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	6031      	str	r1, [r6, #0]
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	b016      	add	sp, #88	@ 0x58
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	466a      	mov	r2, sp
 8007ade:	f000 f849 	bl	8007b74 <_fstat_r>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	dbed      	blt.n	8007ac2 <__swhatbuf_r+0x12>
 8007ae6:	9901      	ldr	r1, [sp, #4]
 8007ae8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007af0:	4259      	negs	r1, r3
 8007af2:	4159      	adcs	r1, r3
 8007af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007af8:	e7eb      	b.n	8007ad2 <__swhatbuf_r+0x22>

08007afa <__smakebuf_r>:
 8007afa:	898b      	ldrh	r3, [r1, #12]
 8007afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007afe:	079d      	lsls	r5, r3, #30
 8007b00:	4606      	mov	r6, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	d507      	bpl.n	8007b16 <__smakebuf_r+0x1c>
 8007b06:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	2301      	movs	r3, #1
 8007b10:	6163      	str	r3, [r4, #20]
 8007b12:	b003      	add	sp, #12
 8007b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b16:	466a      	mov	r2, sp
 8007b18:	ab01      	add	r3, sp, #4
 8007b1a:	f7ff ffc9 	bl	8007ab0 <__swhatbuf_r>
 8007b1e:	9f00      	ldr	r7, [sp, #0]
 8007b20:	4605      	mov	r5, r0
 8007b22:	4639      	mov	r1, r7
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7fe fecd 	bl	80068c4 <_malloc_r>
 8007b2a:	b948      	cbnz	r0, 8007b40 <__smakebuf_r+0x46>
 8007b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b30:	059a      	lsls	r2, r3, #22
 8007b32:	d4ee      	bmi.n	8007b12 <__smakebuf_r+0x18>
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	f043 0302 	orr.w	r3, r3, #2
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	e7e2      	b.n	8007b06 <__smakebuf_r+0xc>
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	6020      	str	r0, [r4, #0]
 8007b50:	b15b      	cbz	r3, 8007b6a <__smakebuf_r+0x70>
 8007b52:	4630      	mov	r0, r6
 8007b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b58:	f000 f81e 	bl	8007b98 <_isatty_r>
 8007b5c:	b128      	cbz	r0, 8007b6a <__smakebuf_r+0x70>
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	431d      	orrs	r5, r3
 8007b6e:	81a5      	strh	r5, [r4, #12]
 8007b70:	e7cf      	b.n	8007b12 <__smakebuf_r+0x18>
	...

08007b74 <_fstat_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	2300      	movs	r3, #0
 8007b78:	4d06      	ldr	r5, [pc, #24]	@ (8007b94 <_fstat_r+0x20>)
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	f7f9 ff8f 	bl	8001aa4 <_fstat>
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	d102      	bne.n	8007b90 <_fstat_r+0x1c>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	b103      	cbz	r3, 8007b90 <_fstat_r+0x1c>
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	2000268c 	.word	0x2000268c

08007b98 <_isatty_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4d05      	ldr	r5, [pc, #20]	@ (8007bb4 <_isatty_r+0x1c>)
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f7f9 ff8d 	bl	8001ac2 <_isatty>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_isatty_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_isatty_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	2000268c 	.word	0x2000268c

08007bb8 <pow>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	4689      	mov	r9, r1
 8007bc4:	f000 f95c 	bl	8007e80 <__ieee754_pow>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	462b      	mov	r3, r5
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	f7f8 ff1a 	bl	8000a0c <__aeabi_dcmpun>
 8007bd8:	bbc8      	cbnz	r0, 8007c4e <pow+0x96>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 fee1 	bl	80009a8 <__aeabi_dcmpeq>
 8007be6:	b1b8      	cbz	r0, 8007c18 <pow+0x60>
 8007be8:	2200      	movs	r2, #0
 8007bea:	2300      	movs	r3, #0
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 feda 	bl	80009a8 <__aeabi_dcmpeq>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d141      	bne.n	8007c7c <pow+0xc4>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f000 f868 	bl	8007cd0 <finite>
 8007c00:	b328      	cbz	r0, 8007c4e <pow+0x96>
 8007c02:	2200      	movs	r2, #0
 8007c04:	2300      	movs	r3, #0
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 fed7 	bl	80009bc <__aeabi_dcmplt>
 8007c0e:	b1f0      	cbz	r0, 8007c4e <pow+0x96>
 8007c10:	f7fd ff4c 	bl	8005aac <__errno>
 8007c14:	2322      	movs	r3, #34	@ 0x22
 8007c16:	e019      	b.n	8007c4c <pow+0x94>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f000 f858 	bl	8007cd0 <finite>
 8007c20:	b9c8      	cbnz	r0, 8007c56 <pow+0x9e>
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f000 f853 	bl	8007cd0 <finite>
 8007c2a:	b1a0      	cbz	r0, 8007c56 <pow+0x9e>
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	4629      	mov	r1, r5
 8007c30:	f000 f84e 	bl	8007cd0 <finite>
 8007c34:	b178      	cbz	r0, 8007c56 <pow+0x9e>
 8007c36:	4632      	mov	r2, r6
 8007c38:	463b      	mov	r3, r7
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fee5 	bl	8000a0c <__aeabi_dcmpun>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d0e4      	beq.n	8007c10 <pow+0x58>
 8007c46:	f7fd ff31 	bl	8005aac <__errno>
 8007c4a:	2321      	movs	r3, #33	@ 0x21
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4639      	mov	r1, r7
 8007c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c56:	2200      	movs	r2, #0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 fea3 	bl	80009a8 <__aeabi_dcmpeq>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d0f3      	beq.n	8007c4e <pow+0x96>
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f000 f831 	bl	8007cd0 <finite>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0ed      	beq.n	8007c4e <pow+0x96>
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f000 f82b 	bl	8007cd0 <finite>
 8007c7a:	e7c8      	b.n	8007c0e <pow+0x56>
 8007c7c:	2600      	movs	r6, #0
 8007c7e:	4f01      	ldr	r7, [pc, #4]	@ (8007c84 <pow+0xcc>)
 8007c80:	e7e5      	b.n	8007c4e <pow+0x96>
 8007c82:	bf00      	nop
 8007c84:	3ff00000 	.word	0x3ff00000

08007c88 <sqrt>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460f      	mov	r7, r1
 8007c8e:	f000 f825 	bl	8007cdc <__ieee754_sqrt>
 8007c92:	4632      	mov	r2, r6
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	463b      	mov	r3, r7
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 feb5 	bl	8000a0c <__aeabi_dcmpun>
 8007ca2:	b990      	cbnz	r0, 8007cca <sqrt+0x42>
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 fe86 	bl	80009bc <__aeabi_dcmplt>
 8007cb0:	b158      	cbz	r0, 8007cca <sqrt+0x42>
 8007cb2:	f7fd fefb 	bl	8005aac <__errno>
 8007cb6:	2321      	movs	r3, #33	@ 0x21
 8007cb8:	2200      	movs	r2, #0
 8007cba:	6003      	str	r3, [r0, #0]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f7f8 fd33 	bl	800072c <__aeabi_ddiv>
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cd0 <finite>:
 8007cd0:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007cd4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007cd8:	0fc0      	lsrs	r0, r0, #31
 8007cda:	4770      	bx	lr

08007cdc <__ieee754_sqrt>:
 8007cdc:	4a65      	ldr	r2, [pc, #404]	@ (8007e74 <__ieee754_sqrt+0x198>)
 8007cde:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce2:	438a      	bics	r2, r1
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	460f      	mov	r7, r1
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4604      	mov	r4, r0
 8007cec:	d10e      	bne.n	8007d0c <__ieee754_sqrt+0x30>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	f7f8 fbf2 	bl	80004d8 <__aeabi_dmul>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	f7f8 fa36 	bl	800016c <__adddf3>
 8007d00:	4606      	mov	r6, r0
 8007d02:	460f      	mov	r7, r1
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	dc0c      	bgt.n	8007d2a <__ieee754_sqrt+0x4e>
 8007d10:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007d14:	4302      	orrs	r2, r0
 8007d16:	d0f5      	beq.n	8007d04 <__ieee754_sqrt+0x28>
 8007d18:	b189      	cbz	r1, 8007d3e <__ieee754_sqrt+0x62>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	f7f8 fa24 	bl	8000168 <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	f7f8 fd02 	bl	800072c <__aeabi_ddiv>
 8007d28:	e7ea      	b.n	8007d00 <__ieee754_sqrt+0x24>
 8007d2a:	150a      	asrs	r2, r1, #20
 8007d2c:	d115      	bne.n	8007d5a <__ieee754_sqrt+0x7e>
 8007d2e:	2100      	movs	r1, #0
 8007d30:	e009      	b.n	8007d46 <__ieee754_sqrt+0x6a>
 8007d32:	0ae3      	lsrs	r3, r4, #11
 8007d34:	3a15      	subs	r2, #21
 8007d36:	0564      	lsls	r4, r4, #21
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0fa      	beq.n	8007d32 <__ieee754_sqrt+0x56>
 8007d3c:	e7f7      	b.n	8007d2e <__ieee754_sqrt+0x52>
 8007d3e:	460a      	mov	r2, r1
 8007d40:	e7fa      	b.n	8007d38 <__ieee754_sqrt+0x5c>
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	3101      	adds	r1, #1
 8007d46:	02d8      	lsls	r0, r3, #11
 8007d48:	d5fb      	bpl.n	8007d42 <__ieee754_sqrt+0x66>
 8007d4a:	1e48      	subs	r0, r1, #1
 8007d4c:	1a12      	subs	r2, r2, r0
 8007d4e:	f1c1 0020 	rsb	r0, r1, #32
 8007d52:	fa24 f000 	lsr.w	r0, r4, r0
 8007d56:	4303      	orrs	r3, r0
 8007d58:	408c      	lsls	r4, r1
 8007d5a:	2700      	movs	r7, #0
 8007d5c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8007d60:	2116      	movs	r1, #22
 8007d62:	07d2      	lsls	r2, r2, #31
 8007d64:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007d68:	463a      	mov	r2, r7
 8007d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d72:	bf5c      	itt	pl
 8007d74:	005b      	lslpl	r3, r3, #1
 8007d76:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007d7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d7e:	bf58      	it	pl
 8007d80:	0064      	lslpl	r4, r4, #1
 8007d82:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007d86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d8a:	0064      	lsls	r4, r4, #1
 8007d8c:	1815      	adds	r5, r2, r0
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	bfde      	ittt	le
 8007d92:	182a      	addle	r2, r5, r0
 8007d94:	1b5b      	suble	r3, r3, r5
 8007d96:	183f      	addle	r7, r7, r0
 8007d98:	0fe5      	lsrs	r5, r4, #31
 8007d9a:	3901      	subs	r1, #1
 8007d9c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007da0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007da4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007da8:	d1f0      	bne.n	8007d8c <__ieee754_sqrt+0xb0>
 8007daa:	460d      	mov	r5, r1
 8007dac:	2620      	movs	r6, #32
 8007dae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007db2:	4293      	cmp	r3, r2
 8007db4:	eb00 0c01 	add.w	ip, r0, r1
 8007db8:	dc02      	bgt.n	8007dc0 <__ieee754_sqrt+0xe4>
 8007dba:	d113      	bne.n	8007de4 <__ieee754_sqrt+0x108>
 8007dbc:	45a4      	cmp	ip, r4
 8007dbe:	d811      	bhi.n	8007de4 <__ieee754_sqrt+0x108>
 8007dc0:	f1bc 0f00 	cmp.w	ip, #0
 8007dc4:	eb0c 0100 	add.w	r1, ip, r0
 8007dc8:	da3e      	bge.n	8007e48 <__ieee754_sqrt+0x16c>
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	db3c      	blt.n	8007e48 <__ieee754_sqrt+0x16c>
 8007dce:	f102 0e01 	add.w	lr, r2, #1
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	4672      	mov	r2, lr
 8007dd6:	45a4      	cmp	ip, r4
 8007dd8:	bf88      	it	hi
 8007dda:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007dde:	eba4 040c 	sub.w	r4, r4, ip
 8007de2:	4405      	add	r5, r0
 8007de4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8007de8:	3e01      	subs	r6, #1
 8007dea:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8007dee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007df2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007df6:	d1dc      	bne.n	8007db2 <__ieee754_sqrt+0xd6>
 8007df8:	431c      	orrs	r4, r3
 8007dfa:	d01a      	beq.n	8007e32 <__ieee754_sqrt+0x156>
 8007dfc:	4c1e      	ldr	r4, [pc, #120]	@ (8007e78 <__ieee754_sqrt+0x19c>)
 8007dfe:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8007e7c <__ieee754_sqrt+0x1a0>
 8007e02:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007e06:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e0a:	f7f8 f9ad 	bl	8000168 <__aeabi_dsub>
 8007e0e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4650      	mov	r0, sl
 8007e18:	4659      	mov	r1, fp
 8007e1a:	f7f8 fdd9 	bl	80009d0 <__aeabi_dcmple>
 8007e1e:	b140      	cbz	r0, 8007e32 <__ieee754_sqrt+0x156>
 8007e20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007e24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e28:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007e2c:	d10e      	bne.n	8007e4c <__ieee754_sqrt+0x170>
 8007e2e:	4635      	mov	r5, r6
 8007e30:	3701      	adds	r7, #1
 8007e32:	107b      	asrs	r3, r7, #1
 8007e34:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e38:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007e3c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8007e40:	086b      	lsrs	r3, r5, #1
 8007e42:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8007e46:	e75b      	b.n	8007d00 <__ieee754_sqrt+0x24>
 8007e48:	4696      	mov	lr, r2
 8007e4a:	e7c2      	b.n	8007dd2 <__ieee754_sqrt+0xf6>
 8007e4c:	f7f8 f98e 	bl	800016c <__adddf3>
 8007e50:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4650      	mov	r0, sl
 8007e5a:	4659      	mov	r1, fp
 8007e5c:	f7f8 fdae 	bl	80009bc <__aeabi_dcmplt>
 8007e60:	b120      	cbz	r0, 8007e6c <__ieee754_sqrt+0x190>
 8007e62:	1cab      	adds	r3, r5, #2
 8007e64:	bf08      	it	eq
 8007e66:	3701      	addeq	r7, #1
 8007e68:	3502      	adds	r5, #2
 8007e6a:	e7e2      	b.n	8007e32 <__ieee754_sqrt+0x156>
 8007e6c:	1c6b      	adds	r3, r5, #1
 8007e6e:	f023 0501 	bic.w	r5, r3, #1
 8007e72:	e7de      	b.n	8007e32 <__ieee754_sqrt+0x156>
 8007e74:	7ff00000 	.word	0x7ff00000
 8007e78:	08009588 	.word	0x08009588
 8007e7c:	08009580 	.word	0x08009580

08007e80 <__ieee754_pow>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	b091      	sub	sp, #68	@ 0x44
 8007e86:	e9cd 2300 	strd	r2, r3, [sp]
 8007e8a:	468b      	mov	fp, r1
 8007e8c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007e90:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8007e94:	4682      	mov	sl, r0
 8007e96:	ea57 0001 	orrs.w	r0, r7, r1
 8007e9a:	d112      	bne.n	8007ec2 <__ieee754_pow+0x42>
 8007e9c:	4653      	mov	r3, sl
 8007e9e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8007ea2:	18db      	adds	r3, r3, r3
 8007ea4:	4152      	adcs	r2, r2
 8007ea6:	4298      	cmp	r0, r3
 8007ea8:	4b93      	ldr	r3, [pc, #588]	@ (80080f8 <__ieee754_pow+0x278>)
 8007eaa:	4193      	sbcs	r3, r2
 8007eac:	f080 84cd 	bcs.w	800884a <__ieee754_pow+0x9ca>
 8007eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	4659      	mov	r1, fp
 8007eb8:	f7f8 f958 	bl	800016c <__adddf3>
 8007ebc:	b011      	add	sp, #68	@ 0x44
 8007ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec2:	4b8e      	ldr	r3, [pc, #568]	@ (80080fc <__ieee754_pow+0x27c>)
 8007ec4:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8007ec8:	429d      	cmp	r5, r3
 8007eca:	465e      	mov	r6, fp
 8007ecc:	46d1      	mov	r9, sl
 8007ece:	d80b      	bhi.n	8007ee8 <__ieee754_pow+0x68>
 8007ed0:	d105      	bne.n	8007ede <__ieee754_pow+0x5e>
 8007ed2:	f1ba 0f00 	cmp.w	sl, #0
 8007ed6:	d1eb      	bne.n	8007eb0 <__ieee754_pow+0x30>
 8007ed8:	42af      	cmp	r7, r5
 8007eda:	d8e9      	bhi.n	8007eb0 <__ieee754_pow+0x30>
 8007edc:	e001      	b.n	8007ee2 <__ieee754_pow+0x62>
 8007ede:	429f      	cmp	r7, r3
 8007ee0:	d802      	bhi.n	8007ee8 <__ieee754_pow+0x68>
 8007ee2:	429f      	cmp	r7, r3
 8007ee4:	d10f      	bne.n	8007f06 <__ieee754_pow+0x86>
 8007ee6:	b171      	cbz	r1, 8007f06 <__ieee754_pow+0x86>
 8007ee8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007eec:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007ef0:	ea56 0609 	orrs.w	r6, r6, r9
 8007ef4:	d1dc      	bne.n	8007eb0 <__ieee754_pow+0x30>
 8007ef6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007efa:	18db      	adds	r3, r3, r3
 8007efc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007f00:	4152      	adcs	r2, r2
 8007f02:	429e      	cmp	r6, r3
 8007f04:	e7d0      	b.n	8007ea8 <__ieee754_pow+0x28>
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	462b      	mov	r3, r5
 8007f0a:	da42      	bge.n	8007f92 <__ieee754_pow+0x112>
 8007f0c:	4a7c      	ldr	r2, [pc, #496]	@ (8008100 <__ieee754_pow+0x280>)
 8007f0e:	4297      	cmp	r7, r2
 8007f10:	d856      	bhi.n	8007fc0 <__ieee754_pow+0x140>
 8007f12:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007f16:	4297      	cmp	r7, r2
 8007f18:	f240 84a6 	bls.w	8008868 <__ieee754_pow+0x9e8>
 8007f1c:	153a      	asrs	r2, r7, #20
 8007f1e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007f22:	2a14      	cmp	r2, #20
 8007f24:	dd18      	ble.n	8007f58 <__ieee754_pow+0xd8>
 8007f26:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007f2a:	fa21 f402 	lsr.w	r4, r1, r2
 8007f2e:	fa04 f202 	lsl.w	r2, r4, r2
 8007f32:	428a      	cmp	r2, r1
 8007f34:	f040 8498 	bne.w	8008868 <__ieee754_pow+0x9e8>
 8007f38:	f004 0401 	and.w	r4, r4, #1
 8007f3c:	f1c4 0402 	rsb	r4, r4, #2
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d159      	bne.n	8007ff8 <__ieee754_pow+0x178>
 8007f44:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007f48:	d149      	bne.n	8007fde <__ieee754_pow+0x15e>
 8007f4a:	4652      	mov	r2, sl
 8007f4c:	465b      	mov	r3, fp
 8007f4e:	4650      	mov	r0, sl
 8007f50:	4659      	mov	r1, fp
 8007f52:	f7f8 fac1 	bl	80004d8 <__aeabi_dmul>
 8007f56:	e7b1      	b.n	8007ebc <__ieee754_pow+0x3c>
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d14c      	bne.n	8007ff6 <__ieee754_pow+0x176>
 8007f5c:	f1c2 0214 	rsb	r2, r2, #20
 8007f60:	fa47 f402 	asr.w	r4, r7, r2
 8007f64:	fa04 f202 	lsl.w	r2, r4, r2
 8007f68:	42ba      	cmp	r2, r7
 8007f6a:	f040 847a 	bne.w	8008862 <__ieee754_pow+0x9e2>
 8007f6e:	f004 0401 	and.w	r4, r4, #1
 8007f72:	f1c4 0402 	rsb	r4, r4, #2
 8007f76:	4a63      	ldr	r2, [pc, #396]	@ (8008104 <__ieee754_pow+0x284>)
 8007f78:	4297      	cmp	r7, r2
 8007f7a:	d1e3      	bne.n	8007f44 <__ieee754_pow+0xc4>
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	f280 846b 	bge.w	800885a <__ieee754_pow+0x9da>
 8007f84:	4652      	mov	r2, sl
 8007f86:	465b      	mov	r3, fp
 8007f88:	2000      	movs	r0, #0
 8007f8a:	495e      	ldr	r1, [pc, #376]	@ (8008104 <__ieee754_pow+0x284>)
 8007f8c:	f7f8 fbce 	bl	800072c <__aeabi_ddiv>
 8007f90:	e794      	b.n	8007ebc <__ieee754_pow+0x3c>
 8007f92:	2400      	movs	r4, #0
 8007f94:	bb81      	cbnz	r1, 8007ff8 <__ieee754_pow+0x178>
 8007f96:	4a59      	ldr	r2, [pc, #356]	@ (80080fc <__ieee754_pow+0x27c>)
 8007f98:	4297      	cmp	r7, r2
 8007f9a:	d1ec      	bne.n	8007f76 <__ieee754_pow+0xf6>
 8007f9c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8007fa0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007fa4:	ea53 0309 	orrs.w	r3, r3, r9
 8007fa8:	f000 844f 	beq.w	800884a <__ieee754_pow+0x9ca>
 8007fac:	4b56      	ldr	r3, [pc, #344]	@ (8008108 <__ieee754_pow+0x288>)
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	d908      	bls.n	8007fc4 <__ieee754_pow+0x144>
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	f280 844c 	bge.w	8008852 <__ieee754_pow+0x9d2>
 8007fba:	2000      	movs	r0, #0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	e77d      	b.n	8007ebc <__ieee754_pow+0x3c>
 8007fc0:	2402      	movs	r4, #2
 8007fc2:	e7e7      	b.n	8007f94 <__ieee754_pow+0x114>
 8007fc4:	f1b8 0f00 	cmp.w	r8, #0
 8007fc8:	f04f 0000 	mov.w	r0, #0
 8007fcc:	f04f 0100 	mov.w	r1, #0
 8007fd0:	f6bf af74 	bge.w	8007ebc <__ieee754_pow+0x3c>
 8007fd4:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007fd8:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007fdc:	e76e      	b.n	8007ebc <__ieee754_pow+0x3c>
 8007fde:	4a4b      	ldr	r2, [pc, #300]	@ (800810c <__ieee754_pow+0x28c>)
 8007fe0:	4590      	cmp	r8, r2
 8007fe2:	d109      	bne.n	8007ff8 <__ieee754_pow+0x178>
 8007fe4:	2e00      	cmp	r6, #0
 8007fe6:	db07      	blt.n	8007ff8 <__ieee754_pow+0x178>
 8007fe8:	4650      	mov	r0, sl
 8007fea:	4659      	mov	r1, fp
 8007fec:	b011      	add	sp, #68	@ 0x44
 8007fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff2:	f7ff be73 	b.w	8007cdc <__ieee754_sqrt>
 8007ff6:	2400      	movs	r4, #0
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	9302      	str	r3, [sp, #8]
 8007ffe:	f000 fc69 	bl	80088d4 <fabs>
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	f1b9 0f00 	cmp.w	r9, #0
 8008008:	d127      	bne.n	800805a <__ieee754_pow+0x1da>
 800800a:	4a3e      	ldr	r2, [pc, #248]	@ (8008104 <__ieee754_pow+0x284>)
 800800c:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8008010:	4594      	cmp	ip, r2
 8008012:	d000      	beq.n	8008016 <__ieee754_pow+0x196>
 8008014:	bb0d      	cbnz	r5, 800805a <__ieee754_pow+0x1da>
 8008016:	f1b8 0f00 	cmp.w	r8, #0
 800801a:	da05      	bge.n	8008028 <__ieee754_pow+0x1a8>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	2000      	movs	r0, #0
 8008022:	4938      	ldr	r1, [pc, #224]	@ (8008104 <__ieee754_pow+0x284>)
 8008024:	f7f8 fb82 	bl	800072c <__aeabi_ddiv>
 8008028:	2e00      	cmp	r6, #0
 800802a:	f6bf af47 	bge.w	8007ebc <__ieee754_pow+0x3c>
 800802e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008032:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008036:	4325      	orrs	r5, r4
 8008038:	d108      	bne.n	800804c <__ieee754_pow+0x1cc>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4610      	mov	r0, r2
 8008040:	4619      	mov	r1, r3
 8008042:	f7f8 f891 	bl	8000168 <__aeabi_dsub>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	e79f      	b.n	8007f8c <__ieee754_pow+0x10c>
 800804c:	2c01      	cmp	r4, #1
 800804e:	f47f af35 	bne.w	8007ebc <__ieee754_pow+0x3c>
 8008052:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008056:	4619      	mov	r1, r3
 8008058:	e730      	b.n	8007ebc <__ieee754_pow+0x3c>
 800805a:	0ff2      	lsrs	r2, r6, #31
 800805c:	3a01      	subs	r2, #1
 800805e:	ea52 0c04 	orrs.w	ip, r2, r4
 8008062:	d102      	bne.n	800806a <__ieee754_pow+0x1ea>
 8008064:	4652      	mov	r2, sl
 8008066:	465b      	mov	r3, fp
 8008068:	e7e9      	b.n	800803e <__ieee754_pow+0x1be>
 800806a:	f04f 0900 	mov.w	r9, #0
 800806e:	3c01      	subs	r4, #1
 8008070:	4314      	orrs	r4, r2
 8008072:	bf14      	ite	ne
 8008074:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8008104 <__ieee754_pow+0x284>
 8008078:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008110 <__ieee754_pow+0x290>
 800807c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008080:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008084:	f240 8104 	bls.w	8008290 <__ieee754_pow+0x410>
 8008088:	4b22      	ldr	r3, [pc, #136]	@ (8008114 <__ieee754_pow+0x294>)
 800808a:	429f      	cmp	r7, r3
 800808c:	4b1e      	ldr	r3, [pc, #120]	@ (8008108 <__ieee754_pow+0x288>)
 800808e:	d913      	bls.n	80080b8 <__ieee754_pow+0x238>
 8008090:	429d      	cmp	r5, r3
 8008092:	d808      	bhi.n	80080a6 <__ieee754_pow+0x226>
 8008094:	f1b8 0f00 	cmp.w	r8, #0
 8008098:	da08      	bge.n	80080ac <__ieee754_pow+0x22c>
 800809a:	2000      	movs	r0, #0
 800809c:	b011      	add	sp, #68	@ 0x44
 800809e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a2:	f000 bcb1 	b.w	8008a08 <__math_oflow>
 80080a6:	f1b8 0f00 	cmp.w	r8, #0
 80080aa:	dcf6      	bgt.n	800809a <__ieee754_pow+0x21a>
 80080ac:	2000      	movs	r0, #0
 80080ae:	b011      	add	sp, #68	@ 0x44
 80080b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	f000 bca3 	b.w	80089fe <__math_uflow>
 80080b8:	429d      	cmp	r5, r3
 80080ba:	d20c      	bcs.n	80080d6 <__ieee754_pow+0x256>
 80080bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	f7f8 fc7a 	bl	80009bc <__aeabi_dcmplt>
 80080c8:	3800      	subs	r0, #0
 80080ca:	bf18      	it	ne
 80080cc:	2001      	movne	r0, #1
 80080ce:	f1b8 0f00 	cmp.w	r8, #0
 80080d2:	daec      	bge.n	80080ae <__ieee754_pow+0x22e>
 80080d4:	e7e2      	b.n	800809c <__ieee754_pow+0x21c>
 80080d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008104 <__ieee754_pow+0x284>)
 80080d8:	2200      	movs	r2, #0
 80080da:	429d      	cmp	r5, r3
 80080dc:	d91c      	bls.n	8008118 <__ieee754_pow+0x298>
 80080de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e2:	2300      	movs	r3, #0
 80080e4:	f7f8 fc6a 	bl	80009bc <__aeabi_dcmplt>
 80080e8:	3800      	subs	r0, #0
 80080ea:	bf18      	it	ne
 80080ec:	2001      	movne	r0, #1
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	dcd3      	bgt.n	800809c <__ieee754_pow+0x21c>
 80080f4:	e7db      	b.n	80080ae <__ieee754_pow+0x22e>
 80080f6:	bf00      	nop
 80080f8:	fff00000 	.word	0xfff00000
 80080fc:	7ff00000 	.word	0x7ff00000
 8008100:	433fffff 	.word	0x433fffff
 8008104:	3ff00000 	.word	0x3ff00000
 8008108:	3fefffff 	.word	0x3fefffff
 800810c:	3fe00000 	.word	0x3fe00000
 8008110:	bff00000 	.word	0xbff00000
 8008114:	43f00000 	.word	0x43f00000
 8008118:	4b59      	ldr	r3, [pc, #356]	@ (8008280 <__ieee754_pow+0x400>)
 800811a:	f7f8 f825 	bl	8000168 <__aeabi_dsub>
 800811e:	a350      	add	r3, pc, #320	@ (adr r3, 8008260 <__ieee754_pow+0x3e0>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	4604      	mov	r4, r0
 8008126:	460d      	mov	r5, r1
 8008128:	f7f8 f9d6 	bl	80004d8 <__aeabi_dmul>
 800812c:	a34e      	add	r3, pc, #312	@ (adr r3, 8008268 <__ieee754_pow+0x3e8>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	4620      	mov	r0, r4
 8008138:	4629      	mov	r1, r5
 800813a:	f7f8 f9cd 	bl	80004d8 <__aeabi_dmul>
 800813e:	2200      	movs	r2, #0
 8008140:	4682      	mov	sl, r0
 8008142:	468b      	mov	fp, r1
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	4b4e      	ldr	r3, [pc, #312]	@ (8008284 <__ieee754_pow+0x404>)
 800814a:	f7f8 f9c5 	bl	80004d8 <__aeabi_dmul>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	a147      	add	r1, pc, #284	@ (adr r1, 8008270 <__ieee754_pow+0x3f0>)
 8008154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008158:	f7f8 f806 	bl	8000168 <__aeabi_dsub>
 800815c:	4622      	mov	r2, r4
 800815e:	462b      	mov	r3, r5
 8008160:	f7f8 f9ba 	bl	80004d8 <__aeabi_dmul>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	2000      	movs	r0, #0
 800816a:	4947      	ldr	r1, [pc, #284]	@ (8008288 <__ieee754_pow+0x408>)
 800816c:	f7f7 fffc 	bl	8000168 <__aeabi_dsub>
 8008170:	4622      	mov	r2, r4
 8008172:	4680      	mov	r8, r0
 8008174:	4689      	mov	r9, r1
 8008176:	462b      	mov	r3, r5
 8008178:	4620      	mov	r0, r4
 800817a:	4629      	mov	r1, r5
 800817c:	f7f8 f9ac 	bl	80004d8 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4640      	mov	r0, r8
 8008186:	4649      	mov	r1, r9
 8008188:	f7f8 f9a6 	bl	80004d8 <__aeabi_dmul>
 800818c:	a33a      	add	r3, pc, #232	@ (adr r3, 8008278 <__ieee754_pow+0x3f8>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f9a1 	bl	80004d8 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4650      	mov	r0, sl
 800819c:	4659      	mov	r1, fp
 800819e:	f7f7 ffe3 	bl	8000168 <__aeabi_dsub>
 80081a2:	2400      	movs	r4, #0
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4680      	mov	r8, r0
 80081aa:	4689      	mov	r9, r1
 80081ac:	4630      	mov	r0, r6
 80081ae:	4639      	mov	r1, r7
 80081b0:	f7f7 ffdc 	bl	800016c <__adddf3>
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	4620      	mov	r0, r4
 80081ba:	460d      	mov	r5, r1
 80081bc:	f7f7 ffd4 	bl	8000168 <__aeabi_dsub>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4640      	mov	r0, r8
 80081c6:	4649      	mov	r1, r9
 80081c8:	f7f7 ffce 	bl	8000168 <__aeabi_dsub>
 80081cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081d4:	2300      	movs	r3, #0
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081dc:	4606      	mov	r6, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e4:	465b      	mov	r3, fp
 80081e6:	4652      	mov	r2, sl
 80081e8:	f7f7 ffbe 	bl	8000168 <__aeabi_dsub>
 80081ec:	4622      	mov	r2, r4
 80081ee:	462b      	mov	r3, r5
 80081f0:	f7f8 f972 	bl	80004d8 <__aeabi_dmul>
 80081f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f8:	4680      	mov	r8, r0
 80081fa:	4689      	mov	r9, r1
 80081fc:	4630      	mov	r0, r6
 80081fe:	4639      	mov	r1, r7
 8008200:	f7f8 f96a 	bl	80004d8 <__aeabi_dmul>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4640      	mov	r0, r8
 800820a:	4649      	mov	r1, r9
 800820c:	f7f7 ffae 	bl	800016c <__adddf3>
 8008210:	465b      	mov	r3, fp
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	4652      	mov	r2, sl
 8008218:	4620      	mov	r0, r4
 800821a:	4629      	mov	r1, r5
 800821c:	f7f8 f95c 	bl	80004d8 <__aeabi_dmul>
 8008220:	460b      	mov	r3, r1
 8008222:	4602      	mov	r2, r0
 8008224:	4680      	mov	r8, r0
 8008226:	4689      	mov	r9, r1
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f7 ff9e 	bl	800016c <__adddf3>
 8008230:	4b16      	ldr	r3, [pc, #88]	@ (800828c <__ieee754_pow+0x40c>)
 8008232:	4604      	mov	r4, r0
 8008234:	4299      	cmp	r1, r3
 8008236:	460d      	mov	r5, r1
 8008238:	468b      	mov	fp, r1
 800823a:	f340 81fd 	ble.w	8008638 <__ieee754_pow+0x7b8>
 800823e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008242:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008246:	4303      	orrs	r3, r0
 8008248:	f000 81dc 	beq.w	8008604 <__ieee754_pow+0x784>
 800824c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	f7f8 fbb2 	bl	80009bc <__aeabi_dcmplt>
 8008258:	3800      	subs	r0, #0
 800825a:	bf18      	it	ne
 800825c:	2001      	movne	r0, #1
 800825e:	e71d      	b.n	800809c <__ieee754_pow+0x21c>
 8008260:	60000000 	.word	0x60000000
 8008264:	3ff71547 	.word	0x3ff71547
 8008268:	f85ddf44 	.word	0xf85ddf44
 800826c:	3e54ae0b 	.word	0x3e54ae0b
 8008270:	55555555 	.word	0x55555555
 8008274:	3fd55555 	.word	0x3fd55555
 8008278:	652b82fe 	.word	0x652b82fe
 800827c:	3ff71547 	.word	0x3ff71547
 8008280:	3ff00000 	.word	0x3ff00000
 8008284:	3fd00000 	.word	0x3fd00000
 8008288:	3fe00000 	.word	0x3fe00000
 800828c:	408fffff 	.word	0x408fffff
 8008290:	4ad3      	ldr	r2, [pc, #844]	@ (80085e0 <__ieee754_pow+0x760>)
 8008292:	4032      	ands	r2, r6
 8008294:	2a00      	cmp	r2, #0
 8008296:	f040 817a 	bne.w	800858e <__ieee754_pow+0x70e>
 800829a:	4bd2      	ldr	r3, [pc, #840]	@ (80085e4 <__ieee754_pow+0x764>)
 800829c:	2200      	movs	r2, #0
 800829e:	f7f8 f91b 	bl	80004d8 <__aeabi_dmul>
 80082a2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80082a6:	460b      	mov	r3, r1
 80082a8:	151a      	asrs	r2, r3, #20
 80082aa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80082ae:	4422      	add	r2, r4
 80082b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80082b2:	4acd      	ldr	r2, [pc, #820]	@ (80085e8 <__ieee754_pow+0x768>)
 80082b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80082bc:	4293      	cmp	r3, r2
 80082be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80082c2:	dd08      	ble.n	80082d6 <__ieee754_pow+0x456>
 80082c4:	4ac9      	ldr	r2, [pc, #804]	@ (80085ec <__ieee754_pow+0x76c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	f340 8163 	ble.w	8008592 <__ieee754_pow+0x712>
 80082cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082ce:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80082d2:	3301      	adds	r3, #1
 80082d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d6:	2600      	movs	r6, #0
 80082d8:	00f3      	lsls	r3, r6, #3
 80082da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082dc:	4bc4      	ldr	r3, [pc, #784]	@ (80085f0 <__ieee754_pow+0x770>)
 80082de:	4629      	mov	r1, r5
 80082e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80082e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082e8:	461a      	mov	r2, r3
 80082ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80082ee:	4623      	mov	r3, r4
 80082f0:	4682      	mov	sl, r0
 80082f2:	f7f7 ff39 	bl	8000168 <__aeabi_dsub>
 80082f6:	4652      	mov	r2, sl
 80082f8:	462b      	mov	r3, r5
 80082fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80082fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008302:	f7f7 ff33 	bl	800016c <__adddf3>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	2000      	movs	r0, #0
 800830c:	49b9      	ldr	r1, [pc, #740]	@ (80085f4 <__ieee754_pow+0x774>)
 800830e:	f7f8 fa0d 	bl	800072c <__aeabi_ddiv>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800831a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800831e:	f7f8 f8db 	bl	80004d8 <__aeabi_dmul>
 8008322:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008326:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800832a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800832e:	2300      	movs	r3, #0
 8008330:	2200      	movs	r2, #0
 8008332:	46ab      	mov	fp, r5
 8008334:	106d      	asrs	r5, r5, #1
 8008336:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008340:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008344:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	4614      	mov	r4, r2
 800834e:	461d      	mov	r5, r3
 8008350:	f7f8 f8c2 	bl	80004d8 <__aeabi_dmul>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800835c:	f7f7 ff04 	bl	8000168 <__aeabi_dsub>
 8008360:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008364:	4606      	mov	r6, r0
 8008366:	460f      	mov	r7, r1
 8008368:	4620      	mov	r0, r4
 800836a:	4629      	mov	r1, r5
 800836c:	f7f7 fefc 	bl	8000168 <__aeabi_dsub>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4650      	mov	r0, sl
 8008376:	4659      	mov	r1, fp
 8008378:	f7f7 fef6 	bl	8000168 <__aeabi_dsub>
 800837c:	4642      	mov	r2, r8
 800837e:	464b      	mov	r3, r9
 8008380:	f7f8 f8aa 	bl	80004d8 <__aeabi_dmul>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f7 feec 	bl	8000168 <__aeabi_dsub>
 8008390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008394:	f7f8 f8a0 	bl	80004d8 <__aeabi_dmul>
 8008398:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800839c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083a0:	4610      	mov	r0, r2
 80083a2:	4619      	mov	r1, r3
 80083a4:	f7f8 f898 	bl	80004d8 <__aeabi_dmul>
 80083a8:	a37b      	add	r3, pc, #492	@ (adr r3, 8008598 <__ieee754_pow+0x718>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	4604      	mov	r4, r0
 80083b0:	460d      	mov	r5, r1
 80083b2:	f7f8 f891 	bl	80004d8 <__aeabi_dmul>
 80083b6:	a37a      	add	r3, pc, #488	@ (adr r3, 80085a0 <__ieee754_pow+0x720>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f7 fed6 	bl	800016c <__adddf3>
 80083c0:	4622      	mov	r2, r4
 80083c2:	462b      	mov	r3, r5
 80083c4:	f7f8 f888 	bl	80004d8 <__aeabi_dmul>
 80083c8:	a377      	add	r3, pc, #476	@ (adr r3, 80085a8 <__ieee754_pow+0x728>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 fecd 	bl	800016c <__adddf3>
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	f7f8 f87f 	bl	80004d8 <__aeabi_dmul>
 80083da:	a375      	add	r3, pc, #468	@ (adr r3, 80085b0 <__ieee754_pow+0x730>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f7 fec4 	bl	800016c <__adddf3>
 80083e4:	4622      	mov	r2, r4
 80083e6:	462b      	mov	r3, r5
 80083e8:	f7f8 f876 	bl	80004d8 <__aeabi_dmul>
 80083ec:	a372      	add	r3, pc, #456	@ (adr r3, 80085b8 <__ieee754_pow+0x738>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f7 febb 	bl	800016c <__adddf3>
 80083f6:	4622      	mov	r2, r4
 80083f8:	462b      	mov	r3, r5
 80083fa:	f7f8 f86d 	bl	80004d8 <__aeabi_dmul>
 80083fe:	a370      	add	r3, pc, #448	@ (adr r3, 80085c0 <__ieee754_pow+0x740>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f7 feb2 	bl	800016c <__adddf3>
 8008408:	4622      	mov	r2, r4
 800840a:	4606      	mov	r6, r0
 800840c:	460f      	mov	r7, r1
 800840e:	462b      	mov	r3, r5
 8008410:	4620      	mov	r0, r4
 8008412:	4629      	mov	r1, r5
 8008414:	f7f8 f860 	bl	80004d8 <__aeabi_dmul>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f8 f85a 	bl	80004d8 <__aeabi_dmul>
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	f7f7 fe9c 	bl	800016c <__adddf3>
 8008434:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008438:	f7f8 f84e 	bl	80004d8 <__aeabi_dmul>
 800843c:	4622      	mov	r2, r4
 800843e:	462b      	mov	r3, r5
 8008440:	f7f7 fe94 	bl	800016c <__adddf3>
 8008444:	4642      	mov	r2, r8
 8008446:	4682      	mov	sl, r0
 8008448:	468b      	mov	fp, r1
 800844a:	464b      	mov	r3, r9
 800844c:	4640      	mov	r0, r8
 800844e:	4649      	mov	r1, r9
 8008450:	f7f8 f842 	bl	80004d8 <__aeabi_dmul>
 8008454:	2200      	movs	r2, #0
 8008456:	4b68      	ldr	r3, [pc, #416]	@ (80085f8 <__ieee754_pow+0x778>)
 8008458:	4606      	mov	r6, r0
 800845a:	460f      	mov	r7, r1
 800845c:	f7f7 fe86 	bl	800016c <__adddf3>
 8008460:	4652      	mov	r2, sl
 8008462:	465b      	mov	r3, fp
 8008464:	f7f7 fe82 	bl	800016c <__adddf3>
 8008468:	2400      	movs	r4, #0
 800846a:	460d      	mov	r5, r1
 800846c:	4622      	mov	r2, r4
 800846e:	460b      	mov	r3, r1
 8008470:	4640      	mov	r0, r8
 8008472:	4649      	mov	r1, r9
 8008474:	f7f8 f830 	bl	80004d8 <__aeabi_dmul>
 8008478:	2200      	movs	r2, #0
 800847a:	4680      	mov	r8, r0
 800847c:	4689      	mov	r9, r1
 800847e:	4620      	mov	r0, r4
 8008480:	4629      	mov	r1, r5
 8008482:	4b5d      	ldr	r3, [pc, #372]	@ (80085f8 <__ieee754_pow+0x778>)
 8008484:	f7f7 fe70 	bl	8000168 <__aeabi_dsub>
 8008488:	4632      	mov	r2, r6
 800848a:	463b      	mov	r3, r7
 800848c:	f7f7 fe6c 	bl	8000168 <__aeabi_dsub>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4650      	mov	r0, sl
 8008496:	4659      	mov	r1, fp
 8008498:	f7f7 fe66 	bl	8000168 <__aeabi_dsub>
 800849c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084a0:	f7f8 f81a 	bl	80004d8 <__aeabi_dmul>
 80084a4:	4622      	mov	r2, r4
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084ae:	462b      	mov	r3, r5
 80084b0:	f7f8 f812 	bl	80004d8 <__aeabi_dmul>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4630      	mov	r0, r6
 80084ba:	4639      	mov	r1, r7
 80084bc:	f7f7 fe56 	bl	800016c <__adddf3>
 80084c0:	2400      	movs	r4, #0
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f7 fe4d 	bl	800016c <__adddf3>
 80084d2:	a33d      	add	r3, pc, #244	@ (adr r3, 80085c8 <__ieee754_pow+0x748>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	4620      	mov	r0, r4
 80084da:	460d      	mov	r5, r1
 80084dc:	f7f7 fffc 	bl	80004d8 <__aeabi_dmul>
 80084e0:	4642      	mov	r2, r8
 80084e2:	464b      	mov	r3, r9
 80084e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7f7 fe3c 	bl	8000168 <__aeabi_dsub>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f7f7 fe36 	bl	8000168 <__aeabi_dsub>
 80084fc:	a334      	add	r3, pc, #208	@ (adr r3, 80085d0 <__ieee754_pow+0x750>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f7 ffe9 	bl	80004d8 <__aeabi_dmul>
 8008506:	a334      	add	r3, pc, #208	@ (adr r3, 80085d8 <__ieee754_pow+0x758>)
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	4606      	mov	r6, r0
 800850e:	460f      	mov	r7, r1
 8008510:	4620      	mov	r0, r4
 8008512:	4629      	mov	r1, r5
 8008514:	f7f7 ffe0 	bl	80004d8 <__aeabi_dmul>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4630      	mov	r0, r6
 800851e:	4639      	mov	r1, r7
 8008520:	f7f7 fe24 	bl	800016c <__adddf3>
 8008524:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008526:	4b35      	ldr	r3, [pc, #212]	@ (80085fc <__ieee754_pow+0x77c>)
 8008528:	2400      	movs	r4, #0
 800852a:	4413      	add	r3, r2
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f7f7 fe1c 	bl	800016c <__adddf3>
 8008534:	4682      	mov	sl, r0
 8008536:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008538:	468b      	mov	fp, r1
 800853a:	f7f7 ff63 	bl	8000404 <__aeabi_i2d>
 800853e:	4606      	mov	r6, r0
 8008540:	460f      	mov	r7, r1
 8008542:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008544:	4b2e      	ldr	r3, [pc, #184]	@ (8008600 <__ieee754_pow+0x780>)
 8008546:	4413      	add	r3, r2
 8008548:	e9d3 8900 	ldrd	r8, r9, [r3]
 800854c:	4652      	mov	r2, sl
 800854e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008552:	465b      	mov	r3, fp
 8008554:	f7f7 fe0a 	bl	800016c <__adddf3>
 8008558:	4642      	mov	r2, r8
 800855a:	464b      	mov	r3, r9
 800855c:	f7f7 fe06 	bl	800016c <__adddf3>
 8008560:	4632      	mov	r2, r6
 8008562:	463b      	mov	r3, r7
 8008564:	f7f7 fe02 	bl	800016c <__adddf3>
 8008568:	4632      	mov	r2, r6
 800856a:	463b      	mov	r3, r7
 800856c:	4620      	mov	r0, r4
 800856e:	460d      	mov	r5, r1
 8008570:	f7f7 fdfa 	bl	8000168 <__aeabi_dsub>
 8008574:	4642      	mov	r2, r8
 8008576:	464b      	mov	r3, r9
 8008578:	f7f7 fdf6 	bl	8000168 <__aeabi_dsub>
 800857c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008580:	f7f7 fdf2 	bl	8000168 <__aeabi_dsub>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4650      	mov	r0, sl
 800858a:	4659      	mov	r1, fp
 800858c:	e61c      	b.n	80081c8 <__ieee754_pow+0x348>
 800858e:	2400      	movs	r4, #0
 8008590:	e68a      	b.n	80082a8 <__ieee754_pow+0x428>
 8008592:	2601      	movs	r6, #1
 8008594:	e6a0      	b.n	80082d8 <__ieee754_pow+0x458>
 8008596:	bf00      	nop
 8008598:	4a454eef 	.word	0x4a454eef
 800859c:	3fca7e28 	.word	0x3fca7e28
 80085a0:	93c9db65 	.word	0x93c9db65
 80085a4:	3fcd864a 	.word	0x3fcd864a
 80085a8:	a91d4101 	.word	0xa91d4101
 80085ac:	3fd17460 	.word	0x3fd17460
 80085b0:	518f264d 	.word	0x518f264d
 80085b4:	3fd55555 	.word	0x3fd55555
 80085b8:	db6fabff 	.word	0xdb6fabff
 80085bc:	3fdb6db6 	.word	0x3fdb6db6
 80085c0:	33333303 	.word	0x33333303
 80085c4:	3fe33333 	.word	0x3fe33333
 80085c8:	e0000000 	.word	0xe0000000
 80085cc:	3feec709 	.word	0x3feec709
 80085d0:	dc3a03fd 	.word	0xdc3a03fd
 80085d4:	3feec709 	.word	0x3feec709
 80085d8:	145b01f5 	.word	0x145b01f5
 80085dc:	be3e2fe0 	.word	0xbe3e2fe0
 80085e0:	7ff00000 	.word	0x7ff00000
 80085e4:	43400000 	.word	0x43400000
 80085e8:	0003988e 	.word	0x0003988e
 80085ec:	000bb679 	.word	0x000bb679
 80085f0:	080095b0 	.word	0x080095b0
 80085f4:	3ff00000 	.word	0x3ff00000
 80085f8:	40080000 	.word	0x40080000
 80085fc:	08009590 	.word	0x08009590
 8008600:	080095a0 	.word	0x080095a0
 8008604:	a39a      	add	r3, pc, #616	@ (adr r3, 8008870 <__ieee754_pow+0x9f0>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	4630      	mov	r0, r6
 800860c:	4639      	mov	r1, r7
 800860e:	f7f7 fdad 	bl	800016c <__adddf3>
 8008612:	4642      	mov	r2, r8
 8008614:	e9cd 0100 	strd	r0, r1, [sp]
 8008618:	464b      	mov	r3, r9
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	f7f7 fda3 	bl	8000168 <__aeabi_dsub>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800862a:	f7f8 f9e5 	bl	80009f8 <__aeabi_dcmpgt>
 800862e:	2800      	cmp	r0, #0
 8008630:	f47f ae0c 	bne.w	800824c <__ieee754_pow+0x3cc>
 8008634:	4ba0      	ldr	r3, [pc, #640]	@ (80088b8 <__ieee754_pow+0xa38>)
 8008636:	e022      	b.n	800867e <__ieee754_pow+0x7fe>
 8008638:	4ca0      	ldr	r4, [pc, #640]	@ (80088bc <__ieee754_pow+0xa3c>)
 800863a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800863e:	42a3      	cmp	r3, r4
 8008640:	d919      	bls.n	8008676 <__ieee754_pow+0x7f6>
 8008642:	4b9f      	ldr	r3, [pc, #636]	@ (80088c0 <__ieee754_pow+0xa40>)
 8008644:	440b      	add	r3, r1
 8008646:	4303      	orrs	r3, r0
 8008648:	d009      	beq.n	800865e <__ieee754_pow+0x7de>
 800864a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	2300      	movs	r3, #0
 8008652:	f7f8 f9b3 	bl	80009bc <__aeabi_dcmplt>
 8008656:	3800      	subs	r0, #0
 8008658:	bf18      	it	ne
 800865a:	2001      	movne	r0, #1
 800865c:	e527      	b.n	80080ae <__ieee754_pow+0x22e>
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	f7f7 fd81 	bl	8000168 <__aeabi_dsub>
 8008666:	4632      	mov	r2, r6
 8008668:	463b      	mov	r3, r7
 800866a:	f7f8 f9bb 	bl	80009e4 <__aeabi_dcmpge>
 800866e:	2800      	cmp	r0, #0
 8008670:	d1eb      	bne.n	800864a <__ieee754_pow+0x7ca>
 8008672:	4b94      	ldr	r3, [pc, #592]	@ (80088c4 <__ieee754_pow+0xa44>)
 8008674:	e003      	b.n	800867e <__ieee754_pow+0x7fe>
 8008676:	4a94      	ldr	r2, [pc, #592]	@ (80088c8 <__ieee754_pow+0xa48>)
 8008678:	4293      	cmp	r3, r2
 800867a:	f240 80e1 	bls.w	8008840 <__ieee754_pow+0x9c0>
 800867e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008682:	151b      	asrs	r3, r3, #20
 8008684:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008688:	fa4a fa03 	asr.w	sl, sl, r3
 800868c:	44da      	add	sl, fp
 800868e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008692:	488e      	ldr	r0, [pc, #568]	@ (80088cc <__ieee754_pow+0xa4c>)
 8008694:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008698:	4108      	asrs	r0, r1
 800869a:	ea00 030a 	and.w	r3, r0, sl
 800869e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80086a2:	f1c1 0114 	rsb	r1, r1, #20
 80086a6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80086aa:	4640      	mov	r0, r8
 80086ac:	fa4a fa01 	asr.w	sl, sl, r1
 80086b0:	f1bb 0f00 	cmp.w	fp, #0
 80086b4:	4649      	mov	r1, r9
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	bfb8      	it	lt
 80086bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80086c0:	f7f7 fd52 	bl	8000168 <__aeabi_dsub>
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	2400      	movs	r4, #0
 80086ca:	4632      	mov	r2, r6
 80086cc:	463b      	mov	r3, r7
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f7 fd4b 	bl	800016c <__adddf3>
 80086d6:	a368      	add	r3, pc, #416	@ (adr r3, 8008878 <__ieee754_pow+0x9f8>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	4620      	mov	r0, r4
 80086de:	460d      	mov	r5, r1
 80086e0:	f7f7 fefa 	bl	80004d8 <__aeabi_dmul>
 80086e4:	4642      	mov	r2, r8
 80086e6:	464b      	mov	r3, r9
 80086e8:	e9cd 0100 	strd	r0, r1, [sp]
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f7 fd3a 	bl	8000168 <__aeabi_dsub>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	f7f7 fd34 	bl	8000168 <__aeabi_dsub>
 8008700:	a35f      	add	r3, pc, #380	@ (adr r3, 8008880 <__ieee754_pow+0xa00>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f7f7 fee7 	bl	80004d8 <__aeabi_dmul>
 800870a:	a35f      	add	r3, pc, #380	@ (adr r3, 8008888 <__ieee754_pow+0xa08>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	4680      	mov	r8, r0
 8008712:	4689      	mov	r9, r1
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 fede 	bl	80004d8 <__aeabi_dmul>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	f7f7 fd22 	bl	800016c <__adddf3>
 8008728:	4604      	mov	r4, r0
 800872a:	460d      	mov	r5, r1
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008734:	f7f7 fd1a 	bl	800016c <__adddf3>
 8008738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	f7f7 fd12 	bl	8000168 <__aeabi_dsub>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4620      	mov	r0, r4
 800874a:	4629      	mov	r1, r5
 800874c:	f7f7 fd0c 	bl	8000168 <__aeabi_dsub>
 8008750:	4642      	mov	r2, r8
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	464b      	mov	r3, r9
 8008758:	4640      	mov	r0, r8
 800875a:	4649      	mov	r1, r9
 800875c:	f7f7 febc 	bl	80004d8 <__aeabi_dmul>
 8008760:	a34b      	add	r3, pc, #300	@ (adr r3, 8008890 <__ieee754_pow+0xa10>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	4604      	mov	r4, r0
 8008768:	460d      	mov	r5, r1
 800876a:	f7f7 feb5 	bl	80004d8 <__aeabi_dmul>
 800876e:	a34a      	add	r3, pc, #296	@ (adr r3, 8008898 <__ieee754_pow+0xa18>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f7f7 fcf8 	bl	8000168 <__aeabi_dsub>
 8008778:	4622      	mov	r2, r4
 800877a:	462b      	mov	r3, r5
 800877c:	f7f7 feac 	bl	80004d8 <__aeabi_dmul>
 8008780:	a347      	add	r3, pc, #284	@ (adr r3, 80088a0 <__ieee754_pow+0xa20>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f7f7 fcf1 	bl	800016c <__adddf3>
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	f7f7 fea3 	bl	80004d8 <__aeabi_dmul>
 8008792:	a345      	add	r3, pc, #276	@ (adr r3, 80088a8 <__ieee754_pow+0xa28>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 fce6 	bl	8000168 <__aeabi_dsub>
 800879c:	4622      	mov	r2, r4
 800879e:	462b      	mov	r3, r5
 80087a0:	f7f7 fe9a 	bl	80004d8 <__aeabi_dmul>
 80087a4:	a342      	add	r3, pc, #264	@ (adr r3, 80088b0 <__ieee754_pow+0xa30>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f7 fcdf 	bl	800016c <__adddf3>
 80087ae:	4622      	mov	r2, r4
 80087b0:	462b      	mov	r3, r5
 80087b2:	f7f7 fe91 	bl	80004d8 <__aeabi_dmul>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	f7f7 fcd3 	bl	8000168 <__aeabi_dsub>
 80087c2:	4604      	mov	r4, r0
 80087c4:	460d      	mov	r5, r1
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f7f7 fe83 	bl	80004d8 <__aeabi_dmul>
 80087d2:	2200      	movs	r2, #0
 80087d4:	e9cd 0100 	strd	r0, r1, [sp]
 80087d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087dc:	4620      	mov	r0, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	f7f7 fcc2 	bl	8000168 <__aeabi_dsub>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087ec:	f7f7 ff9e 	bl	800072c <__aeabi_ddiv>
 80087f0:	4632      	mov	r2, r6
 80087f2:	4604      	mov	r4, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	463b      	mov	r3, r7
 80087f8:	4640      	mov	r0, r8
 80087fa:	4649      	mov	r1, r9
 80087fc:	f7f7 fe6c 	bl	80004d8 <__aeabi_dmul>
 8008800:	4632      	mov	r2, r6
 8008802:	463b      	mov	r3, r7
 8008804:	f7f7 fcb2 	bl	800016c <__adddf3>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fcaa 	bl	8000168 <__aeabi_dsub>
 8008814:	4642      	mov	r2, r8
 8008816:	464b      	mov	r3, r9
 8008818:	f7f7 fca6 	bl	8000168 <__aeabi_dsub>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	2000      	movs	r0, #0
 8008822:	492b      	ldr	r1, [pc, #172]	@ (80088d0 <__ieee754_pow+0xa50>)
 8008824:	f7f7 fca0 	bl	8000168 <__aeabi_dsub>
 8008828:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800882c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8008830:	da09      	bge.n	8008846 <__ieee754_pow+0x9c6>
 8008832:	4652      	mov	r2, sl
 8008834:	f000 f854 	bl	80088e0 <scalbn>
 8008838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800883c:	f7ff bb89 	b.w	8007f52 <__ieee754_pow+0xd2>
 8008840:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008844:	e740      	b.n	80086c8 <__ieee754_pow+0x848>
 8008846:	4621      	mov	r1, r4
 8008848:	e7f6      	b.n	8008838 <__ieee754_pow+0x9b8>
 800884a:	2000      	movs	r0, #0
 800884c:	4920      	ldr	r1, [pc, #128]	@ (80088d0 <__ieee754_pow+0xa50>)
 800884e:	f7ff bb35 	b.w	8007ebc <__ieee754_pow+0x3c>
 8008852:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008856:	f7ff bb31 	b.w	8007ebc <__ieee754_pow+0x3c>
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	f7ff bb2d 	b.w	8007ebc <__ieee754_pow+0x3c>
 8008862:	460c      	mov	r4, r1
 8008864:	f7ff bb87 	b.w	8007f76 <__ieee754_pow+0xf6>
 8008868:	2400      	movs	r4, #0
 800886a:	f7ff bb69 	b.w	8007f40 <__ieee754_pow+0xc0>
 800886e:	bf00      	nop
 8008870:	652b82fe 	.word	0x652b82fe
 8008874:	3c971547 	.word	0x3c971547
 8008878:	00000000 	.word	0x00000000
 800887c:	3fe62e43 	.word	0x3fe62e43
 8008880:	fefa39ef 	.word	0xfefa39ef
 8008884:	3fe62e42 	.word	0x3fe62e42
 8008888:	0ca86c39 	.word	0x0ca86c39
 800888c:	be205c61 	.word	0xbe205c61
 8008890:	72bea4d0 	.word	0x72bea4d0
 8008894:	3e663769 	.word	0x3e663769
 8008898:	c5d26bf1 	.word	0xc5d26bf1
 800889c:	3ebbbd41 	.word	0x3ebbbd41
 80088a0:	af25de2c 	.word	0xaf25de2c
 80088a4:	3f11566a 	.word	0x3f11566a
 80088a8:	16bebd93 	.word	0x16bebd93
 80088ac:	3f66c16c 	.word	0x3f66c16c
 80088b0:	5555553e 	.word	0x5555553e
 80088b4:	3fc55555 	.word	0x3fc55555
 80088b8:	40900000 	.word	0x40900000
 80088bc:	4090cbff 	.word	0x4090cbff
 80088c0:	3f6f3400 	.word	0x3f6f3400
 80088c4:	4090cc00 	.word	0x4090cc00
 80088c8:	3fe00000 	.word	0x3fe00000
 80088cc:	fff00000 	.word	0xfff00000
 80088d0:	3ff00000 	.word	0x3ff00000

080088d4 <fabs>:
 80088d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088d8:	4619      	mov	r1, r3
 80088da:	4770      	bx	lr
 80088dc:	0000      	movs	r0, r0
	...

080088e0 <scalbn>:
 80088e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80088e4:	4616      	mov	r6, r2
 80088e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80088ea:	4683      	mov	fp, r0
 80088ec:	468c      	mov	ip, r1
 80088ee:	460b      	mov	r3, r1
 80088f0:	b982      	cbnz	r2, 8008914 <scalbn+0x34>
 80088f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088f6:	4303      	orrs	r3, r0
 80088f8:	d035      	beq.n	8008966 <scalbn+0x86>
 80088fa:	4b2d      	ldr	r3, [pc, #180]	@ (80089b0 <scalbn+0xd0>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	f7f7 fdeb 	bl	80004d8 <__aeabi_dmul>
 8008902:	4b2c      	ldr	r3, [pc, #176]	@ (80089b4 <scalbn+0xd4>)
 8008904:	4683      	mov	fp, r0
 8008906:	429e      	cmp	r6, r3
 8008908:	468c      	mov	ip, r1
 800890a:	da0d      	bge.n	8008928 <scalbn+0x48>
 800890c:	a324      	add	r3, pc, #144	@ (adr r3, 80089a0 <scalbn+0xc0>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	e019      	b.n	8008948 <scalbn+0x68>
 8008914:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008918:	42ba      	cmp	r2, r7
 800891a:	d109      	bne.n	8008930 <scalbn+0x50>
 800891c:	4602      	mov	r2, r0
 800891e:	f7f7 fc25 	bl	800016c <__adddf3>
 8008922:	4683      	mov	fp, r0
 8008924:	468c      	mov	ip, r1
 8008926:	e01e      	b.n	8008966 <scalbn+0x86>
 8008928:	460b      	mov	r3, r1
 800892a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800892e:	3a36      	subs	r2, #54	@ 0x36
 8008930:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008934:	428e      	cmp	r6, r1
 8008936:	dd0a      	ble.n	800894e <scalbn+0x6e>
 8008938:	a31b      	add	r3, pc, #108	@ (adr r3, 80089a8 <scalbn+0xc8>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	4665      	mov	r5, ip
 8008940:	f363 051e 	bfi	r5, r3, #0, #31
 8008944:	4629      	mov	r1, r5
 8008946:	481c      	ldr	r0, [pc, #112]	@ (80089b8 <scalbn+0xd8>)
 8008948:	f7f7 fdc6 	bl	80004d8 <__aeabi_dmul>
 800894c:	e7e9      	b.n	8008922 <scalbn+0x42>
 800894e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008952:	4432      	add	r2, r6
 8008954:	428a      	cmp	r2, r1
 8008956:	dcef      	bgt.n	8008938 <scalbn+0x58>
 8008958:	2a00      	cmp	r2, #0
 800895a:	dd08      	ble.n	800896e <scalbn+0x8e>
 800895c:	f36f 531e 	bfc	r3, #20, #11
 8008960:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008964:	46ac      	mov	ip, r5
 8008966:	4658      	mov	r0, fp
 8008968:	4661      	mov	r1, ip
 800896a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800896e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008972:	da09      	bge.n	8008988 <scalbn+0xa8>
 8008974:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008978:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800897c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008980:	480e      	ldr	r0, [pc, #56]	@ (80089bc <scalbn+0xdc>)
 8008982:	f041 011f 	orr.w	r1, r1, #31
 8008986:	e7c1      	b.n	800890c <scalbn+0x2c>
 8008988:	3236      	adds	r2, #54	@ 0x36
 800898a:	f36f 531e 	bfc	r3, #20, #11
 800898e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008992:	4658      	mov	r0, fp
 8008994:	4629      	mov	r1, r5
 8008996:	2200      	movs	r2, #0
 8008998:	4b09      	ldr	r3, [pc, #36]	@ (80089c0 <scalbn+0xe0>)
 800899a:	e7d5      	b.n	8008948 <scalbn+0x68>
 800899c:	f3af 8000 	nop.w
 80089a0:	c2f8f359 	.word	0xc2f8f359
 80089a4:	01a56e1f 	.word	0x01a56e1f
 80089a8:	8800759c 	.word	0x8800759c
 80089ac:	7e37e43c 	.word	0x7e37e43c
 80089b0:	43500000 	.word	0x43500000
 80089b4:	ffff3cb0 	.word	0xffff3cb0
 80089b8:	8800759c 	.word	0x8800759c
 80089bc:	c2f8f359 	.word	0xc2f8f359
 80089c0:	3c900000 	.word	0x3c900000

080089c4 <with_errno>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	4604      	mov	r4, r0
 80089c8:	460d      	mov	r5, r1
 80089ca:	4616      	mov	r6, r2
 80089cc:	f7fd f86e 	bl	8005aac <__errno>
 80089d0:	4629      	mov	r1, r5
 80089d2:	6006      	str	r6, [r0, #0]
 80089d4:	4620      	mov	r0, r4
 80089d6:	bd70      	pop	{r4, r5, r6, pc}

080089d8 <xflow>:
 80089d8:	b513      	push	{r0, r1, r4, lr}
 80089da:	4604      	mov	r4, r0
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	b10c      	cbz	r4, 80089e6 <xflow+0xe>
 80089e2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80089e6:	e9cd 2300 	strd	r2, r3, [sp]
 80089ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ee:	f7f7 fd73 	bl	80004d8 <__aeabi_dmul>
 80089f2:	2222      	movs	r2, #34	@ 0x22
 80089f4:	b002      	add	sp, #8
 80089f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089fa:	f7ff bfe3 	b.w	80089c4 <with_errno>

080089fe <__math_uflow>:
 80089fe:	2200      	movs	r2, #0
 8008a00:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a04:	f7ff bfe8 	b.w	80089d8 <xflow>

08008a08 <__math_oflow>:
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8008a0e:	f7ff bfe3 	b.w	80089d8 <xflow>
	...

08008a14 <_init>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	bf00      	nop
 8008a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1a:	bc08      	pop	{r3}
 8008a1c:	469e      	mov	lr, r3
 8008a1e:	4770      	bx	lr

08008a20 <_fini>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	bf00      	nop
 8008a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a26:	bc08      	pop	{r3}
 8008a28:	469e      	mov	lr, r3
 8008a2a:	4770      	bx	lr
